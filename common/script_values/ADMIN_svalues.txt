ADMIN_required_state = {
	# Scope: State
	# Function: Determine how much admin capacity is required in this state
	# Failing to meet the admin capacity has downsides:
	# - Decreased state loyalty cap
	# - Decreased tax efficiency
	# - Increased likelihood of bad events from this state
	# As the ADMIN cap met in all states contributes to the country's overall requirement, this also has country-wide effects
	# - Decreased political power gain at the country level 
	# - Decreased diplomatic power at the country level
	value = 0
	every_state_province = {
		add = ADMIN_required_province
	}

	# Certain laws can multiply ADMIN requirement on the state
	multiply = owner.ADMIN_all_states_required_modifier
	min = 0
}

ADMIN_overall_impact = {
	# Scope: State
	# Function: Subtract the ADMIN_required_state from ADMIN_provided_state_max_bonus
	# Supplies the value for the admin modifier
	value = ADMIN_required_state
	subtract = ADMIN_provided_state_max_bonus
}

ADMIN_required_province = {
	# Scope: Province
	# Function: Get how much administration is required for the given province
	value = 1
	if = {
		limit = {
			OR = {
				terrain = low_mountain
				terrain = desert_hills
				terrain = desert
				terrain = sparse_jungle
			}
		}
		add = 1
	}
	else_if = {
		limit = {
			OR = {
				terrain = extreme_mountain
				terrain = extreme_desert
				terrain = dense_jungle
			}
		}
		add = 3
	}
	add = {
		value = total_population
		divide = 10
	}
}

ADMIN_all_states_required_modifier = {
	# Scope: Country
	# Function: Add values here to administration requirement from laws and other initiatives
	# Acts as a multiplier to ADMIN required by states
	value = 1
}

ADMIN_country_points_from_admin_districts_modifier = {
	# Scope: Country
	# Function: Add values here to administration bonus from techs
	# Acts as a multiplier to administration provided by admin buildings
	value = 1
}

ADMIN_provided_state_max_bonus = {
	# Scope: State
	# Function: The maximum bonus to state loyalty from administration, which should not exceed the demand for ADMIN
	value = ADMIN_provided_state
	max = ADMIN_required_state
}

ADMIN_provided_state = {
	# Scope: State
	# Function: Determine how much admin capacity is provided to the state
	# Max = ADMIN_required_state, except for in the capital
	value = 0
	every_state_province = {
		add = num_of_URB_administration_district
	}
	multiply = ADMIN_provided_per_URB_administration_district

	# 10% of ADMIN from the capital city filters out to all states

	owner.capital_scope = {
		add = num_of_URB_administration_district
		# multiply = 1 # not needed
		multiply = owner.ADMIN_country_points_from_admin_districts_modifier
	}
}

ADMIN_provided_per_URB_administration_district = {
	# Scope: Province
	# Function: Stores the administration capacity provided by 1 admin district
	value = 10
	multiply = owner.ADMIN_country_points_from_admin_districts_modifier
}

ADMIN_provided_total_URB_administration_district_province = {
	# Scope: Province
	# Function: Stores the administration capacity provided by 1 admin district
	value = ADMIN_provided_per_URB_administration_district
	multiply = num_of_URB_administration_district
}

ADMIN_required_country = {
	# Scope: Country
	# Function: Determine how much admin capacity is required for the whole country
	# Failing to meet this has the following maluses:
	# - Decreased political power gain
	# - Decreased diplomatic power

	# This is summed up partially from all the state ADMIN requirements across the country
	every_governorships = {
		every_governorship_state = {
			add = ADMIN_required_state
		}
	}

	# Then, additional initiatives can require ADMIN
	# For example, certain laws may require a flat amount of ADMIN, which can only be provided in the capital
}

ADMIN_supplied_country = {
	every_governorships = {
		every_governorship_state = {
			add = ADMIN_provided_state
		}
	}
}

ADMIN_available_country = {
	# Scope: Country
	# Function: Subtract required from provided country administration
	value = ADMIN_supplied_country
	subtract = ADMIN_required_country
}