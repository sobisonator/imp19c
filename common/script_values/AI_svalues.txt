AI_play_power_balance_instigator_root_percent = {
	# Scope: Diplomatic play province
	# Function: Get the balance of power as a percentage
	value = var:AI_play_power_balance_instigator_root
	multiply = 0.5 # So if it is a 100% match, then they are 50/50
}

AI_interest_weighting_from_tradegood = {
	# Scope: Province
	if = {
	    limit = {
	        trade_goods = grain
	    }
	    value = AI_root_scope_unit_price_sqrt_grain
	}
	else_if = {
	   	limit = {
	        trade_goods = coffee
	    }
	    value = AI_root_scope_unit_price_sqrt_coffee
	}
	else_if = {
	    limit = {
	        trade_goods = tea
	    }
	    value = AI_root_scope_unit_price_sqrt_tea
	}
	else_if = {
	    limit = {
	        trade_goods = spices
	    }
	    value = AI_root_scope_unit_price_sqrt_spices
	}
	else_if = {
	    limit = {
	        trade_goods = sugar
	    }
	    value = AI_root_scope_unit_price_sqrt_sugar
	}
	else_if = {
	    limit = {
	        trade_goods = fur
	    }
	    value = AI_root_scope_unit_price_sqrt_fur
	}
	else_if = {
	    limit = {
	        trade_goods = industrial_fibres
	    }
	    value = AI_root_scope_unit_price_sqrt_industrial_fibres
	    
	}
	else_if = {
	    limit = {
	        trade_goods = textile_fibres
	    }
	    value = AI_root_scope_unit_price_sqrt_textile_fibres
	}
	else_if = {
	    limit = {
	        trade_goods = wool
	    }
	    value = AI_root_scope_unit_price_sqrt_wool
	}
	else_if = {
	    limit = {
	        trade_goods = silk
	    }
	    value = AI_root_scope_unit_price_sqrt_silk
	}
	else_if = {
	    limit = {
	        trade_goods = wood
	    }
	    value = AI_root_scope_unit_price_sqrt_wood
	}
	else_if = {
	    limit = {
	        trade_goods = stone
	    }
	    value = AI_root_scope_unit_price_sqrt_stone
	}
	else_if = {
	    limit = {
	        trade_goods = sulphur
	    }
	    value = AI_root_scope_unit_price_sqrt_sulphur
	}
	else_if = {
	    limit = {
	        trade_goods = tin
	    }
	    value = AI_root_scope_unit_price_sqrt_tin
	}
	else_if = {
	    limit = {
	        trade_goods = copper
	    }
	    value = AI_root_scope_unit_price_sqrt_copper
	}
	else_if = {
	    limit = {
	        trade_goods = iron
	    }
	    value = AI_root_scope_unit_price_sqrt_iron
	}
	else_if = {
	    limit = {
	        trade_goods = gold
	    }
	    value = AI_root_scope_unit_price_sqrt_gold
	}
	else_if = {
	    limit = {
	        trade_goods = silver
	    }
	    value = AI_root_scope_unit_price_sqrt_silver
	}
	else_if = {
	    limit = {
	        trade_goods = dye
	    }
	    value = AI_root_scope_unit_price_sqrt_dye
	}
	else_if = {
	    limit = {
	        trade_goods = lead
	    }
	    value = AI_root_scope_unit_price_sqrt_lead
	}
	else_if = {
	    limit = {
	        trade_goods = oil
	    }
	    value = AI_root_scope_unit_price_sqrt_oil
	}
	else_if = {
	    limit = {
	        trade_goods = hardwood
	    }
	    value = AI_root_scope_unit_price_sqrt_hardwood
	}
	else_if = {
	    limit = {
	        trade_goods = rubber
	    }
	    value = AI_root_scope_unit_price_sqrt_rubber
	}
	else_if = {
	    limit = {
	        trade_goods = salt
	    }
	    value = AI_root_scope_unit_price_sqrt_salt
	}
	multiply = AI_interest_tradegood_weighting_multiplier
}

AI_interest_tradegood_weighting_modifier_gold_or_silver = {
	value = 1
}

AI_interest_tradegood_weighting_multiplier = {
	# Scope: Province
	value = 200
	add = {
		value = population_cap
		multiply = 100
	}
}

AI_diplomacy_interest_cutoff_threshhold = {
	# Scope: Country
	# Function: Amount of DIPLOMACY_power a country needs to get 1 power
	# Multiples of this value grant the country extra interests
	# Countries below this threshhold have much simpler triggers for initiating international diplomatic plays
	value = 230
}

AI_diplomacy_interest_from_tradezone_diplomacy_power_scope_ai_root = {
	# Scope: Area (requires the AI_root scope to be set in the current effect)
	# Function: Serves as a weighting for AI interest based on diplomacy power in the given tradezone of whichever area is being polled (see AI_add_control_interest)
	value = 1
	if = {
		limit = {
			any_area_province = {
				india_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_india
	}
	else_if = {
		limit = {
			any_area_province = {
				east_north_america_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_east_north_america
	}
	else_if = {
		limit = {
			any_area_province = {
				west_north_america_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_west_north_america
	}
	else_if = {
		limit = {
			any_area_province = {
				caribbean_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_caribbean
	}
	else_if = {
		limit = {
			any_area_province = {
				west_south_america_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_west_south_america
	}
	else_if = {
		limit = {
			any_area_province = {
				east_south_america_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_east_south_america
	}
	else_if = {
		limit = {
			any_area_province = {
				south_east_asia_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_south_east_asia
	}
	else_if = {
		limit = {
			any_area_province = {
				indo_china_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_indo_china
	}
	else_if = {
		limit = {
			any_area_province = {
				yellow_sea_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_yellow_sea
	}
	else_if = {
		limit = {
			any_area_province = {
				southern_africa_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_southern_africa
	}
	else_if = {
		limit = {
			any_area_province = {
				west_africa_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_west_africa
	}
	else_if = {
		limit = {
			any_area_province = {
				east_africa_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_east_africa
	}
	else_if = {
		limit = {
			any_area_province = {
				middle_east_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_middle_east
	}
	else_if = {
		limit = {
			any_area_province = {
				western_steppe_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_western_steppe
	}
	else_if = {
		limit = {
			any_area_province = {
				eastern_steppe_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_eastern_steppe
	}
	else_if = {
		limit = {
			any_area_province = {
				upper_yangtzi_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_upper_yangtzi
	}
	else_if = {
		limit = {
			any_area_province = {
				atlantic_seaboard_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_atlantic_seaboard
	}
	else_if = {
		limit = {
			any_area_province = {
				central_europe_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_central_europe
	}
	else_if = {
		limit = {
			any_area_province = {
				west_mediterranean_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_west_mediterranean
	}
	else_if = {
		limit = {
			any_area_province = {
				baltic_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_baltic
	}
	else_if = {
		limit = {
			any_area_province = {
				east_europe_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_east_europe
	}
	else_if = {
		limit = {
			any_area_province = {
				east_mediterranean_tradezone = { PROVINCE = yes }
			}
		}
		add = scope:AI_root.var:DIPLOMACY_power_east_mediterranean
	}
	divide = AI_interest_from_diplomacy_power_scale_scope_ai_root
}

AI_interest_from_diplomacy_power_scale_scope_ai_root = {
	# Scope: Area
	# Function: Scale the impact of AI_root's power
	# This value is used to divide, so the bigger the number the smaller the impact from diplomacy power
	value = 1000
}

AI_test_population_capacity = {
	value = modifier:local_population_capacity
}

### SQUARE ROOT APPROXIMATIONS
# Used to normalise price values in interest weight calculations
AI_root_scope_unit_price_sqrt_grain = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_grain
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_grain
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_fish = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_fish
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_fish
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_livestock = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_livestock
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_livestock
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_vegetables = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_vegetables
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_vegetables
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_tropical_fruit = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_tropical_fruit
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_tropical_fruit
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_mediterranean_fruit = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_mediterranean_fruit
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_mediterranean_fruit
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_temperate_fruit = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_temperate_fruit
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_temperate_fruit
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_processed_foods = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_processed_foods
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_processed_foods
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_clothing = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_clothing
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_clothing
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_furniture = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_furniture
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_furniture
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_pharmaceuticals = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_pharmaceuticals
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_pharmaceuticals
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_coal = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_coal
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_coal
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_whales = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_whales
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_whales
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_alcohol = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_alcohol
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_alcohol
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_gems = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_gems
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_gems
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_opium = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_opium
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_opium
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_tobacco = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_tobacco
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_tobacco
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_chocolate = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_chocolate
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_chocolate
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_coffee = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_coffee
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_coffee
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_tea = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_tea
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_tea
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_spices = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_spices
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_spices
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_sugar = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_sugar
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_sugar
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_luxury_clothing = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_luxury_clothing
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_luxury_clothing
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_luxury_furniture = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_luxury_furniture
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_luxury_furniture
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_glass = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_glass
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_glass
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_motors = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_motors
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_motors
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_fur = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_fur
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_fur
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_industrial_fibres = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_industrial_fibres
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_industrial_fibres
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_textile_fibres = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_textile_fibres
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_textile_fibres
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_wool = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_wool
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_wool
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_silk = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_silk
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_silk
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_wood = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_wood
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_wood
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_stone = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_stone
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_stone
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_sulphur = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_sulphur
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_sulphur
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_peat = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_peat
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_peat
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_tin = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_tin
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_tin
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_inorganic_compounds = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_inorganic_compounds
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_inorganic_compounds
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_copper = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_copper
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_copper
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_iron = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_iron
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_iron
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_gold = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_gold
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_gold
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_silver = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_silver
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_silver
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_dye = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_dye
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_dye
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_lead = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_lead
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_lead
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_oil = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_oil
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_oil
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_hardwood = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_hardwood
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_hardwood
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_rubber = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_rubber
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_rubber
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_salt = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_salt
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_salt
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_electronics = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_electronics
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_electronics
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_construction_materials = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_construction_materials
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_construction_materials
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_steel = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_steel
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_steel
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_bronze = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_bronze
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_bronze
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_machine_parts = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_machine_parts
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_machine_parts
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_chemicals = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_chemicals
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_chemicals
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_naval_supplies = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_naval_supplies
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_naval_supplies
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_steel_ships = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_steel_ships
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_steel_ships
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_wooden_ships = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_wooden_ships
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_wooden_ships
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_petrochemicals = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_petrochemicals
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_petrochemicals
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_early_munitions = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_early_munitions
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_early_munitions
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_late_munitions = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_late_munitions
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_late_munitions
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_early_artillery = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_early_artillery
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_early_artillery
		add = 1
	}
}
AI_root_scope_unit_price_sqrt_late_artillery = {
	# Scope: Province (requires AI_root to be a saved scope)
	# Function: Estimate the square root of the given tradegood price
	# Using rational approximation tuned for values 0.01 to 20
	value = scope:AI_root.var:country_unit_price_late_artillery
	multiply = 1.1547
	add = 0.5
	divide = {
		value = scope:AI_root.var:country_unit_price_late_artillery
		add = 1
	}
}

AI_ports_to_land_ratio = {
	# Scope: Country
	# Function: Get the ratio of coastal out of owned provinces
	# Used for weighting big, mostly-land empires, which will look to nearby provinces instead of distant overseas ones, for interest
	value = 0
	every_owned_province = {
		limit = {
			is_coastal = yes
		}
		add = SHIPPING_province_power
	}
	min = 1
	divide = {
		min = 1
		every_owned_province = {
			add = 1
		}
	}
	divide = 500
}

AI_coastal_port_states_power_ratio = {
	# Scope: Country
	# Function: Divide the naval total port level in the country by the number of states in the country
	every_owned_province = {
		limit = {
			has_building = port_building
		}
		add = num_of_port_building
	}
	divide = {
		every_country_state = {
			add = 1
		}
	}
}

AI_state_ratio_provinces_in_peace_wishlist = {
	# Scope: State
	every_state_province = {
		limit = {
			is_in_list = AI_peace_wishlist_stage_1
		}
		add = AI_interest_value_province
	}
	area = {
		every_area_province = {
			limit = {
				owner = scope:AI_root
			}
			add = AI_interest_value_province
		}
	}
	divide = {
		every_state_province = {
			add = AI_interest_value_province
		}
	}
}

AI_interest_value = {
	value = {
		# Begin order_by value

		# BEGIN Values from provinces
		every_area_province = {
			limit = {
				trigger_if = {
					limit = {
						has_owner = yes
					}
					NOT = { owner = scope:AI_root }
					trigger_if = {
						limit = {
							owner = { is_subject = yes}
						}
						NOT = { owner.overlord = scope:AI_root }
					}
				}
			}
			# BEGIN FROM POPS
			add = {
				every_pops_in_province = {
					# Same religion
					if = {
						limit = {
							THIS.religion = scope:AI_root.religion
						}
						add = {
							value = scope:AI_root.SPIRIT_piety
							multiply = 2
						}
					}
					# Same culture
					if = {
						limit = {
							THIS.culture = scope:AI_root.culture
						}
						add = scope:AI_root.SPIRIT_nationalism
						multiply = 8
					}
					# Similar culture
					else_if = {
						limit = {
							THIS.culture_group = scope:AI_root.culture.culture_group
						}
						add = {
							value = scope:AI_root.SPIRIT_nationalism
							multiply = 5
						}
					}
				}
				multiply = 5
			}
			
			# END FROM POPS

			# Bonus from



			if = {
				limit = {
					has_owner = yes
				}
				if = {
					limit = {
						owner.religion = scope:AI_root.religion
						owner = { is_subject = no }
					}
					subtract = scope:AI_root.SPIRIT_piety
				}
				if = {
					limit = {
						owner.culture = scope:AI_root.culture
						owner = { is_subject = no }
					}
					subtract = scope:AI_root.SPIRIT_nationalism
				}
				else_if = {
					limit = {
						owner.culture_group = scope:AI_root.culture_group
						owner = { is_subject = no }
					}
					subtract = {
						value = scope:AI_root.SPIRIT_nationalism
						min = 0.01
						divide = 2
					}
				}
			}
			# Tradegood desirability
			# TODO: Balance the weighting, as expensive goods are far too preferred, owning them as a small country would basically be a death wish
			# Maybe get square root of tradegood price to diminish the distribution of prices in this calculation
			# Or a little weighting from the actual num goods produced
			# Alternatively, from the total possible building slots or population cap?
			add = AI_interest_weighting_from_tradegood
			# Add how much population the province can support
			# TODO: This is not working as intended, it should be higher for terrains that can support more pops
			# Encouraged to predate on low industrialisation provinces
			subtract = {
				value = civilization_value
				multiply = 20
			}
			# Discouraged coveting overlord's territory
			if = {
				limit = {
					has_owner = yes
				}
				if = {
					limit = {
						owner = scope:AI_root.overlord
					}
					subtract = 1000
				}
			}
			# Add value from intrinsic shipping modifiers (instead of adding raw shipping power, because AI interest is more about the potential of an area than its current value)
			if = {
				limit = {
					has_variable = natural_harbour
				}
				add = {
					value = SHIPPING_natural_harbour_bonus
					multiply = 10
				}
			}
			if = {
				limit = {
					has_variable = major_estuary
				}
				add = {
					value = SHIPPING_major_estuary_bonus
					multiply = 10
				}
			}
			if = {
				limit = {
					has_variable = trade_chokepoint
				}
				add = {
					value = SHIPPING_trade_chokepoint_bonus
					multiply = 10
				}
			}
			if = {
				limit = {
					has_minor_river = yes
				}
				add = {
					value = SHIPPING_river_or_coast_bonus
					multiply = 10
				}
			}
			# Discourage coveting allies' territory
			if = {
				limit = {
					has_owner = yes
				}
				if = {
					limit = {
						OR = {
							owner = {
								alliance_with = scope:AI_root
							}
							trigger_if = {
								limit = {
									owner = { is_subject = yes }
								}
								owner.overlord = {
									OR = {
										alliance_with = scope:AI_root
										is_subject_of = scope:AI_root
									}
								}
							}
						}
					}
					value = 1
				}
			}
			# Triple the entire province score if this province is a claim of the AI_root
			if = {
				limit = {
					is_core_of = scope:AI_root
				}
				multiply = 3
			}
		}
		# END provinces loop
		# Boost the score per province
		multiply = 5
		# Turn this into an average province value for the area, so the bias is not towards purely larger areas
		divide = {
			every_area_province = {
				limit = {
					trigger_if = {
						limit = {
							has_owner = yes
						}
						NOT = { owner = scope:AI_root }
						trigger_if = {
							limit = {
								owner = { is_subject = yes }
							}
							NOT = { owner.overlord = scope:AI_root }
						}
					}
				}
				add = 0
			}
			min = 1
		}
		# END Values from provinces

		# From neighbouring areas if port ratio is low
		if = {
			limit = {
				any_area_province = {
					any_neighbor_province = {
						trigger_if = {
							limit = {
								has_owner = yes
							}
							OR = {
								owner = scope:AI_root
								owner = { is_subject_of = scope:AI_root }
							}
						}
						
					}
				}
			}
			divide = {
				value = AI_ports_to_land_ratio
				min = 0.01
			}
		}
		
		# From AI_root's DIPLOMACY_power in the area's TZ
		multiply = AI_diplomacy_interest_from_tradezone_diplomacy_power_scope_ai_root
		# TODO: Try adding half the diplomacy power of AI_root from neighbouring TZs as well
		 
		# Add weight if AI_root is not a major player in the TZ, but it aspires to be.
		# End order_by value
	}
}

AI_interest_value_province = {
	value = 1
	add = {
		every_pops_in_province = {
			# Same religion
			if = {
				limit = {
					THIS.religion = scope:AI_root.religion
				}
				add = {
					value = scope:AI_root.SPIRIT_piety
					multiply = 2
					min = 0
				}
			}
			# Same culture
			if = {
				limit = {
					THIS.culture = scope:AI_root.culture
				}
				add = scope:AI_root.SPIRIT_nationalism
				multiply = 20 # Increased from the state value
				min = 0
			}
			# Similar culture
			else_if = {
				limit = {
					THIS.culture_group = scope:AI_root.culture.culture_group
				}
				add = {
					value = scope:AI_root.SPIRIT_nationalism
					multiply = 10 # Increased from the state value
					min = 0
				}
			}
		}
		multiply = 5
	}

	# END FROM POPS
	if = {
		limit = {
			has_owner = yes
		}
		if = {
			limit = {
				owner.religion = scope:AI_root.religion
				owner = { is_subject = no }
			}
			subtract = scope:AI_root.SPIRIT_piety
			min = 0
		}
		if = {
			limit = {
				owner.culture = scope:AI_root.culture
				owner = { is_subject = no }
			}
			subtract = scope:AI_root.SPIRIT_nationalism
			min = 0
		}
		else_if = {
			limit = {
				owner.culture_group = scope:AI_root.culture_group
				owner = { is_subject = no }
			}
			subtract = {
				value = scope:AI_root.SPIRIT_nationalism
				min = 0.01
				divide = 2
				min = 0
			}
		}
	}
	# Tradegood desirability
	# TODO: Balance the weighting, as expensive goods are far too preferred, owning them as a small country would basically be a death wish
	# Maybe get square root of tradegood price to diminish the distribution of prices in this calculation
	# Or a little weighting from the actual num goods produced
	# Alternatively, from the total possible building slots or population cap?
	add = AI_interest_weighting_from_tradegood
	# Add how much population the province can support
	# TODO: This is not working as intended, it should be higher for terrains that can support more pops
	# Encouraged to predate on low industrialisation provinces
	subtract = {
		value = civilization_value
		multiply = 20
	}
	# Discouraged coveting overlord's territory
	if = {
		limit = {
			has_owner = yes
		}
		if = {
			limit = {
				owner = scope:AI_root.overlord
			}
			subtract = 1000
		}
	}
	# Add value from intrinsic shipping modifiers (instead of adding raw shipping power, because AI interest is more about the potential of an area than its current value)
	if = {
		limit = {
			has_variable = natural_harbour
		}
		add = {
			value = SHIPPING_natural_harbour_bonus
			multiply = 10
		}
	}
	if = {
		limit = {
			has_variable = major_estuary
		}
		add = {
			value = SHIPPING_major_estuary_bonus
			multiply = 10
		}
	}
	if = {
		limit = {
			has_variable = trade_chokepoint
		}
		add = {
			value = SHIPPING_trade_chokepoint_bonus
			multiply = 10
		}
	}
	if = {
		limit = {
			has_minor_river = yes
		}
		add = {
			value = SHIPPING_river_or_coast_bonus
			multiply = 10
		}
	}
	# Discourage coveting allies' territory
	if = {
		limit = {
			has_owner = yes
		}
		if = {
			limit = {
				OR = {
					owner = {
						alliance_with = scope:AI_root
					}
					trigger_if = {
						limit = {
							owner = { is_subject = yes }
						}
						owner.overlord = {
							OR = {
								alliance_with = scope:AI_root
								is_subject_of = scope:AI_root
							}
						}
					}
				}
			}
			value = 1
		}
	}
	# Triple the entire province score if this province is a claim of the AI_root
	if = {
		limit = {
			is_core_of = scope:AI_root
		}
		multiply = 3
	}
}

# DIPLOMATIC PLAY ASSESSMENTS
AI_diplomatic_play_assess_side = {
	# Scope: Country
	# Function: Assess which side to pick
	# Positive = play instigator
	# Negative = play target
	# Requires scope:diplomatic_play to be set

	# Divide with factors making the assessor less likely to pick a side, and more likely to remain neutral
	# Multiply with factors making the assessor more likely to intervene

	value = 1

	add = {
		# Instigator
		add = {
			value = scope:diplomatic_play.var:play_target_country.DIPLOMACY_power
			multiply = 0.01
		}
		if = {
			limit = {
				opinion = { target = scope:diplomatic_play.var:play_instigator value > 30 }
			}
			multiply = 2
		}
		else_if = {
			limit = {
				opinion = { target = scope:diplomatic_play.var:play_instigator value < 0 }
			}
			divide = 30
		}
		else_if = {
			limit = {
				opinion = { target = scope:diplomatic_play.var:play_instigator value < -50 }
			}
			divide = 60
		}

		scope:diplomatic_play.var:play_instigator = {
			every_allied_country = {
				add = {
					value = DIPLOMACY_power
					multiply = 0.01
				}
			}
		}

		scope:diplomatic_play.var:play_instigator = {
			divide = {
				value = 1
				every_owned_province = {
					limit = {
						is_core_of = scope:assessor_country
					}
					add = 4
				}
			}
		}

		# Do not want interventions near our own turf
		if = {
			limit = {
				scope:diplomatic_play.var:play_target_country = {
					any_owned_province = {
						any_neighbor_province = { owner = scope:assessor_country }
					}
				}
			}
			multiply = 0.3
		}
		
		divide = {
			value = scope:diplomatic_play.var:play_instigator.DIPLOMACY_global_power_score
			multiply = 0.5
			min = 1
		}

		if = {
			limit = {
				any_subject = { 
					THIS = scope:diplomatic_play.var:play_instigator
				}
			}
			multiply = 80
			max = 100000
		}
		else_if = {
			limit = {
				any_subject = { 
					any_subject = {
						THIS = scope:diplomatic_play.var:play_instigator
					}
				}
			}
			multiply = 80
			max = 100000
		}

		if = {
			limit = {
				OR = {
					alliance_with = scope:diplomatic_play.var:play_instigator
					trigger_if = {
						limit = {
							scope:diplomatic_play.var:play_instigator = {
								is_subject = yes
							}
						}
						alliance_with = scope:diplomatic_play.var:play_instigator.overlord
					}
					trigger_if = {
						limit = {
							scope:assessor_country = {
								is_subject = yes
							}							
						}
						scope:assessor_country.overlord = scope:diplomatic_play.var:play_instigator
						trigger_if = {
							limit = {
								scope:assessor_country.overlord = {
									is_subject = yes
								}
							}
							scope:assessor_country.overlord.overlord = scope:diplomatic_play.var:play_instigator
						}
					}
				}
			}
			add = 50
			multiply = 10
		}

	}

	subtract = {
		# Target
		add = {
			value = scope:diplomatic_play.var:play_instigator.DIPLOMACY_power
			multiply = 0.01
		}
		min = 1
		if = {
			limit = {
				opinion = { target = scope:diplomatic_play.var:play_instigator value > 30 }
			}
			multiply = 2
		}
		else_if = {
			limit = {
				opinion = { target = scope:diplomatic_play.var:play_target_country value < 0 }
			}
			divide = 30
		}
		else_if = {
			limit = {
				opinion = { target = scope:diplomatic_play.var:play_target_country value < -50 }
			}
			divide = 60
		}

		divide = {
			value = scope:diplomatic_play.var:play_target_country.DIPLOMACY_global_power_score
			multiply = 0.5
			min = 1
		}

		

		scope:diplomatic_play.var:play_target_country = {
			every_allied_country = {
				add = {
					value = DIPLOMACY_power
					multiply = 0.01
				}
			}
		}

		scope:diplomatic_play.var:play_target_country = {
			divide = {
				value = 1
				every_owned_province = {
					limit = {
						is_core_of = scope:assessor_country
					}
					add = 4
				}
			}
		}

		scope:diplomatic_play.var:play_target_area.area = {
			every_area_province = {
				limit = {
					is_core_of = scope:assessor_country
				}
				multiply = 2
			}
		}

		if = {
			limit = {
				any_subject = { 
					THIS = scope:diplomatic_play.var:play_target_country
				}
			}
			multiply = 1000
			max = 100000
		}
		else_if = {
			limit = {
				any_subject = { 
					any_subject = {
						THIS = scope:diplomatic_play.var:play_target_country
					}
				}
			}
			multiply = 1000
			max = 100000
		}

		else_if = {
			limit = {
				OR = {
					alliance_with = scope:diplomatic_play.var:play_target_country
					trigger_if = {
						limit = {
							scope:diplomatic_play.var:play_target_country = {
								is_subject = yes
							}
						}
						alliance_with = scope:diplomatic_play.var:play_target_country.overlord
					}	
				}
			}
			multiply = 10
			max = 100000
		}

		if = {
			limit = {
				OR = {
					alliance_with = scope:diplomatic_play.var:play_target_country
					trigger_if = {
						limit = {
							scope:diplomatic_play.var:play_target_country = {
								is_subject = yes
							}
						}
						alliance_with = scope:diplomatic_play.var:play_target_country.overlord
					}
					trigger_if = {
						limit = {
							scope:assessor_country = {
								is_subject = yes
							}							
						}
						scope:assessor_country.overlord = scope:diplomatic_play.var:play_target_country
						trigger_if = {
							limit = {
								scope:assessor_country.overlord = {
									is_subject = yes
								}
							}
							scope:assessor_country.overlord.overlord = scope:diplomatic_play.var:play_target_country
						}
					}
					
				}
			}
			add = 50
			multiply = 10
		}

	}

	# If the area is an interest already, add reluctance
	if = {
		limit = {
			is_target_in_variable_list = {
				name = AI_interests_list
				target = scope:diplomatic_play.var:play_target_area
			}
		}
		subtract = 1000
	}

	# Ideological differences
	# A bigger difference to target encourages support of instigator
	add = {
		value = scope:assessor_country.SPIRIT_traditionalism
		subtract = scope:diplomatic_play.var:play_target_country.SPIRIT_traditionalism
		multiply = 20
	}

	# A bigger difference to instigator encourages support of target
	subtract = {
		value = scope:assessor_country.SPIRIT_traditionalism
		subtract = scope:diplomatic_play.var:play_instigator.SPIRIT_traditionalism
		multiply = 20
	}

	# Religious differences
	if = {
		limit = {
			scope:diplomatic_play.var:play_target_country.religion = scope:assessor_country.religion
		}
		subtract = {
			value = scope:assessor_country.SPIRIT_piety
			multiply = 20
		}
	}

	# Less likely for a highly industrialised nation to care about a play with a low industrialisation target
	scope:diplomatic_play.var:play_target_country.capital_scope = {
		divide = {
			value = {
				scope:assessor_country.capital_scope = {
					value = civilization_value
				}
			}
			subtract = civilization_value
			multiply = 0.5
			min = 1
		}
	}

	# Political situation
	divide = {
		value = war_exhaustion
		multiply = war_exhaustion
		min = 1
	}

	multiply = {
		value = stability
		multiply = 0.015
		max = 1
	}


}