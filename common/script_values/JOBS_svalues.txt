# Wages owed for each job are increased by buildings, then scaled by the wages multiplier for that job.
# Resource extraction jobs' wages are determined by the number of pops rather than the number of RGOs
# Who pays out the wages is determined by who owns the respective industry

# The number of job slots for each job (job slots = building slots for buildings associated with the given job) is determined by:
# + The number of pops educated to that level
# - The number of used up job slots (i.e. buildings) in the same education level

##################
# Job slot values
# Province scope
##################

# Jobs capped by higher education
JOBS_administrators = {
	value = num_of_URB_administration_district
}

JOBS_administrators_governorship = {
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = JOBS_administrators
		}
	}
}

JOBS_educators = {
	value = num_of_EDU_school
	add = num_of_EDU_university
}

JOBS_educators_governorship = {
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = JOBS_educators
		}
	}
}

# Jobs capped by basic education
JOBS_infrastructure_workers = {
	value = num_of_INF_depot
	add = num_of_INF_canal
	add = num_of_INF_railway_upgrade
	add = num_of_INF_sewer_infrastructure
	add = num_of_river_port_building
	add = num_of_port_building
	add = num_of_INF_hospital
}

JOBS_infrastructure_workers_governorship = {
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = JOBS_infrastructure_workers
		}
	}
}

JOBS_commercial = {
	value = num_of_URB_commerce_district
	add = num_of_URB_cultural_district
}

JOBS_commercial_governorship = {
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = JOBS_commercial
		}
	}
}

# Jobs not capped by education

JOBS_military = {
	value = num_of_arsenal_building
	add = num_of_fortress_building
}

JOBS_military_governorship = {
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = JOBS_military
		}
	}
}

JOBS_resource_gatherer = {
	value = num_of_IND_resource_gathering_operation
}

JOBS_resource_gatherer_governorship = {
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = JOBS_resource_gatherer
		}
	}
}

JOBS_industrial_workers = {
	value = num_of_IND_industrial_estate
}

JOBS_industrial_workers_governorship = {
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = JOBS_industrial_workers
		}
	}
}

JOBS_wages_due_all = {
	# Scope: Governorship
	value = var:WEALTH_wages_due_industrial_workers
	add = var:WEALTH_wages_due_resource_gatherer
	add = var:WEALTH_wages_due_military
	add = var:WEALTH_wages_due_infrastructure_workers
	add = var:WEALTH_wages_due_educators
	add = var:WEALTH_wages_due_administrators
	add = var:WEALTH_wages_due_commercial
	# TODO: Modify this by the currency-to-wealth exchange rate
}

JOBS_wages_due_middle_strata = {
	# Scope: Governorship
	value = JOBS_wages_due_all
	multiply = {
		value = var:governorship_middle_strata
		divide = var:governorship_population
	}
}

JOBS_wages_due_proletariat = {
	# Scope: Governorship
	value = JOBS_wages_due_all
	multiply = {
		value = var:governorship_proletariat
		divide = var:governorship_population
	}
}

JOBS_wages_expense_upper_strata = {
	# Scope: Governorship
	value = 0
	if = {
		limit = {
			owner = {
				NOT = { has_variable = state_pays_wages_business }
			}
		}
		add = var:WEALTH_wages_due_industrial_workers
		add = var:WEALTH_wages_due_resource_gatherer
		add = var:WEALTH_wages_due_commercial
	}
	if = {
		limit = {
			owner = {
				NOT = { has_variable = state_pays_wages_military }
			}
		}
		add = var:WEALTH_wages_due_military # If not paid by state
	}
	if = {
		limit = {
			owner = {
				NOT = { has_variable = state_pays_wages_infrastructure_workers }
			}
		}
		add = var:WEALTH_wages_due_infrastructure_workers # If not paid by state
	}
	if = {
		limit = {
			owner = {
				NOT = { has_variable = state_pays_wages_educators }
			}
		}
		add = var:WEALTH_wages_due_educators # If not paid by state
	}
	if = {
		limit = {
			owner = {
				NOT = { has_variable = state_pays_wages_adminisrtators }
			}
		}
		add = var:WEALTH_wages_due_administrators # If not paid by state
	}
	multiply = {
		value = var:governorship_middle_strata
		add = var:governorship_proletariat
		divide = var:governorship_population
		multiply = -1
	}
}

JOBS_wages_expense_the_state = {
	# Scope: Governorship
	value = 0
	if = {
		limit = {
			owner = { has_variable = state_pays_wages_military }
		}
		add = var:WEALTH_wages_due_military
	}
	if = {
		limit = {
			owner = { has_variable = state_pays_wages_infrastructure_workers }
		}
		add = var:WEALTH_wages_due_infrastructure_workers
	}
	if = {
		limit = {
			owner = { has_variable = state_pays_wages_educators }
		}
		add = var:WEALTH_wages_due_educators
	}
	if = {
		limit = {
			owner = { has_variable = state_pays_wages_administrators }
		}
		add = var:WEALTH_wages_due_administrators
	}
	if = {
		limit = {
			owner = { has_variable = state_pays_wages_business }
		}
		add = var:WEALTH_wages_due_industrial_workers
		add = var:WEALTH_wages_due_resource_gatherer
		add = var:WEALTH_wages_due_commercial
	}
}

# General

JOBS_non_subsistence = {
	value = JOBS_industrial_worker
	add = JOBS_resource_gatherer
	add = JOBS_military
	add = JOBS_commercial
	add = JOBS_infrastructure_workers
	add = JOBS_arts_workers
	add = JOBS_educators
	add = JOBS_health_workers
	add = JOBS_administrators
}


# NOT IN USE:
JOBS_subsistence_worker = { # Workers not employed by buildings, but working due to lack of industrialisation
	value = total_population
	multiply = inverse_industrialisation # If industrialisation is 0, this will be 100
	subtract = JOBS_non_subsistence
}
##


##############
# Meta-values
##############

JOBS_num_used_slots = {
	# Scope: province
	value = JOBS_non_subsistence
}

JOBS_unemployed_pops_province = {
	# Scope: province
	value = total_population
	multiply = 0.5
	subtract = JOBS_num_used_slots
}

###############
# Caps
##############

JOBS_building_cap_limit_from_depots = {
	value = num_of_INF_depot
	multiply = JOBS_building_cap_per_depot
}

JOBS_building_cap_per_depot = {
	value = 6
}

JOBS_buildings_cap = {
	# Scope: province
	value = total_population
	subtract = num_of_tribesmen
	multiply = 0.5
	multiply = {
		value = civilization_value
		divide = 100
		add = 1
	}
	max = JOBS_building_cap_limit_from_depots
	min = {
		value = total_population
		multiply = 0.1
	}
	min = 1
	
}

JOBS_building_cap_unmaxed_by_depots = {
	# Scope: province
	value = total_population
	subtract = num_of_tribesmen
	multiply = 0.5
	min = {
		value = total_population
		multiply = 0.1
	}
	multiply = {
		value = civilization_value
		divide = 100
		add = 1
	}
}

JOBS_available_slots = {
	value = JOBS_buildings_cap
	subtract = JOBS_num_used_slots
}