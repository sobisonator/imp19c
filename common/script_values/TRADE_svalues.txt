# MODIFIERS

## EXPORT MODIFIERS

TRADE_country_export_stock_modifier = { # At the national level, modifies the amount of every governorship's stockpile that's available for trade
	# Range 0 - 1
	value = 1
	# Modified by laws defining how much of any tradegood's stockpile can be exported
	max = 1 # You can never sell more than 100% of your stockpile!
}

TRADE_governorship_export_stock_modifier = { # At the governorship level, modifies the amount of the present governorship's stockpile that's available for trade
	# Scope = governorship
	# Range 0 - 1
	value = 1
	# Modified by local ordnances
	max = 1 # You can never sell more than 100% of your stockpile!
}

### INFRASTRUCTURE LIMITS
# Infrastructure puts a hard cap on how much of any good a governorship can export/import
# This is a number of units, not a modifier
# the _svalue is converted into a variable at the start of every quarter to avoid recalculation
# The resulting variable, from a TRADE scripted effect, is used as a <max> for SELL and PURCHASE declarations

TRADE_governorship_infrastructure_capacity_svalue = {
	value = TRADE_canal_bonus
	add = TRADE_railway_bonus
	add = TRADE_port_bonus
	add = TRADE_river_port_bonus
	add = TRADE_commerce_district_bonus
	add = TRADE_depot_bonus
}

# Bonuses from individual infrastructure buildings

TRADE_canal_bonus = {
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = num_of_INF_canal
		}
	}	
}

TRADE_commerce_district_bonus = {
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = num_of_URB_commerce_district
		}
	}
	multiply = 0.5	
}

TRADE_railway_bonus = {
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = num_of_INF_railway_upgrade
			# Also add if there's a road... if possible.
		}
	}
	multiply = 2	
}

TRADE_depot_bonus = {
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = num_of_INF_depot
		}
	}
}

TRADE_port_bonus = {
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = num_of_port_building
		}
	}
	multiply = 3	
}

TRADE_river_port_bonus = {
	value = 0
	every_governorship_state = {
		every_state_province = {
			add = num_of_river_port_building
		}
	}
	multiply = 3	
}

### EXPORT THRESHOLDS, do not sell any stock below this amount

TRADE_governorship_export_threshold_grain = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_fish = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_livestock = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_tropical_fruit = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_mediterranean_fruit = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_temperate_fruit = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_processed_foods = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_clothing = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_furniture = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_pharmaceuticals = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_coal = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_whales = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_alcohol = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_gems = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_opium = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_tobacco = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_chocolate = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_coffee = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_tea = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_spices = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_sugar = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_luxury_clothing = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_luxury_furniture = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_glass = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_motors = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_fur = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_industrial_fibres = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_textile_fibres = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_wool = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_silk = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_wood = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_stone = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_sulphur = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_peat = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_tin = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_inorganic_compounds = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_copper = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_iron = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_gold = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_silver = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_dye = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_lead = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_oil = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_hardwood = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_rubber = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_salt = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_electronics = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_construction_materials = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_steel = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_bronze = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_machine_parts = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_chemicals = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_naval_supplies = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_steel_ships = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_wooden_ships = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_petrochemicals = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_early_munitions = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_late_munitions = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_early_artillery = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}

TRADE_governorship_export_threshold_late_artillery = { # The lower limit before a governorship is allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 10
}


### EXPORT CAPS - the maximum amount a governorship can sell

TRADE_governorship_export_cap_grain = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_fish = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_livestock = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_tropical_fruit = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_mediterranean_fruit = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_temperate_fruit = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_processed_foods = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_clothing = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_furniture = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_pharmaceuticals = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_coal = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_whales = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_alcohol = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_gems = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_opium = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_tobacco = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_chocolate = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_coffee = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_tea = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_spices = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_sugar = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_luxury_clothing = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_luxury_furniture = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_glass = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_motors = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_fur = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_industrial_fibres = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_textile_fibres = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_wool = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_silk = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_wood = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_stone = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_sulphur = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_peat = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_tin = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_inorganic_compounds = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_copper = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_iron = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_gold = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_silver = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_dye = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_lead = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_oil = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_hardwood = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_rubber = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_salt = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_electronics = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_construction_materials = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_steel = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_bronze = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_machine_parts = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_chemicals = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_naval_supplies = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_steel_ships = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_wooden_ships = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_petrochemicals = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_early_munitions = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_late_munitions = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_early_artillery = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

TRADE_governorship_export_cap_late_artillery = { # The upper limit over which a governorship is NOT allowed to export any of this good. Should be derived from a variable
# FOR NOW, THIS IS JUST A TEST AND HAS NO VARIABLE FROM WHICH IT DERIVES
	value = 100
}

### INTERNAL EXPORT AMOUNTS

# Internal export will never offer more than the governorship can afford to sell without compromising its own demand, otherwise there would be a recursive loop of buying back what it oversold to other governorships.
# So this is basically the surplus
# If the country has the export focus, it will also subtract the amount for external export which has been reserved for international sale. This can (by design, to reflect exploitative colonial regimes) cause issues with a country not being able to properly supply itself internally as its goods are being reserved for external sale rather than being redistributed internally

TRADE_governorship_for_export_internal_grain = {
	# Scope: governorship
	value = GOODS_grain_stockpile
	subtract = DEMAND_grain
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_grain
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
	
}

TRADE_governorship_for_export_internal_fish = {
	# Scope: governorship
	value = GOODS_fish_stockpile
	subtract = DEMAND_fish
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_fish
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_livestock = {
	# Scope: governorship
	value = GOODS_livestock_stockpile
	subtract = DEMAND_livestock
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_livestock
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_tropical_fruit = {
	# Scope: governorship
	value = GOODS_tropical_fruit_stockpile
	subtract = DEMAND_tropical_fruit
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_tropical_fruit
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_mediterranean_fruit = {
	# Scope: governorship
	value = GOODS_mediterranean_fruit_stockpile
	subtract = DEMAND_mediterranean_fruit
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_mediterranean_fruit
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_temperate_fruit = {
	# Scope: governorship
	value = GOODS_temperate_fruit_stockpile
	subtract = DEMAND_temperate_fruit
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_temperate_fruit
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_processed_foods = {
	# Scope: governorship
	value = GOODS_processed_foods_stockpile
	subtract = DEMAND_processed_foods
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_processed_foods
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_clothing = {
	# Scope: governorship
	value = GOODS_clothing_stockpile
	subtract = DEMAND_clothing
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_clothing
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_furniture = {
	# Scope: governorship
	value = GOODS_furniture_stockpile
	subtract = DEMAND_furniture
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_furniture
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_pharmaceuticals = {
	# Scope: governorship
	value = GOODS_pharmaceuticals_stockpile
	subtract = DEMAND_pharmaceuticals
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_pharmaceuticals
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_coal = {
	# Scope: governorship
	value = GOODS_coal_stockpile
	subtract = DEMAND_coal
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_coal
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_whales = {
	# Scope: governorship
	value = GOODS_whales_stockpile
	subtract = DEMAND_whales
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_whales
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_alcohol = {
	# Scope: governorship
	value = GOODS_alcohol_stockpile
	subtract = DEMAND_alcohol
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_alcohol
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_gems = {
	# Scope: governorship
	value = GOODS_gems_stockpile
	subtract = DEMAND_gems
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_gems
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_opium = {
	# Scope: governorship
	value = GOODS_opium_stockpile
	subtract = DEMAND_opium
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_opium
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_tobacco = {
	# Scope: governorship
	value = GOODS_tobacco_stockpile
	subtract = DEMAND_tobacco
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_tobacco
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_chocolate = {
	# Scope: governorship
	value = GOODS_chocolate_stockpile
	subtract = DEMAND_chocolate
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_chocolate
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_coffee = {
	# Scope: governorship
	value = GOODS_coffee_stockpile
	subtract = DEMAND_coffee
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_coffee
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_tea = {
	# Scope: governorship
	value = GOODS_tea_stockpile
	subtract = DEMAND_tea
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_tea
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_spices = {
	# Scope: governorship
	value = GOODS_spices_stockpile
	subtract = DEMAND_spices
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_spices
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_sugar = {
	# Scope: governorship
	value = GOODS_sugar_stockpile
	subtract = DEMAND_sugar
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_sugar
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_luxury_clothing = {
	# Scope: governorship
	value = GOODS_luxury_clothing_stockpile
	subtract = DEMAND_luxury_clothing
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_luxury_clothing
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_luxury_furniture = {
	# Scope: governorship
	value = GOODS_luxury_furniture_stockpile
	subtract = DEMAND_luxury_furniture
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_luxury_furniture
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_glass = {
	# Scope: governorship
	value = GOODS_glass_stockpile
	subtract = DEMAND_glass
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_glass
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_motors = {
	# Scope: governorship
	value = GOODS_motors_stockpile
	subtract = DEMAND_motors
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_motors
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_fur = {
	# Scope: governorship
	value = GOODS_fur_stockpile
	subtract = DEMAND_fur
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_fur
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_industrial_fibres = {
	# Scope: governorship
	value = GOODS_industrial_fibres_stockpile
	subtract = DEMAND_industrial_fibres
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_industrial_fibres
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_textile_fibres = {
	# Scope: governorship
	value = GOODS_textile_fibres_stockpile
	subtract = DEMAND_textile_fibres
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_textile_fibres
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_wool = {
	# Scope: governorship
	value = GOODS_wool_stockpile
	subtract = DEMAND_wool
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_wool
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_silk = {
	# Scope: governorship
	value = GOODS_silk_stockpile
	subtract = DEMAND_silk
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_silk
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_wood = {
	# Scope: governorship
	value = GOODS_wood_stockpile
	subtract = DEMAND_wood
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_wood
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_stone = {
	# Scope: governorship
	value = GOODS_stone_stockpile
	subtract = DEMAND_stone
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_stone
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_sulphur = {
	# Scope: governorship
	value = GOODS_sulphur_stockpile
	subtract = DEMAND_sulphur
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_sulphur
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_peat = {
	# Scope: governorship
	value = GOODS_peat_stockpile
	subtract = DEMAND_peat
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_peat
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_tin = {
	# Scope: governorship
	value = GOODS_tin_stockpile
	subtract = DEMAND_tin
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_tin
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_inorganic_compounds = {
	# Scope: governorship
	value = GOODS_inorganic_compounds_stockpile
	subtract = DEMAND_inorganic_compounds
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_inorganic_compounds
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_copper = {
	# Scope: governorship
	value = GOODS_copper_stockpile
	subtract = DEMAND_copper
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_copper
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_iron = {
	# Scope: governorship
	value = GOODS_iron_stockpile
	subtract = DEMAND_iron
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_iron
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_gold = {
	# Scope: governorship
	value = GOODS_gold_stockpile
	subtract = DEMAND_gold
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_gold
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_silver = {
	# Scope: governorship
	value = GOODS_silver_stockpile
	subtract = DEMAND_silver
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_silver
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_dye = {
	# Scope: governorship
	value = GOODS_dye_stockpile
	subtract = DEMAND_dye
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_dye
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_lead = {
	# Scope: governorship
	value = GOODS_lead_stockpile
	subtract = DEMAND_lead
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_lead
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_oil = {
	# Scope: governorship
	value = GOODS_oil_stockpile
	subtract = DEMAND_oil
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_oil
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_hardwood = {
	# Scope: governorship
	value = GOODS_hardwood_stockpile
	subtract = DEMAND_hardwood
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_hardwood
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_rubber = {
	# Scope: governorship
	value = GOODS_rubber_stockpile
	subtract = DEMAND_rubber
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_rubber
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_salt = {
	# Scope: governorship
	value = GOODS_salt_stockpile
	subtract = DEMAND_salt
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_salt
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_electronics = {
	# Scope: governorship
	value = GOODS_electronics_stockpile
	subtract = DEMAND_electronics
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_electronics
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_construction_materials = {
	# Scope: governorship
	value = GOODS_construction_materials_stockpile
	subtract = DEMAND_construction_materials
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_construction_materials
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_steel = {
	# Scope: governorship
	value = GOODS_steel_stockpile
	subtract = DEMAND_steel
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_steel
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_bronze = {
	# Scope: governorship
	value = GOODS_bronze_stockpile
	subtract = DEMAND_bronze
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_bronze
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_machine_parts = {
	# Scope: governorship
	value = GOODS_machine_parts_stockpile
	subtract = DEMAND_machine_parts
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_machine_parts
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_chemicals = {
	# Scope: governorship
	value = GOODS_chemicals_stockpile
	subtract = DEMAND_chemicals
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_chemicals
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_naval_supplies = {
	# Scope: governorship
	value = GOODS_naval_supplies_stockpile
	subtract = DEMAND_naval_supplies
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_naval_supplies
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_steel_ships = {
	# Scope: governorship
	value = GOODS_steel_ships_stockpile
	subtract = DEMAND_steel_ships
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_steel_ships
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_wooden_ships = {
	# Scope: governorship
	value = GOODS_wooden_ships_stockpile
	subtract = DEMAND_wooden_ships
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_wooden_ships
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_petrochemicals = {
	# Scope: governorship
	value = GOODS_petrochemicals_stockpile
	subtract = DEMAND_petrochemicals
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_petrochemicals
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_early_munitions = {
	# Scope: governorship
	value = GOODS_early_munitions_stockpile
	subtract = DEMAND_early_munitions
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_early_munitions
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_late_munitions = {
	# Scope: governorship
	value = GOODS_late_munitions_stockpile
	subtract = DEMAND_late_munitions
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_late_munitions
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_early_artillery = {
	# Scope: governorship
	value = GOODS_early_artillery_stockpile
	subtract = DEMAND_early_artillery
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_early_artillery
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

TRADE_governorship_for_export_internal_late_artillery = {
	# Scope: governorship
	value = GOODS_late_artillery_stockpile
	subtract = DEMAND_late_artillery
	if = {
		limit = {
			capital_scope.owner = { has_variable = trade_export_focus } # Could be has_law if we make this a law, TBD
		}
		subtract = TRADE_governorship_for_export_late_artillery
	}
	min = 0
	if = {
		limit = {
			has_variable = governorship_trade_capacity
		}
		max = var:governorship_trade_capacity
	}
}

### ACTUAL AMOUNTS OFFERED FOR SALE

TRADE_governorship_for_export_grain = {
	value = TRADE_governorship_export_cap_grain # Sell up to cap
	max = var:grain_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_grain # Keep up to threshold
}

TRADE_governorship_for_export_fish = {
	value = TRADE_governorship_export_cap_fish # Sell up to cap
	max = var:fish_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_fish # Keep up to threshold
}

TRADE_governorship_for_export_livestock = {
	value = TRADE_governorship_export_cap_livestock # Sell up to cap
	max = var:livestock_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_livestock # Keep up to threshold
}

TRADE_governorship_for_export_tropical_fruit = {
	value = TRADE_governorship_export_cap_tropical_fruit # Sell up to cap
	max = var:tropical_fruit_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_tropical_fruit # Keep up to threshold
}

TRADE_governorship_for_export_mediterranean_fruit = {
	value = TRADE_governorship_export_cap_mediterranean_fruit # Sell up to cap
	max = var:mediterranean_fruit_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_mediterranean_fruit # Keep up to threshold
}

TRADE_governorship_for_export_temperate_fruit = {
	value = TRADE_governorship_export_cap_temperate_fruit # Sell up to cap
	max = var:temperate_fruit_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_temperate_fruit # Keep up to threshold
}

TRADE_governorship_for_export_processed_foods = {
	value = TRADE_governorship_export_cap_processed_foods # Sell up to cap
	max = var:processed_foods_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_processed_foods # Keep up to threshold
}

TRADE_governorship_for_export_clothing = {
	value = TRADE_governorship_export_cap_clothing # Sell up to cap
	max = var:clothing_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_clothing # Keep up to threshold
}

TRADE_governorship_for_export_furniture = {
	value = TRADE_governorship_export_cap_furniture # Sell up to cap
	max = var:furniture_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_furniture # Keep up to threshold
}

TRADE_governorship_for_export_pharmaceuticals = {
	value = TRADE_governorship_export_cap_pharmaceuticals # Sell up to cap
	max = var:pharmaceuticals_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_pharmaceuticals # Keep up to threshold
}

TRADE_governorship_for_export_coal = {
	value = TRADE_governorship_export_cap_coal # Sell up to cap
	max = var:coal_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_coal # Keep up to threshold
}

TRADE_governorship_for_export_whales = {
	value = TRADE_governorship_export_cap_whales # Sell up to cap
	max = var:whales_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_whales # Keep up to threshold
}

TRADE_governorship_for_export_alcohol = {
	value = TRADE_governorship_export_cap_alcohol # Sell up to cap
	max = var:alcohol_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_alcohol # Keep up to threshold
}

TRADE_governorship_for_export_gems = {
	value = TRADE_governorship_export_cap_gems # Sell up to cap
	max = var:gems_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_gems # Keep up to threshold
}

TRADE_governorship_for_export_opium = {
	value = TRADE_governorship_export_cap_opium # Sell up to cap
	max = var:opium_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_opium # Keep up to threshold
}

TRADE_governorship_for_export_tobacco = {
	value = TRADE_governorship_export_cap_tobacco # Sell up to cap
	max = var:tobacco_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_tobacco # Keep up to threshold
}

TRADE_governorship_for_export_chocolate = {
	value = TRADE_governorship_export_cap_chocolate # Sell up to cap
	max = var:chocolate_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_chocolate # Keep up to threshold
}

TRADE_governorship_for_export_coffee = {
	value = TRADE_governorship_export_cap_coffee # Sell up to cap
	max = var:coffee_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_coffee # Keep up to threshold
}

TRADE_governorship_for_export_tea = {
	value = TRADE_governorship_export_cap_tea # Sell up to cap
	max = var:tea_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_tea # Keep up to threshold
}

TRADE_governorship_for_export_spices = {
	value = TRADE_governorship_export_cap_spices # Sell up to cap
	max = var:spices_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_spices # Keep up to threshold
}

TRADE_governorship_for_export_sugar = {
	value = TRADE_governorship_export_cap_sugar # Sell up to cap
	max = var:sugar_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_sugar # Keep up to threshold
}

TRADE_governorship_for_export_luxury_clothing = {
	value = TRADE_governorship_export_cap_luxury_clothing # Sell up to cap
	max = var:luxury_clothing_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_luxury_clothing # Keep up to threshold
}

TRADE_governorship_for_export_luxury_furniture = {
	value = TRADE_governorship_export_cap_luxury_furniture # Sell up to cap
	max = var:luxury_furniture_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_luxury_furniture # Keep up to threshold
}

TRADE_governorship_for_export_glass = {
	value = TRADE_governorship_export_cap_glass # Sell up to cap
	max = var:glass_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_glass # Keep up to threshold
}

TRADE_governorship_for_export_motors = {
	value = TRADE_governorship_export_cap_motors # Sell up to cap
	max = var:motors_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_motors # Keep up to threshold
}

TRADE_governorship_for_export_fur = {
	value = TRADE_governorship_export_cap_fur # Sell up to cap
	max = var:fur_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_fur # Keep up to threshold
}

TRADE_governorship_for_export_industrial_fibres = {
	value = TRADE_governorship_export_cap_industrial_fibres # Sell up to cap
	max = var:industrial_fibres_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_industrial_fibres # Keep up to threshold
}

TRADE_governorship_for_export_textile_fibres = {
	value = TRADE_governorship_export_cap_textile_fibres # Sell up to cap
	max = var:textile_fibres_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_textile_fibres # Keep up to threshold
}

TRADE_governorship_for_export_wool = {
	value = TRADE_governorship_export_cap_wool # Sell up to cap
	max = var:wool_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_wool # Keep up to threshold
}

TRADE_governorship_for_export_silk = {
	value = TRADE_governorship_export_cap_silk # Sell up to cap
	max = var:silk_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_silk # Keep up to threshold
}

TRADE_governorship_for_export_wood = {
	value = TRADE_governorship_export_cap_wood # Sell up to cap
	max = var:wood_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_wood # Keep up to threshold
}

TRADE_governorship_for_export_stone = {
	value = TRADE_governorship_export_cap_stone # Sell up to cap
	max = var:stone_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_stone # Keep up to threshold
}

TRADE_governorship_for_export_sulphur = {
	value = TRADE_governorship_export_cap_sulphur # Sell up to cap
	max = var:sulphur_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_sulphur # Keep up to threshold
}

TRADE_governorship_for_export_peat = {
	value = TRADE_governorship_export_cap_peat # Sell up to cap
	max = var:peat_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_peat # Keep up to threshold
}

TRADE_governorship_for_export_tin = {
	value = TRADE_governorship_export_cap_tin # Sell up to cap
	max = var:tin_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_tin # Keep up to threshold
}

TRADE_governorship_for_export_inorganic_compounds = {
	value = TRADE_governorship_export_cap_inorganic_compounds # Sell up to cap
	max = var:inorganic_compounds_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_inorganic_compounds # Keep up to threshold
}

TRADE_governorship_for_export_copper = {
	value = TRADE_governorship_export_cap_copper # Sell up to cap
	max = var:copper_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_copper # Keep up to threshold
}

TRADE_governorship_for_export_iron = {
	value = TRADE_governorship_export_cap_iron # Sell up to cap
	max = var:iron_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_iron # Keep up to threshold
}

TRADE_governorship_for_export_gold = {
	value = TRADE_governorship_export_cap_gold # Sell up to cap
	max = var:gold_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_gold # Keep up to threshold
}

TRADE_governorship_for_export_silver = {
	value = TRADE_governorship_export_cap_silver # Sell up to cap
	max = var:silver_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_silver # Keep up to threshold
}

TRADE_governorship_for_export_dye = {
	value = TRADE_governorship_export_cap_dye # Sell up to cap
	max = var:dye_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_dye # Keep up to threshold
}

TRADE_governorship_for_export_lead = {
	value = TRADE_governorship_export_cap_lead # Sell up to cap
	max = var:lead_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_lead # Keep up to threshold
}

TRADE_governorship_for_export_oil = {
	value = TRADE_governorship_export_cap_oil # Sell up to cap
	max = var:oil_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_oil # Keep up to threshold
}

TRADE_governorship_for_export_hardwood = {
	value = TRADE_governorship_export_cap_hardwood # Sell up to cap
	max = var:hardwood_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_hardwood # Keep up to threshold
}

TRADE_governorship_for_export_rubber = {
	value = TRADE_governorship_export_cap_rubber # Sell up to cap
	max = var:rubber_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_rubber # Keep up to threshold
}

TRADE_governorship_for_export_salt = {
	value = TRADE_governorship_export_cap_salt # Sell up to cap
	max = var:salt_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_salt # Keep up to threshold
}

TRADE_governorship_for_export_electronics = {
	value = TRADE_governorship_export_cap_electronics # Sell up to cap
	max = var:electronics_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_electronics # Keep up to threshold
}

TRADE_governorship_for_export_construction_materials = {
	value = TRADE_governorship_export_cap_construction_materials # Sell up to cap
	max = var:construction_materials_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_construction_materials # Keep up to threshold
}

TRADE_governorship_for_export_steel = {
	value = TRADE_governorship_export_cap_steel # Sell up to cap
	max = var:steel_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_steel # Keep up to threshold
}

TRADE_governorship_for_export_bronze = {
	value = TRADE_governorship_export_cap_bronze # Sell up to cap
	max = var:bronze_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_bronze # Keep up to threshold
}

TRADE_governorship_for_export_machine_parts = {
	value = TRADE_governorship_export_cap_machine_parts # Sell up to cap
	max = var:machine_parts_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_machine_parts # Keep up to threshold
}

TRADE_governorship_for_export_chemicals = {
	value = TRADE_governorship_export_cap_chemicals # Sell up to cap
	max = var:chemicals_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_chemicals # Keep up to threshold
}

TRADE_governorship_for_export_naval_supplies = {
	value = TRADE_governorship_export_cap_naval_supplies # Sell up to cap
	max = var:naval_supplies_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_naval_supplies # Keep up to threshold
}

TRADE_governorship_for_export_steel_ships = {
	value = TRADE_governorship_export_cap_steel_ships # Sell up to cap
	max = var:steel_ships_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_steel_ships # Keep up to threshold
}

TRADE_governorship_for_export_wooden_ships = {
	value = TRADE_governorship_export_cap_wooden_ships # Sell up to cap
	max = var:wooden_ships_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_wooden_ships # Keep up to threshold
}

TRADE_governorship_for_export_petrochemicals = {
	value = TRADE_governorship_export_cap_petrochemicals # Sell up to cap
	max = var:petrochemicals_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_petrochemicals # Keep up to threshold
}

TRADE_governorship_for_export_early_munitions = {
	value = TRADE_governorship_export_cap_early_munitions # Sell up to cap
	max = var:early_munitions_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_early_munitions # Keep up to threshold
}

TRADE_governorship_for_export_late_munitions = {
	value = TRADE_governorship_export_cap_late_munitions # Sell up to cap
	max = var:late_munitions_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_late_munitions # Keep up to threshold
}

TRADE_governorship_for_export_early_artillery = {
	value = TRADE_governorship_export_cap_early_artillery # Sell up to cap
	max = var:early_artillery_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_early_artillery # Keep up to threshold
}

TRADE_governorship_for_export_late_artillery = {
	value = TRADE_governorship_export_cap_late_artillery # Sell up to cap
	max = var:late_artillery_stockpile # Do not sell more than you have
	multiply = TRADE_country_export_stock_modifier
	multiply = TRADE_governorship_export_stock_modifier
	subtract = TRADE_governorship_export_threshold_late_artillery # Keep up to threshold
}

#### GLOBAL PRICE SVALUES

TRADE_global_price_grain = {
	value = global_var:global_price_grain
}

### For use in tradezone local price calculations


#### Global total amount available to buy

TRADE_global_offered_grain = {
	value = 1 # To avoid dividing by 0
	every_in_list = {
		variable = list_of_trade_centers
		add = var:TZ_stockpile_grain
	}
}

#### Shares of supply

TRADE_share_of_global_grain_supply = {
	# Scope: Trade center province
	# Gets percentage in this TZ of global supply
	# Worth thinking about:
	# The global supply is amount produced...
	value = var:TZ_stockpile_grain
	divide = TRADE_global_offered_grain
}

### Shares of spends
#### Purpose: get the weighting for each spend that that each spender group should have
#### Used in TRADE_set_cost_shares scripted effect

# essential_goods

TRADE_share_of_spend_essential_goods_upper_strata = {
	value = 100
	multiply = governorship_upper_strata
}
TRADE_share_of_spend_essential_goods_middle_strata = {
	value = 100
	multiply = governorship_middle_strata
}
TRADE_share_of_spend_essential_goods_lower_strata = {
	value = 100
	multiply = governorship_lower_strata
}
TRADE_share_of_spend_essential_goods_proletariat = {
	value = 100
	multiply = governorship_proletariat
}
TRADE_share_of_spend_essential_goods_indentured = {
	value = 50 # Partially paid for by landowners
	multiply = governorship_indentured
}
TRADE_share_of_spend_essential_goods_tribesmen = {
	value = 100
	multiply = governorship_tribesmen
}
TRADE_share_of_spend_essential_goods_slaves = {
	value = 0 # Entirely paid for by landowners
	multiply = governorship_slaves
}
TRADE_share_of_spend_essential_goods_the_state = {
	value = 0 # Consider subsidies as a value
	multiply = governorship_population
}

# luxury_goods

TRADE_share_of_spend_luxury_goods_upper_strata = {
	value = 100
	multiply = governorship_upper_strata
}
TRADE_share_of_spend_luxury_goods_middle_strata = {
	value = 60
	multiply = governorship_middle_strata
}
TRADE_share_of_spend_luxury_goods_lower_strata = {
	value = 10
	multiply = governorship_lower_strata
}
TRADE_share_of_spend_luxury_goods_proletariat = {
	value = 10
	multiply = governorship_proletariat
}
TRADE_share_of_spend_luxury_goods_indentured = {
	value = 0
	multiply = governorship_indentured
}
TRADE_share_of_spend_luxury_goods_tribesmen = {
	value = 10
	multiply = governorship_tribesmen
}
TRADE_share_of_spend_luxury_goods_slaves = {
	value = 0
	multiply = governorship_slaves
}
TRADE_share_of_spend_luxury_goods_the_state = {
	value = 0 # Consider subsidies as a value
	multiply = governorship_population
}

# BUSINESS GOODS
# This should have some conditions about who owns businesses based on laws. For testing purposes, the values are static

TRADE_share_of_spend_business_goods_upper_strata = {
	value = 100
	multiply = governorship_upper_strata
}
TRADE_share_of_spend_business_goods_middle_strata = {
	value = 60
	multiply = governorship_middle_strata
}
TRADE_share_of_spend_business_goods_lower_strata = {
	value = 20
	multiply = governorship_lower_strata
}
TRADE_share_of_spend_business_goods_proletariat = {
	value = 10
	multiply = governorship_proletariat
}
TRADE_share_of_spend_business_goods_indentured = {
	value = 0
	multiply = governorship_indentured
}
TRADE_share_of_spend_business_goods_tribesmen = {
	value = 0
	multiply = governorship_tribesmen
}
TRADE_share_of_spend_business_goods_slaves = {
	value = 0
	multiply = governorship_slaves
}
TRADE_share_of_spend_business_goods_the_state = {
	value = 0 # Consider subsidies as a value
	multiply = governorship_population
}

# MILITARY
# This should have some conditions about who shoulders the cost for military. For testing purposes, the values are static/

TRADE_share_of_spend_military_upper_strata = {
	value = 0 # Consider feudalism as a way to add to this, or private military suppliers
	multiply = governorship_upper_strata
}
TRADE_share_of_spend_military_middle_strata = {
	value = 0 # Consider self-armed militia as a way to add to this
	multiply = governorship_middle_strata
}
TRADE_share_of_spend_military_lower_strata = {
	value = 0 # Consider self-armed militia as a way to add to this
	multiply = governorship_lower_strata
}
TRADE_share_of_spend_military_proletariat = {
	value = 0 # Consider self-armed militia as a way to add to this
	multiply = governorship_proletariat
}
TRADE_share_of_spend_military_indentured = {
	value = 0
	multiply = governorship_indentured
}
TRADE_share_of_spend_military_tribesmen = {
	value = 0 # Consider self-armed militia as a way to add to this
	multiply = governorship_tribesmen
}
TRADE_share_of_spend_military_slaves = {
	value = 0
	multiply = governorship_slaves
}
TRADE_share_of_spend_military_the_state = {
	value = 100
	multiply = governorship_population
}

## SPENDER SHARES AS PERCENTAGES
# Spender shares need to be turned from weights into percentages

TRADE_sum_of_essential_goods_spend_weights = {
	value = TRADE_share_of_spend_essential_goods_upper_strata
	add = TRADE_share_of_spend_essential_goods_middle_strata
	add = TRADE_share_of_spend_essential_goods_lower_strata
	add = TRADE_share_of_spend_essential_goods_proletariat
	add = TRADE_share_of_spend_essential_goods_tribesmen
	add = TRADE_share_of_spend_essential_goods_indentured
	add = TRADE_share_of_spend_essential_goods_slaves
	add = TRADE_share_of_spend_essential_goods_the_state
}

TRADE_sum_of_luxury_goods_spend_weights = {
	value = TRADE_share_of_spend_luxury_goods_upper_strata
	add = TRADE_share_of_spend_luxury_goods_middle_strata
	add = TRADE_share_of_spend_luxury_goods_lower_strata
	add = TRADE_share_of_spend_luxury_goods_proletariat
	add = TRADE_share_of_spend_luxury_goods_tribesmen
	add = TRADE_share_of_spend_luxury_goods_indentured
	add = TRADE_share_of_spend_luxury_goods_slaves
	add = TRADE_share_of_spend_luxury_goods_the_state
}

TRADE_sum_of_business_goods_spend_weights = {
	value = TRADE_share_of_spend_business_goods_upper_strata
	add = TRADE_share_of_spend_business_goods_middle_strata
	add = TRADE_share_of_spend_business_goods_lower_strata
	add = TRADE_share_of_spend_business_goods_proletariat
	add = TRADE_share_of_spend_business_goods_tribesmen
	add = TRADE_share_of_spend_business_goods_indentured
	add = TRADE_share_of_spend_business_goods_slaves
	add = TRADE_share_of_spend_business_goods_the_state
}

TRADE_sum_of_military_goods_spend_weights = {
	value = TRADE_share_of_spend_military_upper_strata
	add = TRADE_share_of_spend_military_middle_strata
	add = TRADE_share_of_spend_military_lower_strata
	add = TRADE_share_of_spend_military_proletariat
	add = TRADE_share_of_spend_military_tribesmen
	add = TRADE_share_of_spend_military_indentured
	add = TRADE_share_of_spend_military_slaves
	add = TRADE_share_of_spend_military_the_state
}

#####

TRADE_sum_of_military_goods_income_weights = {
	value = TRADE_share_of_income_military_goods_upper_strata
	add = TRADE_share_of_income_military_goods_middle_strata
	add = TRADE_share_of_income_military_goods_lower_strata
	add = TRADE_share_of_income_military_goods_proletariat
	add = TRADE_share_of_income_military_goods_tribesmen
	add = TRADE_share_of_income_military_goods_indentured
	add = TRADE_share_of_income_military_goods_slaves
	add = TRADE_share_of_income_military_goods_the_state
}

TRADE_sum_of_essential_goods_income_weights = {
	value = TRADE_share_of_income_essential_goods_upper_strata
	add = TRADE_share_of_income_essential_goods_middle_strata
	add = TRADE_share_of_income_essential_goods_lower_strata
	add = TRADE_share_of_income_essential_goods_proletariat
	add = TRADE_share_of_income_essential_goods_tribesmen
	add = TRADE_share_of_income_essential_goods_indentured
	add = TRADE_share_of_income_essential_goods_slaves
	add = TRADE_share_of_income_essential_goods_the_state
}

TRADE_sum_of_luxury_goods_income_weights = {
	value = TRADE_share_of_income_luxury_goods_upper_strata
	add = TRADE_share_of_income_luxury_goods_middle_strata
	add = TRADE_share_of_income_luxury_goods_lower_strata
	add = TRADE_share_of_income_luxury_goods_proletariat
	add = TRADE_share_of_income_luxury_goods_tribesmen
	add = TRADE_share_of_income_luxury_goods_indentured
	add = TRADE_share_of_income_luxury_goods_slaves
	add = TRADE_share_of_income_luxury_goods_the_state
}

TRADE_sum_of_business_goods_income_weights = {
	value = TRADE_share_of_income_business_goods_upper_strata
	add = TRADE_share_of_income_business_goods_middle_strata
	add = TRADE_share_of_income_business_goods_lower_strata
	add = TRADE_share_of_income_business_goods_proletariat
	add = TRADE_share_of_income_business_goods_tribesmen
	add = TRADE_share_of_income_business_goods_indentured
	add = TRADE_share_of_income_business_goods_slaves
	add = TRADE_share_of_income_business_goods_the_state
}

TRADE_spender_share_percentage_essential_goods_upper_strata = {
	value = TRADE_share_of_spend_essential_goods_upper_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_spend_weights > 0
							TRADE_share_of_spend_essential_goods_upper_strata > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_spender_share_percentage_essential_goods_middle_strata = {
	value = TRADE_share_of_spend_essential_goods_middle_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_spend_weights > 0
							TRADE_share_of_spend_essential_goods_middle_strata > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_spender_share_percentage_essential_goods_lower_strata = {
	value = TRADE_share_of_spend_essential_goods_lower_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_spend_weights > 0
							TRADE_share_of_spend_essential_goods_lower_strata > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_spender_share_percentage_essential_goods_proletariat = {
	value = TRADE_share_of_spend_essential_goods_proletariat
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_spend_weights > 0
							TRADE_share_of_spend_essential_goods_proletariat > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_spender_share_percentage_essential_goods_tribesmen = {
	value = TRADE_share_of_spend_essential_goods_tribesmen
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_spend_weights > 0
							TRADE_share_of_spend_essential_goods_tribesmen > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_spender_share_percentage_essential_goods_indentured = {
	value = TRADE_share_of_spend_essential_goods_indentured
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_spend_weights > 0
							TRADE_share_of_spend_essential_goods_indentured > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_spender_share_percentage_essential_goods_slaves = {
	value = TRADE_share_of_spend_essential_goods_slaves
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_spend_weights > 0
							TRADE_share_of_spend_essential_goods_slaves > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_spender_share_percentage_essential_goods_the_state = {
	value = TRADE_share_of_spend_essential_goods_the_state
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_spend_weights > 0
							TRADE_share_of_spend_essential_goods_the_state > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_spender_share_percentage_luxury_goods_upper_strata = {
	value = TRADE_share_of_spend_luxury_goods_upper_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_spend_weights > 0
							TRADE_share_of_spend_luxury_goods_upper_strata > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_spender_share_percentage_luxury_goods_middle_strata = {
	value = TRADE_share_of_spend_luxury_goods_middle_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_spend_weights > 0
							TRADE_share_of_spend_luxury_goods_middle_strata > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_spender_share_percentage_luxury_goods_lower_strata = {
	value = TRADE_share_of_spend_luxury_goods_lower_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_spend_weights > 0
							TRADE_share_of_spend_luxury_goods_lower_strata > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_spender_share_percentage_luxury_goods_proletariat = {
	value = TRADE_share_of_spend_luxury_goods_proletariat
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_spend_weights > 0
							TRADE_share_of_spend_luxury_goods_proletariat > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_spender_share_percentage_luxury_goods_tribesmen = {
	value = TRADE_share_of_spend_luxury_goods_tribesmen
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_spend_weights > 0
							TRADE_share_of_spend_luxury_goods_tribesmen > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_spender_share_percentage_luxury_goods_indentured = {
	value = TRADE_share_of_spend_luxury_goods_indentured
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_spend_weights > 0
							TRADE_share_of_spend_luxury_goods_indentured > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_spender_share_percentage_luxury_goods_slaves = {
	value = TRADE_share_of_spend_luxury_goods_slaves
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_spend_weights > 0
							TRADE_share_of_spend_luxury_goods_slaves > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_spender_share_percentage_luxury_goods_the_state = {
	value = TRADE_share_of_spend_luxury_goods_the_state
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_spend_weights > 0
							TRADE_share_of_spend_luxury_goods_the_state > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_spender_share_percentage_business_goods_upper_strata = {
	value = TRADE_share_of_spend_business_goods_upper_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_spend_weights > 0
							TRADE_share_of_spend_business_goods_upper_strata > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_spender_share_percentage_business_goods_middle_strata = {
	value = TRADE_share_of_spend_business_goods_middle_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_spend_weights > 0
							TRADE_share_of_spend_business_goods_middle_strata > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_spender_share_percentage_business_goods_lower_strata = {
	value = TRADE_share_of_spend_business_goods_lower_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_spend_weights > 0
							TRADE_share_of_spend_business_goods_lower_strata > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_spender_share_percentage_business_goods_proletariat = {
	value = TRADE_share_of_spend_business_goods_proletariat
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_spend_weights > 0
							TRADE_share_of_spend_business_goods_proletariat > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_spender_share_percentage_business_goods_tribesmen = {
	value = TRADE_share_of_spend_business_goods_tribesmen
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_spend_weights > 0
							TRADE_share_of_spend_business_goods_tribesmen > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_spender_share_percentage_business_goods_indentured = {
	value = TRADE_share_of_spend_business_goods_indentured
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_spend_weights > 0
							TRADE_share_of_spend_business_goods_indentured > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_spender_share_percentage_business_goods_slaves = {
	value = TRADE_share_of_spend_business_goods_slaves
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_spend_weights > 0
							TRADE_share_of_spend_business_goods_slaves > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_spender_share_percentage_business_goods_the_state = {
	value = TRADE_share_of_spend_business_goods_the_state
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_spend_weights > 0
							TRADE_share_of_spend_business_goods_the_state > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_spender_share_percentage_military_goods_upper_strata = {
	value = TRADE_share_of_spend_military_goods_upper_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_spend_weights > 0
							TRADE_share_of_spend_military_goods_upper_strata > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_spender_share_percentage_military_goods_middle_strata = {
	value = TRADE_share_of_spend_military_goods_middle_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_spend_weights > 0
							TRADE_share_of_spend_military_goods_middle_strata > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_spender_share_percentage_military_goods_lower_strata = {
	value = TRADE_share_of_spend_military_goods_lower_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_spend_weights > 0
							TRADE_share_of_spend_military_goods_lower_strata > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_spender_share_percentage_military_goods_proletariat = {
	value = TRADE_share_of_spend_military_goods_proletariat
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_spend_weights > 0
							TRADE_share_of_spend_military_goods_proletariat > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_spender_share_percentage_military_goods_tribesmen = {
	value = TRADE_share_of_spend_military_goods_tribesmen
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_spend_weights > 0
							TRADE_share_of_spend_military_goods_tribesmen > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_spender_share_percentage_military_goods_indentured = {
	value = TRADE_share_of_spend_military_goods_indentured
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_spend_weights > 0
							TRADE_share_of_spend_military_goods_indentured > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_spender_share_percentage_military_goods_slaves = {
	value = TRADE_share_of_spend_military_goods_slaves
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_spend_weights > 0
							TRADE_share_of_spend_military_goods_slaves > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_spender_share_percentage_military_goods_the_state = {
	value = TRADE_share_of_spend_military_goods_the_state
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_spend_weights > 0
							TRADE_share_of_spend_military_goods_the_state > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

### income SHARES
# income shares are like spend shares and are broken down by category

# Scope is governorship for all

# essential_goods

TRADE_share_of_income_essential_goods_upper_strata = {
	value = 100
	multiply = governorship_upper_strata
}
TRADE_share_of_income_essential_goods_middle_strata = {
	value = 50
	multiply = governorship_middle_strata
}
TRADE_share_of_income_essential_goods_lower_strata = {
	value = 25
	multiply = governorship_lower_strata
}
TRADE_share_of_income_essential_goods_proletariat = {
	value = 0
	multiply = governorship_proletariat
}
TRADE_share_of_income_essential_goods_indentured = {
	value = 0 # Partially paid for by landowners
	multiply = governorship_indentured
}
TRADE_share_of_income_essential_goods_tribesmen = {
	value = 5
	multiply = governorship_tribesmen
}
TRADE_share_of_income_essential_goods_slaves = {
	value = 0 # Entirely paid for by landowners
	multiply = governorship_slaves
}
TRADE_share_of_income_essential_goods_the_state = {
	value = 0 # Consider subsidies as a value
	multiply = governorship_population
}

# luxury_goods

TRADE_share_of_income_luxury_goods_upper_strata = {
	value = 100
	multiply = governorship_upper_strata
}
TRADE_share_of_income_luxury_goods_middle_strata = {
	value = 50
	multiply = governorship_middle_strata
}
TRADE_share_of_income_luxury_goods_lower_strata = {
	value = 5
	multiply = governorship_lower_strata
}
TRADE_share_of_income_luxury_goods_proletariat = {
	value = 0
	multiply = governorship_proletariat
}
TRADE_share_of_income_luxury_goods_indentured = {
	value = 0
	multiply = governorship_indentured
}
TRADE_share_of_income_luxury_goods_tribesmen = {
	value = 10
	multiply = governorship_tribesmen
}
TRADE_share_of_income_luxury_goods_slaves = {
	value = 0
	multiply = governorship_slaves
}
TRADE_share_of_income_luxury_goods_the_state = {
	value = 0 # Consider subsidies as a value
	multiply = governorship_population
}

# BUSINESS GOODS
# This should have some conditions about who owns businesses based on laws. For testing purposes, the values are static

TRADE_share_of_income_business_goods_upper_strata = {
	value = 100
	multiply = governorship_upper_strata
}
TRADE_share_of_income_business_goods_middle_strata = {
	value = 60
	multiply = governorship_middle_strata
}
TRADE_share_of_income_business_goods_lower_strata = {
	value = 5
	multiply = governorship_lower_strata
}
TRADE_share_of_income_business_goods_proletariat = {
	value = 0
	multiply = governorship_proletariat
}
TRADE_share_of_income_business_goods_indentured = {
	value = 0
	multiply = governorship_indentured
}
TRADE_share_of_income_business_goods_tribesmen = {
	value = 0
	multiply = governorship_tribesmen
}
TRADE_share_of_income_business_goods_slaves = {
	value = 0
	multiply = governorship_slaves
}
TRADE_share_of_income_business_goods_the_state = {
	value = 0 # Consider subsidies as a value
	multiply = governorship_population
}

# MILITARY
# This should have some conditions about who shoulders the cost for military. For testing purposes, the values are static/

TRADE_share_of_income_military_goods_upper_strata = {
	value = 100 # Consider feudalism as a way to add to this, or private military suppliers
	multiply = governorship_upper_strata
}
TRADE_share_of_income_military_goods_middle_strata = {
	value = 0 # Consider self-armed militia as a way to add to this
	multiply = governorship_middle_strata
}
TRADE_share_of_income_military_goods_lower_strata = {
	value = 0 # Consider self-armed militia as a way to add to this
	multiply = governorship_lower_strata
}
TRADE_share_of_income_military_goods_proletariat = {
	value = 0 # Consider self-armed militia as a way to add to this
	multiply = governorship_proletariat
}
TRADE_share_of_income_military_goods_indentured = {
	value = 0
	multiply = governorship_indentured
}
TRADE_share_of_income_military_goods_tribesmen = {
	value = 0 # Consider self-armed militia as a way to add to this
	multiply = governorship_tribesmen
}
TRADE_share_of_income_military_goods_slaves = {
	value = 0
	multiply = governorship_slaves
}
TRADE_share_of_income_military_goods_the_state = {
	value = 0
	multiply = governorship_population
}

## income SHARES AS PERCENTAGES
# income shares need to be turned from weights into percentages

TRADE_sum_of_essential_goods_income_weights = {
	value = TRADE_share_of_income_essential_goods_upper_strata
	add = TRADE_share_of_income_essential_goods_middle_strata
	add = TRADE_share_of_income_essential_goods_lower_strata
	add = TRADE_share_of_income_essential_goods_proletariat
	add = TRADE_share_of_income_essential_goods_tribesmen
	add = TRADE_share_of_income_essential_goods_indentured
	add = TRADE_share_of_income_essential_goods_slaves
	add = TRADE_share_of_income_essential_goods_the_state
}

TRADE_sum_of_luxury_goods_income_weights = {
	value = TRADE_share_of_income_luxury_goods_upper_strata
	add = TRADE_share_of_income_luxury_goods_middle_strata
	add = TRADE_share_of_income_luxury_goods_lower_strata
	add = TRADE_share_of_income_luxury_goods_proletariat
	add = TRADE_share_of_income_luxury_goods_tribesmen
	add = TRADE_share_of_income_luxury_goods_indentured
	add = TRADE_share_of_income_luxury_goods_slaves
	add = TRADE_share_of_income_luxury_goods_the_state
}

TRADE_sum_of_business_goods_income_weights = {
	value = TRADE_share_of_income_business_goods_upper_strata
	add = TRADE_share_of_income_business_goods_middle_strata
	add = TRADE_share_of_income_business_goods_lower_strata
	add = TRADE_share_of_income_business_goods_proletariat
	add = TRADE_share_of_income_business_goods_tribesmen
	add = TRADE_share_of_income_business_goods_indentured
	add = TRADE_share_of_income_business_goods_slaves
	add = TRADE_share_of_income_business_goods_the_state
}

TRADE_sum_of_military_income_weights = {
	value = TRADE_share_of_income_military_goods_upper_strata
	add = TRADE_share_of_income_military_goods_middle_strata
	add = TRADE_share_of_income_military_goods_lower_strata
	add = TRADE_share_of_income_military_goods_proletariat
	add = TRADE_share_of_income_military_goods_tribesmen
	add = TRADE_share_of_income_military_goods_indentured
	add = TRADE_share_of_income_military_goods_slaves
	add = TRADE_share_of_income_military_goods_the_state
}

TRADE_income_share_percentage_essential_goods_upper_strata = {
	value = TRADE_share_of_income_essential_goods_upper_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_income_weights > 0
							TRADE_share_of_income_essential_goods_upper_strata > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_income_share_percentage_essential_goods_middle_strata = {
	value = TRADE_share_of_income_essential_goods_middle_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_income_weights > 0
							TRADE_share_of_income_essential_goods_middle_strata > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_income_share_percentage_essential_goods_lower_strata = {
	value = TRADE_share_of_income_essential_goods_lower_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_income_weights > 0
							TRADE_share_of_income_essential_goods_lower_strata > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_income_share_percentage_essential_goods_proletariat = {
	value = TRADE_share_of_income_essential_goods_proletariat
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_income_weights > 0
							TRADE_share_of_income_essential_goods_proletariat > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_income_share_percentage_essential_goods_tribesmen = {
	value = TRADE_share_of_income_essential_goods_tribesmen
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_income_weights > 0
							TRADE_share_of_income_essential_goods_tribesmen > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_income_share_percentage_essential_goods_indentured = {
	value = TRADE_share_of_income_essential_goods_indentured
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_income_weights > 0
							TRADE_share_of_income_essential_goods_indentured > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_income_share_percentage_essential_goods_slaves = {
	value = TRADE_share_of_income_essential_goods_slaves
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_income_weights > 0
							TRADE_share_of_income_essential_goods_slaves > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_income_share_percentage_essential_goods_the_state = {
	value = TRADE_share_of_income_essential_goods_the_state
	if = {
				limit = {
						AND = {
							TRADE_sum_of_essential_goods_income_weights > 0
							TRADE_share_of_income_essential_goods_the_state > 0
						}
				}
				divide = TRADE_sum_of_essential_goods_income_weights
		}
}

TRADE_income_share_percentage_luxury_goods_upper_strata = {
	value = TRADE_share_of_income_luxury_goods_upper_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_income_weights > 0
							TRADE_share_of_income_luxury_goods_upper_strata > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_income_share_percentage_luxury_goods_middle_strata = {
	value = TRADE_share_of_income_luxury_goods_middle_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_income_weights > 0
							TRADE_share_of_income_luxury_goods_middle_strata > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_income_share_percentage_luxury_goods_lower_strata = {
	value = TRADE_share_of_income_luxury_goods_lower_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_income_weights > 0
							TRADE_share_of_income_luxury_goods_lower_strata > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_income_share_percentage_luxury_goods_proletariat = {
	value = TRADE_share_of_income_luxury_goods_proletariat
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_income_weights > 0
							TRADE_share_of_income_luxury_goods_proletariat > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_income_share_percentage_luxury_goods_tribesmen = {
	value = TRADE_share_of_income_luxury_goods_tribesmen
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_income_weights > 0
							TRADE_share_of_income_luxury_goods_tribesmen > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_income_share_percentage_luxury_goods_indentured = {
	value = TRADE_share_of_income_luxury_goods_indentured
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_income_weights > 0
							TRADE_share_of_income_luxury_goods_indentured > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_income_share_percentage_luxury_goods_slaves = {
	value = TRADE_share_of_income_luxury_goods_slaves
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_income_weights > 0
							TRADE_share_of_income_luxury_goods_slaves > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_income_share_percentage_luxury_goods_the_state = {
	value = TRADE_share_of_income_luxury_goods_the_state
	if = {
				limit = {
						AND = {
							TRADE_sum_of_luxury_goods_income_weights > 0
							TRADE_share_of_income_luxury_goods_the_state > 0
						}
				}
				divide = TRADE_sum_of_luxury_goods_income_weights
		}
}

TRADE_income_share_percentage_business_goods_upper_strata = {
	value = TRADE_share_of_income_business_goods_upper_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_income_weights > 0
							TRADE_share_of_income_business_goods_upper_strata > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_income_share_percentage_business_goods_middle_strata = {
	value = TRADE_share_of_income_business_goods_middle_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_income_weights > 0
							TRADE_share_of_income_business_goods_middle_strata > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_income_share_percentage_business_goods_lower_strata = {
	value = TRADE_share_of_income_business_goods_lower_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_income_weights > 0
							TRADE_share_of_income_business_goods_lower_strata > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_income_share_percentage_business_goods_proletariat = {
	value = TRADE_share_of_income_business_goods_proletariat
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_income_weights > 0
							TRADE_share_of_income_business_goods_proletariat > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_income_share_percentage_business_goods_tribesmen = {
	value = TRADE_share_of_income_business_goods_tribesmen
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_income_weights > 0
							TRADE_share_of_income_business_goods_tribesmen > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_income_share_percentage_business_goods_indentured = {
	value = TRADE_share_of_income_business_goods_indentured
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_income_weights > 0
							TRADE_share_of_income_business_goods_indentured > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_income_share_percentage_business_goods_slaves = {
	value = TRADE_share_of_income_business_goods_slaves
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_income_weights > 0
							TRADE_share_of_income_business_goods_slaves > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_income_share_percentage_business_goods_the_state = {
	value = TRADE_share_of_income_business_goods_the_state
	if = {
				limit = {
						AND = {
							TRADE_sum_of_business_goods_income_weights > 0
							TRADE_share_of_income_business_goods_the_state > 0
						}
				}
				divide = TRADE_sum_of_business_goods_income_weights
		}
}

TRADE_income_share_percentage_military_goods_upper_strata = {
	value = TRADE_share_of_income_military_goods_upper_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_income_weights > 0
							TRADE_share_of_income_military_goods_upper_strata > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_income_share_percentage_military_goods_middle_strata = {
	value = TRADE_share_of_income_military_goods_middle_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_income_weights > 0
							TRADE_share_of_income_military_goods_middle_strata > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_income_share_percentage_military_goods_lower_strata = {
	value = TRADE_share_of_income_military_goods_lower_strata
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_income_weights > 0
							TRADE_share_of_income_military_goods_lower_strata > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_income_share_percentage_military_goods_proletariat = {
	value = TRADE_share_of_income_military_goods_proletariat
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_income_weights > 0
							TRADE_share_of_income_military_goods_proletariat > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_income_share_percentage_military_goods_tribesmen = {
	value = TRADE_share_of_income_military_goods_tribesmen
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_income_weights > 0
							TRADE_share_of_income_military_goods_tribesmen > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_income_share_percentage_military_goods_indentured = {
	value = TRADE_share_of_income_military_goods_indentured
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_income_weights > 0
							TRADE_share_of_income_military_goods_indentured > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_income_share_percentage_military_goods_slaves = {
	value = TRADE_share_of_income_military_goods_slaves
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_income_weights > 0
							TRADE_share_of_income_military_goods_slaves > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}

TRADE_income_share_percentage_military_goods_the_state = {
	value = TRADE_share_of_income_military_goods_the_state
	if = {
				limit = {
						AND = {
							TRADE_sum_of_military_goods_income_weights > 0
							TRADE_share_of_income_military_goods_the_state > 0
						}
				}
				divide = TRADE_sum_of_military_goods_income_weights
		}
}