PURCHASE_generate_order_external = {
	# Scope: governorship
	# Function: check the name of the current tradezone and generate a purchaser order command with the appropriate tradezone
	if = {
		limit = {
			var:trade_center = {
				has_variable = is_india_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = india
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_east_north_america_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = east_north_america
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_west_north_america_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = west_north_america
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_caribbean_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = caribbean
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_west_south_america_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = west_south_america
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_east_south_america_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = east_south_america
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_south_east_asia_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = south_east_asia
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_indo_china_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = indo_china
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_yellow_sea_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = yellow_sea
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_southern_africa_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = southern_africa
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_west_africa_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = west_africa
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_east_africa_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = east_africa
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_middle_east_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = middle_east
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_western_steppe_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = western_steppe
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_eastern_steppe_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = eastern_steppe
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_upper_yangtzi_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = upper_yangtzi
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_atlantic_seaboard_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = atlantic_seaboard
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_central_europe_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = central_europe
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_west_mediterranean_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = west_mediterranean
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_baltic_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = baltic
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_east_europe_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = east_europe
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			var:trade_center = {
				has_variable = is_east_mediterranean_tradezone
			}
		}
		PURCHASE_order_external = {
			purchaser_TZ = east_mediterranean
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
}

PURCHASE_order_external = {
	# Scope: governorship
	# Function: Buy from any external trade partner's tradezone

	# Format of arguments:
	# $for_stockpile$ = grain_stockpile, the stockpile in the governorship scope
	# $from_stockpile$ = grain_stockpile_external, the stockpile from the external trade scope with the sum of all goods available for external trade
	# $order_size$ = local variable, local_var:l_order_size
	# $external_sold_total$ = external_sold_total_grain

	debug_log = "Making a purchase order for  $tradegood$"

	# save_scope_as = purchaser_governorship # Moved back to check shopping

	# Set a local variable to record the price of the previous tradezone
	# Higher score is worse in terms of trade preference
	set_local_variable = {
		name = previous_score
		value = 999999
	}

	owner = { # ATM, countries in customs unions can only make individual trade deals with external nations - there's no way for the customs union to govern that just now.
		every_in_list = {
			variable = list_of_tradezones_in_trade_partners

			debug_log = "Iterating through list of tradezones in trade partners"

			# Get the total score of this tradezone
			# The score is the cost of the goods order plus the cost of transport
			set_local_variable = {
				name = l_this_total_score
				value = $order_size$
			}
			change_local_variable = {
				name = l_this_total_score
				multiply = var:local_price_$tradegood$
			}
			if = { # Only account for transport costs if they exist - i.e. not polling the local tradezone
				limit = {
					scope:purchaser_governorship.var:trade_center = {
						has_variable = here_to_$purchaser_TZ$_tradezone
					}
				}
				change_local_variable = {
					name = l_this_total_score
					add = var:here_to_$purchaser_TZ$_tradezone
				}
			}

			set_local_variable = {
				name = l_this_total_score_diff_previous
				value = local_var:l_this_total_score
			}

			change_local_variable = {
				name = l_this_total_score_diff_previous
				subtract = local_var:previous_score
			}

			if = {
				limit = {
					local_var:l_this_total_score_diff_previous < 0
				}
				debug_log = "Attempting to save preferred tradezone scope"
				save_scope_as = preferred_tradezone
			}

			set_local_variable = {
				name = previous_score
				value = local_var:l_this_total_score
			}
		}
	}

	PURCHASE_contact_supplier = { # We'll need a way to split the reduction of stockpiles such across trade partner countries' governorships in the chosen tradezone..? Or maybe not, as each governorship still gets a variable containing its contribution cut
	# For example:
	# every_trade_partner = {
	#	limit = {
	#		has_variable = cut_of_trade_$tradezone$
	# 	}
	# }
		mode = 1 # External
		order_size = $order_size$
		tradegood = $tradegood$
		category = $category$
	}

}


###########################################

PURCHASE_transfer_if_able = {
	# Scope: governorship
	# Function: check if there is a sufficient stockpile in the supplier variable
	

	# Internal
	if = {
		limit = { mode = 0 }
		debug_log = "Internally contacting tradezone  $tradezone$ "
		if = {
			limit = {
				var:internal_trade_scope = {
					has_variable = $tradegood$_stockpile_$tradezone$_tradezone
				}
			}
			set_local_variable = {
				name = i_demand_diff
				value = $order_size$
			}
			var:internal_trade_scope = {
				change_local_variable = {
					name = i_demand_diff
					subtract = var:$tradegood$_stockpile_$tradezone$_tradezone
				}
			}

			if = { # Only transfer the goods if they from stockpile is actually bigger than the order size
				limit = {
					local_var:i_demand_diff < 0 # If the supplier can't meet demand, the purchaser should try again on its next preferred supplier
				}
				# Add to the purchasing governorship's stockpile
				PURCHASE_transfer_goods_internally = {
					tradegood = $tradegood$
					amount = $order_size$
					category = $category$
					tradezone = $tradezone$
				}
				owner = {
					change_variable = {
						name = country_internal_total_ordered_$tradegood$ # Saves the total amount ordered - Note: not the total amount successfully purchased
						add = $order_size$
					}
				}

			}
		}
		else = {
			debug_log = "Internal trade scope did not have  $tradegood$ stockpile in  $tradezone$"
		}
	}
	
	# External
	else_if = {
		limit = { mode = 1 }
		debug_log = "Externally contacting tradezone  $tradezone$ "
		if = {
			limit = {
				global_var:global_$tradezone$_tradezone = {
					has_variable = $tradegood$_stockpile_TZ
				}
			}
			set_local_variable = {
				name = i_demand_diff
				value = $order_size$
			}
			global_var:global_$tradezone$_tradezone = {
				change_local_variable = {
					name = i_demand_diff
					subtract = var:$tradegood$_stockpile_TZ
				}
			}

			if = { # Only transfer the goods if they from stockpile is actually bigger than the order size
				limit = {
					local_var:i_demand_diff < 0 # If the supplier can't meet demand, the purchaser should try again on its next preferred supplier
				}
				# Add to the purchasing governorship's stockpile
				PURCHASE_transfer_goods_externally = {
					tradegood = $tradegood$
					amount = $order_size$
					category = $category$
					tradezone = $tradezone$
				}
				owner = {
					change_variable = {
						name = country_external_total_ordered_$tradegood$ # Saves the total amount ordered - Note: not the total amount successfully purchased
						add = $order_size$
					}
				}

			}
		}
		else = {
			debug_log = "Tradezone scope did not have  $tradegood$ stockpile in  $tradezone$"
		}
	}
}

PURCHASE_transfer_goods_externally = {
	# Scope: governorship
	# Function: Put goods in the purchasing governorship, subtract goods from the internal trade scope and allocate trade-scope-wide revenue accordingly.

	# Format of arguments:
	# $target_stockpile$ = grain_stockpile, derived from $for_stockpile$ in PURCHASE_order_internal, the stockpile in the governorship being filled
	# $amount$ = local variable, derived from $order_size$ in PURCHASE_order_internal
	# $from_stockpile$ = grain_stockpile_internal, derived from $from_stockpile$ in PURCHASE_order_internal, this is the available stockpile on the whole internal market
	# $local_price$ = local_price_grain, gets the local price of grain from the governorship owner's capital
	# $internal_sold_total$ = internal_sold_total_grain, the total amount sold in the internal trade scope, used by the effect to distribute the cut of amount sold to contributing governorships
	debug_log = "Transferring  $tradegood$  from  $tradezone$"

	# ADD TO BUYER'S STOCKPILE
	change_variable = {
		name = $tradegood$_stockpile
		add = $amount$
	}

	# ALLOCATE WEALTH FOR THE POOL
	set_local_variable = {
		name = this_spend
		value = $amount$
	}

	# SUBTRACT FROM THE SELECTED INTERNAL AVAILABLE STOCKPILE
	global_var:global_$tradezone$_tradezone = {
		change_variable = {
			name = $tradegood$_stockpile_TZ
			subtract = $amount$
		}
	}

	change_local_variable = { # use the price from the seller TZ
		name = this_spend
		multiply = global_var:global_$tradezone$_tradezone.var:local_price_$tradegood$
	}

	## PRICE PREMIUM FOR EXTERNAL TRADE
	# The seller TZ will charge a premium based on the price of the purchaser's TZ, in order to profit from regions where the demand is higher by adjusting their price up by a percentage of the buyer's local price.

	set_local_variable = {
		name = international_price_premium
		value = var:trade_center.var:local_price_$tradegood$ # Get the price from the local trade center
	}

	change_local_variable = {
		name = international_price_premium
		multiply = 0.1 # Get 10% of it
	}

	change_local_variable = {
		name = this_spend
		add = local_var:international_price_premium
	}

	# Add transport costs
	if = { # Only add transport costs between tradezones if there is an actual transport cost to account for
		limit = {
			var:trade_center = {
				has_variable = here_to_$tradezone$_tradezone
			}
		}
		change_local_variable = {
			name = this_spend
			add = var:trade_center.var:here_to_$tradezone$_tradezone # Note: should this be re-framed as here_from_$tradezone$, so that it can account for the speed of importing being faster in one direction?
		}
		change_variable = {
			name = governorship_this_quarter_spend_on_transport_$tradegood$ # Track the transport costs for the player's benefit
			add = var:trade_center.var:here_to_$tradezone$_tradezone
		}
	}
	# TODO: Add a way to account for transport costs within a tradezone, too, using trade infrastructure level?

	# SUBTRACT MONEY FROM THE BUYING GOVERNORSHIP'S BALANCE
	# The balance will then be applied to the governorship wealth pools at the end of the purchase phase

	change_variable = {
		name = governorship_this_quarter_spend_on_$category$
		subtract = local_var:this_spend # Must be negative so it can be used with add_treasury
	}

	owner = {
		change_variable = {
			name = country_external_bought_total_$tradegood$
			add = $amount$
		}

		change_local_variable = { # Since this is a local variable, it doesn't actually have to be changed in the owner scope but it doesn't hurt.
			name = $tradegood$_trade_partner_cap_$tradezone$
			subtract = $amount$
		}
	}

	# Mark the goods transfer as complete, so it does not repeat the order in lower ranked tradezones
	# set_variable = $tradegood$_purchase_order_tender_complete # OBSOLETE

	# ADD THE AMOUNT SOLD TO THE TOTAL IN THE TRADE SCOPE
	global_var:global_$tradezone$_tradezone = {
		change_variable = {
			name = $tradegood$_sold_total_TZ
			add = $amount$
		}
		change_variable = { # Why is this being added to at the same time? Is there a reason to measure the income for all tradegoods as well as the income for individual tradegoods? Probably not, but leaving in for now in case removing breaks something.
			name = TZ_income_pool
			add = local_var:this_spend
		}
		change_variable = {
			name = $tradegood$_total_revenue_TZ # Adds to the external revenue pile of the seller tradezone
			add = local_var:this_spend
		}
	}

	every_in_list = {
		variable = list_of_trade_partners_all_categories
		limit = {
			any_owned_province = {
				$tradezone$_tradezone = { PROVINCE = yes }
			}
		}

		change_variable = {
			name = $tradegood$_external_income_$tradezone$
			add = local_var:this_spend
		}
		change_variable = {
			name = $tradegood$_external_sold_total_$tradezone$
			add = $amount$
		}
	}
	
}

PURCHASE_get_trade_partner_cap = {
	# Scope: country
	# Function: Get the cap of resources in a tradezone that are declared by the originating governorship scope's owner's trade partners, so that the country does not buy from non-trade partners
	# This will be subtracted from when transferring goods.

	set_local_variable = {
		name = $tradegood$_trade_partner_cap_$tradezone$
		value = 0
	}

	every_in_list = {
		variable = list_of_trade_partners_all_categories
		limit = {
			any_owned_province = {
				$tradezone$_tradezone = { PROVINCE = yes }
			}
		}

		change_local_variable = {
			name = $tradegood$_trade_partner_cap_$tradezone$
			add = var:country_$tradegood$_offered_external_to_$tradezone$
		}
	}
}

PURCHASE_reset_trade_partner_caps = {
	# Scope: country
	# Function: Get the cap of resources offered by all trade partners in all tradezones
	every_tradegood_complex = {
		APPLY = PURCHASE_get_trade_partner_cap_by_TZ
	}
}

PURCHASE_get_trade_partner_cap_by_TZ = {
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = india
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = east_north_america
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = west_north_america
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = caribbean
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = west_south_america
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = east_south_america
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = south_east_asia
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = indo_china
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = yellow_sea
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = southern_africa
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = west_africa
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = east_africa
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = middle_east
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = western_steppe
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = eastern_steppe
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = upper_yangtzi
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = atlantic_seaboard
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = central_europe
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = west_mediterranean
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = baltic
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = east_europe
		}
       PURCHASE_get_trade_partner_cap = {
            tradegood = $tradegood$
            tradezone = east_mediterranean
		}
}


######################### SELL ##############################
# These internal calculations could potentially be altered to handle both internal and external amounts in one.

SELL_get_cut_of_revenue = {
	# Scope: governorship
	# Called: After all internal POs are completed.
	# Function: Get the governorship's cut of total revenue AND subtract the resources sold proportionate to their contribution to trade-scope-wide trade.
	# Quarterly governorship income is only divvied up and given out at the end of both internal and external trade. Gets reset at the beginning of every quarter

	# Format of arguments
	# $internal_total_revenue$ = internal_total_revenue_grain
	# $internal_stockpile_cut_percentage$ = internal_stockpile_cut_percentage_grain
	# $local_cut_of_revenue$ = local_internal_revenue_cut_grain
	# $stockpile_sold$ = grain_stockpile, the stockpile which is reduced in the governorship to reflect goods sold
	# $amount_sold_total$ = internal_sold_total_grain, recorded by the transfer of goods effect

	# START INTERNAL #
	set_variable = { # Get the total internal revenue from the tradezone
		name = local_internal_revenue_cut_$tradegood$
		value = var:internal_trade_scope.var:$tradegood$_total_revenue_$tradezone$ # TODO: Update so that this checks income based on the governorship's TZ, as each TZ will have a unique pool of revenue according to the price of tradegoods there.
	}
	change_variable = {
		name = local_internal_revenue_cut_$tradegood$
		multiply = var:internal_stockpile_cut_percentage_$tradegood$
	}
	# END INTERNAL #

	# START EXTERNAL #
	set_variable = {
		name = local_external_revenue_cut_$tradegood$
		value = var:internal_trade_scope.var:$tradegood$_external_income_$tradezone$
	}
	change_variable = {
		name = local_external_revenue_cut_$tradegood$
		value = var:external_stockpile_cut_percentage_$tradegood$
	}
	# END EXTERNAL #

	change_variable = {
		name = governorship_this_quarter_income_from_$category$
		add = var:local_internal_revenue_cut_$tradegood$
	}
	change_variable = {
		name = governorship_this_quarter_income_from_$category$
		add = var:local_external_revenue_cut_$tradegood$
	}

	# SUBTRACT THE RESOURCES SOLD FROM THE GOVERNORSHIPS ACCORDING TO THEIR CUT

	var:internal_trade_scope = {
		set_local_variable = {
			name = local_sold_cut_internal
			value = var:$tradegood$_sold_total_$tradezone$
		}
		set_local_variable = {
			name = local_sold_cut_external
			value = var:$tradegood$_external_sold_total_$tradezone$
		}
	}

	change_local_variable = {
		name = local_sold_cut_internal
		multiply = var:internal_stockpile_cut_percentage_$tradegood$
	}
	change_local_variable = {
		name = local_sold_cut_external
		multiply = var:external_stockpile_cut_percentage_$tradegood$
	}

	change_variable = {
		name = $tradegood$_stockpile
		subtract = local_var:local_sold_cut_internal
	}
	change_variable = {
		name = $tradegood$_stockpile
		subtract = local_var:local_sold_cut_external
	}

	owner = {
		change_variable = {
			name = country_internal_total_sold_$tradegood$
			add = local_var:local_sold_cut_internal
		}
		change_variable = {
			name = country_external_total_sold_$tradegood$
			add = local_var:local_sold_cut_external
		}
	}

}

SELL_set_revenue_cut_percentage = { # Modified to handle both internal and external
	# Scope: governorship
	# Function: Set the governorship's cut of the total value of the given tradegood sold in this supplier zone (a tradezone within a tag)

	set_variable = { # Get the total of the goods that this governorship sent up internally
		name = internal_stockpile_cut_percentage_$tradegood$
		value = var:$tradegood$_offered
	}
	set_variable = { # Get the total of the goods that this governorship sent up externally
		name = external_stockpile_cut_percentage_$tradegood$
		value = var:$tradegood$_offered_external
	}

	# INTERNAL
	if = {
		limit = {
			var:internal_trade_scope = {
				var:$tradegood$_available_at_start_of_quarter_$tradezone$ > 0
			}
		}
		change_variable = { # Now divide the amount contributed by the total in the internal stockpile, getting a percentage.
			# e.g. if the governorship contributed 150 units and the internal stockpile has 1000 units, you get 0.15 (15%)
			name = internal_stockpile_cut_percentage_$tradegood$
			divide = var:internal_trade_scope.var:$tradegood$_available_at_start_of_quarter_$tradezone$ # Gets the stockpile from the internal trade scope (country or customs union) e.g. "grain_available_at_start_of_quarter_india_tradezone" TODO: Make sure this is normalised, the usual format for most of these trade 	effects is to use just the TZ name, not its full label (e.g. "india", not "india_tradezone")
		}
	}
	# EXTERNAL
	if = {
		limit = {
			var:trade_center = {
				var:$tradegood$_available_at_start_of_quarter_TZ > 0
			}
		}
		change_variable = { # Now divide the amount contributed by the total in the internal stockpile, getting a percentage.
			# e.g. if the governorship contributed 150 units and the internal stockpile has 1000 units, you get 0.15 (15%)
			name = internal_stockpile_cut_percentage_$tradegood$
			divide = var:internal_trade_scope.var:$tradegood$_available_at_start_of_quarter_TZ # Gets the stockpile from the internal trade scope (country or customs union) e.g. "grain_available_at_start_of_quarter_TZ" 
			# This uses the start of quarter value to get a percentage; the amount actually available at the start of the trade phase is irrelevant for the purposes of getting a percentage and it would cause a performance overhead to have to rely on that as it shrinks while internal orders are completed, so every governorship's contribution would also have to be reduced.
			# Why is this comment here? Am I overexplaining things? Probably
		}
	}
}