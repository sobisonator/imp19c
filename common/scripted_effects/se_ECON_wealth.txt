### SETUP EFFECTS

WEALTH_cache_national_wealth = {
	# Scope: Country
	# Called: Near end of init and before end of every trade cycle
	set_variable = {
		name = WEALTH_total_private_moveable_wealth
		value = WEALTH_total_private_moveable_wealth
	}
}

# COMBINED

WEALTH_setup_governorship = {
	WEALTH_setup_upper_strata = yes
	WEALTH_setup_middle_strata = yes
	WEALTH_setup_lower_strata = yes
	WEALTH_setup_proletariat = yes
	WEALTH_setup_indentured = yes
	WEALTH_setup_tribesmen = yes
	WEALTH_setup_slaves = yes
	###
	WEALTH_setup_growth_rate = yes
}

# INDIVIDUAL POP WEALTH SETUP

WEALTH_setup_upper_strata = {

	# Scope = governorship
	set_variable = {
		name = upper_strata_wealth
		value = WEALTH_starting_upper_strata
	}
}

WEALTH_setup_middle_strata = {
	# Scope = governorship
	set_variable = {
		name = middle_strata_wealth
		value = WEALTH_starting_middle_strata
	}
}

WEALTH_setup_lower_strata = {
	# Scope = governorship
	set_variable = {
		name = lower_strata_wealth
		value = WEALTH_starting_lower_strata
	}
}

WEALTH_setup_proletariat = {
	# Scope = governorship
	set_variable = {
		name = proletariat_wealth
		value = WEALTH_starting_proletariat
	}
}

WEALTH_setup_indentured = {
	# Scope = governorship
	set_variable = {
		name = indentured_wealth
		value = WEALTH_starting_indentured
	}
}

WEALTH_setup_tribesmen = {
	# Scope = governorship
	set_variable = {
		name = tribesmen_wealth
		value = WEALTH_starting_tribesmen
	}
}

WEALTH_setup_slaves = {
	# Scope = governorship
	set_variable = {
		name = slaves_wealth
		value = WEALTH_starting_slaves
	}
}

# GROWTH RATE SETUP

WEALTH_setup_growth_rate = {
	# Scope = governorship
	set_variable = {
		name = WEALTH_growth_rate
		value = 1.01
	}
}

### CHANGE EFFECTS

# APPLYING GROWTH RATE (DEBUG ONLY)

WEALTH_apply_growth_rate_all_debug = {
	# Scope = governorship
	change_variable = {
		name = upper_strata_wealth
		multiply = var:WEALTH_growth_rate
	}
	change_variable = {
		name = middle_strata_wealth
		multiply = var:WEALTH_growth_rate
	}
	change_variable = {
		name = lower_strata_wealth
		multiply = var:WEALTH_growth_rate
	}
	change_variable = {
		name = proletariat_wealth
		multiply = var:WEALTH_growth_rate
	}
	change_variable = {
		name = indentured_wealth
		multiply = var:WEALTH_growth_rate
	}
	change_variable = {
		name = slaves_wealth
		multiply = var:WEALTH_growth_rate
	}
}

WEALTH_modify_pending_change = {
	# Scope: Governorship
	# Called: ad-hoc
	# Function: Add wealth to a pending change
	# Every quarter, the pending change is applied to the pop group, and the previous quarter's ammount is stored so that it can be compared in terms of relative growth/shrinkage of wealth	
	# Args:
	# poptype = poptype
	# function = add or subtract (or multiply or divide if feeling frisky)
	# amount = number amount or reference to var/svalue with number amount
	change_variable = {
		name = PENDING_$poptype$_wealth
		$function$ = $amount$
	}
}

WEALTH_modify_pending_change_conditional = {
	# Scope: Governorship
	# Called: ad-hoc
	# Function: Add wealth to a pending change, with (a) condition(s)
	# Every quarter, the pending change is applied to the pop group, and the previous quarter's ammount is stored so that it can be compared in terms of relative growth/shrinkage of wealth	
	# Args:
	# poptype = poptype
	# function = add or subtract (or multiply or divide if feeling frisky)
	# conditions = conditions for adding the wealth to the poptype's pool.
	# amount = number amount or reference to var/svalue with number amount
	if = {
		limit = {
			$conditions$
		}
		change_variable = {
			name = PENDING_$poptype$_wealth
			$function$ = $amount$
		}
	}
}

WEALTH_add_income_from_wholesale_food = {
	# Scope: governorship
	# Called: ad-hoc
	# Function: Give wealth to each strata group based on their share of the wholesale
	WEALTH_modify_pending_change = {
		poptype = upper_strata
		function = add
		amount = TRADE_local_wholesale_income_upper_strata_food
	}
}

WEALTH_startup_set_pending_change_variables = {
	# Scope: governorship
	# Called: at start of game
	# Function: Prevent the need for an if check in the modify or apply pending change scripted effect, by setting up empty pending wealth change variables at game start
	set_variable = {
		name = PENDING_upper_strata_wealth
		value = 0
	}
	set_variable = {
		name = PENDING_middle_strata_wealth
		value = 0
	}
	set_variable = {
		name = PENDING_lower_strata_wealth
		value = 0
	}
	set_variable = {
		name = PENDING_proletariat_wealth
		value = 0
	}
	set_variable = {
		name = PENDING_indentured_wealth
		value = 0
	}
	set_variable = {
		name = PENDING_tribesmen_wealth
		value = 0
	}
	set_variable = {
		name = PENDING_slaves_wealth
		value = 0
	}
}

WEALTH_apply_pending_changes = {
	# Scope: Governorship
	# Called: quarterly
	# Function: Run all WEALTH_apply_pending_change effects for poptypes
	WEALTH_apply_pending_change = {
		poptype = upper_strata
	}
	WEALTH_apply_pending_change = {
		poptype = middle_strata
	}
	WEALTH_apply_pending_change = {
		poptype = lower_strata
	}
	WEALTH_apply_pending_change = {
		poptype = proletariat
	}
	WEALTH_apply_pending_change = {
		poptype = indentured
	}
	WEALTH_apply_pending_change = {
		poptype = tribesmen
	}
	WEALTH_apply_pending_change = {
		poptype = slaves
	}
}

WEALTH_apply_pending_change = {
	# Scope: Governorship
	# Called: quarterly
	# Function: Add the pending wealth changes to every pop's wealth pool, then reset them to 0
	# Also save the last quarter's for each group so it can be used for comparisons
	set_variable = {
		name = last_quarter_$poptype$_wealth
		value = $poptype$_wealth
	}
	change_variable = {
		name = $poptype$_wealth
		add = PENDING_$poptype$_wealth
	}
	set_variable = {
		name = PENDING_$poptype$_wealth
		value = 0
	}
}

# EXPERIMENTAL - FOR PIE CHART DISPLAY

ECON_update_wealth_list = {
	# Scope: country
	# Function: Create a list of provinces with variables storing different wealth types and the names of the types
	if = {
		limit = {
			has_variable_list = list_of_wealth_distribution
		}
		every_in_list = {
			variable = list_of_wealth_distribution
			remove_variable = storing_WEALTH_national_data_for
			remove_variable = WEALTH_national_data_type_tooltip
			remove_variable = WEALTH_national_data_value
			remove_variable = WEALTH_national_percentage
			remove_variable = derived_colour
			remove_from_list = list_of_wealth_distribution
		}
	}
	ECON_add_to_wealth_list = {
		POP_LOC_NAME = UPPER_STRATA
		specifier = upper_strata
		derived_colour = culture_group:north_ugric
		data_name = WEALTH_national
	}
	ECON_add_to_wealth_list = {
		POP_LOC_NAME = MIDDLE_STRATA
		specifier = middle_strata
		derived_colour = culture_group:south_celtic
		data_name = WEALTH_national
	}
	ECON_add_to_wealth_list = {
		POP_LOC_NAME = LOWER_STRATA
		specifier = lower_strata
		derived_colour = culture_group:east_slavic
		data_name = WEALTH_national
	}
}

ECON_add_to_wealth_list = {
	# Scope: country
	# Function: Add values to a list of provinces with variables storing different wealth types and the names of the types
	save_scope_as = origin
	random_province = {
		limit = {
			NOT = { has_variable = storing_wealth_data_for }
		}
		save_scope_as = random_province_scope
	}
	add_to_variable_list = {
		name = list_of_wealth_distribution
		target = scope:random_province_scope
	}
	scope:random_province_scope = {
		set_variable = {
			name = storing_$data_name$_data_for
			value = scope:origin
		}
		set_variable = {
			name = $data_name$_data_type_tooltip
			value = flag:$POP_LOC_NAME$_WEALTH
		}
		set_variable = {
			name = $data_name$_data_value
			value = scope:origin.$data_name$_$specifier$
		}
		set_variable = {
			name = derived_colour
			value = $derived_colour$
		}
		set_variable = {
			name = $data_name$_percentage
			value = scope:origin.$data_name$_$specifier$ # Needed for calculating percentage
		}
		change_variable = {
			name = $data_name$_percentage 
			divide = scope:origin.$data_name$_total
		}
	}
}

ECON_distribute_starting_holdings = { #UK only for now
	char:364 = { #Earl Spencer
		add_holding = p:1133 #Boyle - for estates in Sligo
		add_holding = p:1137 #Castlebar - for estates in Sligo
	}
	char:362 = { #Viscount Palmerston
		add_holding = p:6138 #Sligo
	}
	char:88 = { #Duke of Wellington
		add_holding = p:5912 #Taunton, for Wellington proper
		add_holding = p:5583 #Dundalk, for Mornington and Dangan
		add_holding = p:5133 #Wavre in Belgium, estate as Prince of Waterloo
		add_holding = p:8528 #Granada in Spain, for Dehesa Baja estate
	}
	char:369 = { #Duke of Devonshire
		add_holding = p:5014 #Derby, for Chatsworth and Hardwick
		add_holding = p:2319 #Waterford, for Lismore Castle
		add_holding = p:10012 #East Riding, for Londesbrough and Bolton Abbey
		#would put Eastbourne, but the Prince Regent should have Brighton - consider separating Brighton, Eastbourne, Hastings? 
	}
	char:90 = { #Prince Regent
		add_holding = p:5184 #Sussex
	}
	char:359 = { #Earl/Marquess of Londonderry
		add_holding = p:5525 #Belfast, but for estates in County Down
	}
	char:361 = { #Earl Bathurst
		add_holding = p:6152 #Gloucester, for Cirencester. But maybe Lord Stowell should have Gloucester...
	}
	char:366 = { #Earl Grey
		add_holding = p:6996 #Blyth, for Howick Hall
	}
	char:370 = { #Viscount Melbourne
		add_holding = p:2094 #Cavan, for the og Melbourne. Derby is taken by char:369
	}
	char:371 = { #Earl Fitzwilliam
		add_holding = p:5537 #currently called Derry but this is where County Tyrone is
	}
	char:372 = { #Marquess of Sligo
		add_holding = p:2720 #Westport
	}
	char:374 = { #Lord Byron
		add_holding = p:7951 #Nottingham, for Newstead Abbey
	}
	char:386 = { #Duke of Gordon
		add_holding = p:4212 #Moray, for Gordon Castle
	}
	char:388 = { #Duke of Manchester
		add_holding = p:9170 #Cambridgeshire, for Kimbolton
	}
}

### WAGES FOR JOBS - PORT INTO NEW FILE

WAGE_set_all_wages_governorship = {

}

WAGE_set_wage_governorship = {
	# Scope: Country
	# Function: Set the quarterly wage in this governorship for a certain industry
	# Available options are:
	##
	# manufacturing
	# agriculture
	# mining
	# unskilled_service
	# skilled_service
	##
	set_variable = {
		name = WAGE_$sector$
		value = $wage$ # In currency
	}
}

WAGE_pay_wages_governorship = {
	# Scope: Governorship
	# Function: Pay the wages to every pop type in a governorship based on the percentage of that pop type employed in $sector$
	WAGE_pay_pop_wage = {
		pop = middle_strata
		sector = $sector$
	}
}

WAGE_pay_pop_wage = {
	# Scope: Governorship
	# Function: Called by WAGE_pay_wages_governorship
	change_variable = {
		name = upper_strata_wealth
		subtract = {
			value = owner.WAGE_wealth_value_$sector$ # svalue (translates currency value to wealth value)
			multiply = 500 # Base wage value is for 1 family, 1 pop =~ 500 working people
			multiply = JOBS_$pop$_employed_$sector$ # svalue
			multiply = var:governorship_$pop$
		}
	}
	change_variable = {
		name = $pop$_wealth
		add = {
			value = owner.WAGE_wealth_value_$sector$ # svalue (translates currency value to wealth value)
			multiply = 500 # Base wage value is for 1 family, 1 pop =~ 500 working people
			multiply = JOBS_$pop$_employed_$sector$ # svalue
			multiply = var:governorship_$pop$
		}
	}
}


### NEW WEALTH GENERATION

WEALTH_generate_new = {
	# Scope: Governorship
	# Function: Generate new wealth from resource production and services
}

WEALTH_generate_new_all_countries = {
	# Scope: Random country
	WEALTH_update_services_value = yes
	every_country = {
		WEALTH_generate_new_all_governorships = yes
	}
	every_country = {
		WEALTH_create_empire_pool = yes
		WEALTH_get_empire_pool_owed_governorship_all = yes
		WEALTH_distribute_new_wealth_all_governorships = yes
	}
}

WEALTH_generate_new_all_governorships = {
	# Scope: Country
	every_governorships = {
		WEALTH_generate_from_production_all = yes
		WEALTH_generate_from_services_governorship = yes
		WEALTH_calculate_new_wealth_shares = {
			category = production
			the_state = 0
			upper_strata = 1
			middle_strata = 0.1
			lower_strata = 0.05
			proletariat = 0
			indentured = 0
			tribesmen = 0.1
			slaves = 0
		}
		WEALTH_calculate_new_wealth_shares = {
			category = services
			the_state = 0
			upper_strata = 1
			middle_strata = 0.2
			lower_strata = 0
			proletariat = 0.01
			indentured = 0
			tribesmen = 0
			slaves = 0
		}
	}
}

WEALTH_generate_from_production_all = {
	# Scope: Governorship
	# Function: Create new wealth from the value of all goods produced in this governorship
	set_variable = {
		name = WEALTH_new_generated_production_governorship
		value = 0
	}
	every_tradegood_complex = {
		APPLY = WEALTH_generate_from_production
	}
	change_variable = {
		name = WEALTH_new_generated_production_governorship
		multiply = 0.005
	}
}

WEALTH_update_services_value = {
	# Scope: Random country
	WEALTH_set_services_value = yes
}

WEALTH_generate_from_production = {
	# Scope: Governorship
	# Function: Create new wealth from $tradegood$ production taking into account its durability, i.e., once produced, how long one unit of this tradegood holds its value.
	change_variable = {
		name = WEALTH_new_generated_production_governorship
		add = {
			value = WEALTH_$tradegood$_durability
			multiply = {
				value = GOODS_governorship_$tradegood$_produced
				multiply = global_var:global_base_import_price_$tradegood$
			}
		}
	}
}

WEALTH_set_services_value = {
	# Scope: Random country, to every tradezone
	# Function: Set the level of demand for services in every tradezone, based on economic activity in tradezones
	every_trade_center = {
		save_scope_as = services_TZ_scope
		set_variable = {
			name = WEALTH_services_demand_TZ
			value = SERVICES_demand
		}
		set_variable = {
			name = WEALTH_services_supply_TZ
			value = {
				value = 1
				every_country = {
					limit = {
						any_governorships = {
							var:trade_center = scope:services_TZ_scope
						}
					}
					every_governorships = {
						limit = {
							var:trade_center = scope:services_TZ_scope
						}
						add = {
							value = SERVICES_output_governorship
						}
					}
				}
			}
		}
	}

	set_global_variable = {
		name = WEALTH_services_demand_global
		value = {
			every_country = { 
				every_owned_province = {
					limit = { has_variable = TZ_name }
					add = var:WEALTH_services_supply_TZ
				}
			}
		}
	}
	set_global_variable = {
		name = WEALTH_services_supply_global
		value = {
			every_country = { 
				every_owned_province = {
					limit = { has_variable = TZ_name }
					add = var:WEALTH_services_demand_TZ
				}
			}
		}
	}

	every_trade_center = {

		set_variable = {
			name = WEALTH_services_value_TZ
			value = {
				value = var:WEALTH_services_supply_TZ
				add = global_var:WEALTH_services_supply_global
				divide = {
					value = var:WEALTH_services_demand_TZ
					add = global_var:WEALTH_services_demand_global
					add = global_var:WEALTH_services_demand_global
				}
				divide = 20
			}
		}
	}
}

WEALTH_generate_from_services_governorship = {
	# Scope: Governorship
	# Function: Create new wealth from services
	set_variable = {
		name = WEALTH_new_generated_services_governorship
		value = {
			value = governorship_num_of_URB_commerce_district
			multiply = var:trade_center.var:WEALTH_services_value_TZ
		}
	}
}

WEALTH_set_new_generated_amount = {
	set_variable = {
		name = WEALTH_new_generated_$category$_$recipient$
		value = {
			value = $recipient_ratio$
			if = {
				limit = {
					NOT = { flag:$recipient$ = flag:the_state }
				}
				multiply = var:governorship_$recipient$
			}
			else = {
				multiply = var:governorship_population
			}
		}
	}
}

WEALTH_calculate_new_wealth_shares = {

	WEALTH_set_new_generated_amount = {
		category = $category$
		recipient = the_state
		recipient_ratio = $the_state$
	}
	WEALTH_set_new_generated_amount = {
		category = $category$
		recipient = upper_strata
		recipient_ratio = $upper_strata$
	}
	WEALTH_set_new_generated_amount = {
		category = $category$
		recipient = middle_strata
		recipient_ratio = $middle_strata$
	}
	WEALTH_set_new_generated_amount = {
		category = $category$
		recipient = lower_strata
		recipient_ratio = $lower_strata$
	}
	WEALTH_set_new_generated_amount = {
		category = $category$
		recipient = proletariat
		recipient_ratio = $proletariat$
	}
	WEALTH_set_new_generated_amount = {
		category = $category$
		recipient = indentured
		recipient_ratio = $indentured$
	}
	WEALTH_set_new_generated_amount = {
		category = $category$
		recipient = tribesmen
		recipient_ratio = $tribesmen$
	}
	WEALTH_set_new_generated_amount = {
		category = $category$
		recipient = slaves
		recipient_ratio = $slaves$
	}

	set_local_variable = {
		name = WEALTH_new_generated_sum_of_$category$_income_weights
		value = {
			value = var:WEALTH_new_generated_$category$_the_state
			add = var:WEALTH_new_generated_$category$_upper_strata
			add = var:WEALTH_new_generated_$category$_middle_strata
			add = var:WEALTH_new_generated_$category$_lower_strata
			add = var:WEALTH_new_generated_$category$_proletariat
			add = var:WEALTH_new_generated_$category$_indentured
			add = var:WEALTH_new_generated_$category$_tribesmen
			add = var:WEALTH_new_generated_$category$_slaves
			divide = var:WEALTH_new_generated_$category$_governorship
		}
	}

	if = {
		limit = {
			has_local_variable = WEALTH_new_generated_sum_of_$category$_income_weights
		}
		if = {
			limit = {
				local_var:WEALTH_new_generated_sum_of_$category$_income_weights > 0
			}
			if = {
				limit = {
					var:WEALTH_new_generated_$category$_the_state > 0
				}
				change_variable = {
					name = WEALTH_new_generated_$category$_the_state
					divide = local_var:WEALTH_new_generated_sum_of_$category$_income_weights
				}
			}
			if = {
				limit = {
					var:WEALTH_new_generated_$category$_upper_strata > 0
				}
				change_variable = {
					name = WEALTH_new_generated_$category$_upper_strata
					divide = local_var:WEALTH_new_generated_sum_of_$category$_income_weights
				}
			}
			if = {
				limit = {
					var:WEALTH_new_generated_$category$_middle_strata > 0
				}
				change_variable = {
					name = WEALTH_new_generated_$category$_middle_strata
					divide = local_var:WEALTH_new_generated_sum_of_$category$_income_weights
				}
			}
			if = {
				limit = {
					var:WEALTH_new_generated_$category$_lower_strata > 0
				}
				change_variable = {
					name = WEALTH_new_generated_$category$_lower_strata
					divide = local_var:WEALTH_new_generated_sum_of_$category$_income_weights
				}
			}
			if = {
				limit = {
					var:WEALTH_new_generated_$category$_proletariat > 0
				}
				change_variable = {
					name = WEALTH_new_generated_$category$_proletariat
					divide = local_var:WEALTH_new_generated_sum_of_$category$_income_weights
				}
			}
			if = {
				limit = {
					var:WEALTH_new_generated_$category$_indentured > 0
				}
				change_variable = {
					name = WEALTH_new_generated_$category$_indentured
					divide = local_var:WEALTH_new_generated_sum_of_$category$_income_weights
				}
			}
			if = {
				limit = {
					var:WEALTH_new_generated_$category$_tribesmen > 0
				}
				change_variable = {
					name = WEALTH_new_generated_$category$_tribesmen
					divide = local_var:WEALTH_new_generated_sum_of_$category$_income_weights
				}
			}
			if = {
				limit = {
					var:WEALTH_new_generated_$category$_slaves > 0
				}
				change_variable = {
					name = WEALTH_new_generated_$category$_slaves
					divide = local_var:WEALTH_new_generated_sum_of_$category$_income_weights
				}
			}
		}
	}
}

WEALTH_create_empire_pool = {
	# Scope: Country
	# Function: Create a pool for the new wealth generated within an empire to be redirected to governorships with commerce districts
	# The ratio of commerce districts to population sets the ratio of wealth from around the empire (core country, autonomous governorship and colonies) which is redirected to provinces with commerce districts

	set_variable = {
		name = WEALTH_empire_pool_total_commerce_districts
		value = {
			value = 0
			every_governorships = {
				add = governorship_num_of_URB_commerce_district
			}
			every_subject = {
				limit = {
					contributes_to_empire_wealth_pool = yes
				}
				every_governorships = {
					add = governorship_num_of_URB_commerce_district 
				}
			}
		}
	}
	if = {
		limit = {
			var:WEALTH_empire_pool_total_commerce_districts > 0
		}
		set_variable = {
			name = WEALTH_empire_pool_ratio
			value = {
				value = var:WEALTH_empire_pool_total_commerce_districts
				divide = {
					value = num_of_cities
					every_subject = {
						limit = {
							contributes_to_empire_wealth_pool = yes
						}
						add = num_of_cities
					}
				}
			}
		}
	}
	else = {
		set_variable = {
			name = WEALTH_empire_pool_ratio
			value = 0
		}
	}
	if = {
		limit = {
			var:WEALTH_empire_pool_ratio > 1
		}
		set_variable = {
			name = WEALTH_empire_pool_ratio
			value = 1
		}
	}

	set_variable = {
		name = WEALTH_empire_pool
		value = {
			value = 0
			every_governorships = {
				add = var:WEALTH_new_generated_production_governorship
				add = var:WEALTH_new_generated_services_governorship
			}
			every_subject = {
				limit = {
					contributes_to_empire_wealth_pool = yes
				}
				every_governorships = {
					add = var:WEALTH_new_generated_production_governorship
					add = var:WEALTH_new_generated_services_governorship 
				}
			}
			multiply = var:WEALTH_empire_pool_ratio
		}
	}
}

WEALTH_get_empire_pool_owed_governorship_all = {
	# Scope: Country
	every_governorships = {
		WEALTH_get_empire_pool_owed_governorship = yes
	}
}

WEALTH_get_empire_pool_owed_governorship = {
	# Scope: Governorship
	# Function: Get the amount owed to this governorship from or to the empire wealth pool
	# This is always given either directly to the upper strata or the state (latter is TODO)
	set_variable = {
		name = WEALTH_empire_pool_owed_governorship
		value = {
			value = governorship_num_of_URB_commerce_district
			if = {
				limit = {
					owner.var:WEALTH_empire_pool_total_commerce_districts > 0
				}
				divide = owner.var:WEALTH_empire_pool_total_commerce_districts
			}
			multiply = owner.var:WEALTH_empire_pool

			subtract = {
				value = var:WEALTH_new_generated_production_governorship
				add = var:WEALTH_new_generated_services_governorship
				multiply = owner.var:WEALTH_empire_pool_ratio
			}
		}
	}
}

WEALTH_distribute_new_wealth_all_governorships = {
	# Scope: Country
	# Function: Run WEALTH_distribute_new_wealth in every governorship
	every_governorships = {
		WEALTH_distribute_new_wealth = yes
	}
}

WEALTH_distribute_new_wealth = {
	# Scope: Governorship
	# Function: Add the newly generated wealth and empire pool wealth to the pops and state treasury based on the ratios calculated
	change_variable = {
		name = upper_strata_wealth
		add = {
			value = var:WEALTH_new_generated_services_upper_strata
			add = var:WEALTH_new_generated_production_upper_strata
			add = var:WEALTH_empire_pool_owed_governorship # Unless controlled economy, in which case it goes to the state (TODO)
		}
	}
	change_variable = {
		name = middle_strata_wealth
		add = {
			value = var:WEALTH_new_generated_services_middle_strata
			add = var:WEALTH_new_generated_production_middle_strata
		}
	}
	change_variable = {
		name = lower_strata_wealth
		add = {
			value = var:WEALTH_new_generated_services_lower_strata
			add = var:WEALTH_new_generated_production_lower_strata
		}
	}
	change_variable = {
		name = proletariat_wealth
		add = {
			value = var:WEALTH_new_generated_services_proletariat
			add = var:WEALTH_new_generated_production_proletariat
		}
	}
	change_variable = {
		name = tribesmen_wealth
		add = {
			value = var:WEALTH_new_generated_services_tribesmen
			add = var:WEALTH_new_generated_production_tribesmen
		}
	}
	change_variable = {
		name = slaves_wealth
		add = {
			value = var:WEALTH_new_generated_services_slaves
			add = var:WEALTH_new_generated_production_slaves
		}
	}
	change_variable = {
		name = indentured_wealth
		add = {
			value = var:WEALTH_new_generated_services_indentured
			add = var:WEALTH_new_generated_production_indentured
		}
	}
}

############
# Wages
############

# Wages are paid by upper strata pops to middle strata and proletariat pops
# Only countries with a currency have wages. Countries without a currency cannot have jobs which pay a wage

# TODO: Reserve all the wages due for svalues

WEALTH_setup_wages = {
	# Scope: Country
	# Function: Set up wages for a country
	WEALTH_cache_national_cost_of_living = yes
	WEALTH_set_average_wage_at_cost_of_living = yes
}

WEALTH_setup_and_pay_wages_all_countries = {
	# Scope: Random country
	# Called: At game start
	every_country = {
		limit = {
			has_variable = official_currency
		}
		WEALTH_setup_wages = yes
		WEALTH_pay_all_wages_all_governorships = yes
	}
}

WEALTH_pay_wages_all_countries = {
	# Scope: Random country
	# Called: Quarterly economy tick
	every_country = {
		limit = {
			has_variable = official_currency
		}
		WEALTH_pay_all_wages_all_governorships = yes
	}
}

WEALTH_pay_all_wages_all_governorships = {
	# Scope: Country
	# Function: Calculate and pay wages for all job sectors in every governorship
	every_governorships = {
		WEALTH_calculate_all_wages = yes
		WEALTH_pay_wages = yes
	}
}

WEALTH_subtract_cost_of_living_all_governorships = {
	# Scope: Country
	# Function: Subtract wealth to cover cost of living in all governorships
	every_governorships = {
		WEALTH_subtract_cost_of_living = yes
	}
}

WEALTH_calculate_all_wages = {
	# Scope: Governorship
	# Function: Determine the amount owed for all job sectors
	WEALTH_calculate_wages = {
		category = administrators
	}
	WEALTH_calculate_wages = {
		category = educators
	}
	WEALTH_calculate_wages = {
		category = infrastructure_workers
	}
	WEALTH_calculate_wages = {
		category = military
	}
	WEALTH_calculate_wages = {
		category = resource_gatherer
	}
	WEALTH_calculate_wages = {
		category = industrial_workers
	}
	WEALTH_calculate_wages = {
		category = commercial
	}
}

WEALTH_cache_national_cost_of_living = {
	# Scope: Country
	# Function: Cache the wealth cost of living at country level to limit repeat calculations
	# Must be run at the start of every econ tick
	set_variable = {
		name = WEALTH_cost_of_living
		value = {
			value = CURRENCY_essentials_buying_power
			multiply = CURRENCY_wealth_value_1_unit_scaled_by_reserve_ratio
			multiply = 0.01
		}
	}
}

WEALTH_set_average_wage_at_cost_of_living = {
	# Scope: Country
	# Function: Set the average wage based on cost of living. This is based on a currency value, and does not automatically update to account for inflation.
	# This amount can then be modified based on the specific sector for which wages are being paid.
	set_variable = {
		name = WEALTH_average_wage_wealth_value
		value = var:WEALTH_cost_of_living
	}
}

WEALTH_modify_average_wage = {
	# Scope: Country
	# Function: Multiply the average wage by the given multiplier
	change_variable = {
		name = WEALTH_average_wage_wealth_value
		multiply = $multiplier$ 
	}
}

WEALTH_subtract_cost_of_living = {
	# Scope: Governorship
	# Function: Subtract the cost of living from every pop's wealth pool
	change_variable = {
		name = upper_strata_wealth
		add = WEALTH_cost_of_living_upper_strata
	}
	change_variable = {
		name = middle_strata_wealth
		add = WEALTH_cost_of_living_upper_strata
	}
	change_variable = {
		name = lower_strata_wealth
		add = WEALTH_cost_of_living_upper_strata
	}
	change_variable = {
		name = proletariat_wealth
		add = WEALTH_cost_of_living_upper_strata
	}
}

WEALTH_calculate_wages = {
	set_variable = {
		name = WEALTH_wages_due_$category$
		value = {
			value = JOBS_$category$_governorship # Number of occupied job slots in this category
			multiply = owner.var:WEALTH_average_wage_wealth_value
		}
	}
}

WEALTH_pay_wages = {
	# Scope: Governorship
	# Function: Set the wages due for the given category of jobs
	# For the available categories, see JOBS_svalues
	change_variable = {
		name = upper_strata_wealth
		add = JOBS_wages_expense_upper_strata
	}
	change_variable = {
		name = middle_strata_wealth
		add = JOBS_wages_due_middle_strata
	}
	change_variable = {
		name = proletariat_wealth
		add = JOBS_wages_due_proletariat
	}
}