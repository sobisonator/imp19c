# LAND: Set of scripts to manage the transfer and updating of values to do with land ownership, governorships etc.

# Sketch for land transfer effect

LAND_get_new_governorship_cache = { # POSSIBLY DEFUNCT
	# Scope: province
	# Function: Get a new_governorship_cache scope corresponding to this province's region
	# Should only be called as a child of LAND_transfer_provinces

	# Create a scope to store the values for the new or extended governorship
	
	# Do this for every region in the list of provinces being transferred

	# Might have to think of this differently if new or extended - needs some working out

	# Values from this cache scope (a random province) will then be saved in the new governorship, after all the provinces in the list have been transferred to it.

	# Case 1: The province's region hasn't had a new governorship cache created for it yet
	random_province = {
		limit = {
			NOT = {
				has_variable = is_new_governorship_cache
				scope:province_under_transfer.area.region = {
					is_in_list = scope:province_transfer_handler.regions_iterated
				}
			}
		}
		save_scope_as = new_governorship_cache
		set_variable = {
			name = governorship_cache_for_region
			value = scope:province_under_transfer.area.region
			days = 1
		}
		scope:province_transfer_handler = {
			add_to_variable_list = {
				name = regions_iterated
				target = scope:province_under_transfer.area.region
			}
			add_to_variable_list = {
				name = new_governorship_caches
				target = scope:new_governorship_cache
			}
		}
	}

	# Case 2: we have already created a new governorship cache for this province's region
	if = {
		limit = {
			area.region = {
				is_in_list = scope:province_transfer_handler.regions_iterated
			}
		}
		# Then go to that new governorship cache and save it as new governorship cache
		scope:province_transfer_handler = {
			random_in_list = {
				variable = new_governorship_caches
				limit = {
					var:governorship_cache_for_region = scope:province_under_transfer.area.region
				}
				save_scope_as = new_governorship_cache
			}
		}
	}	
}

LAND_get_share_of_governorship_wealth_var = {
	# Scope: province
	# Function: Get the amount of a governorship wealth pool held in the province based on the number of corresponding pops
	if = {
		limit = {
			governorship ?= {
				has_variable = $poptype$_wealth
			}
		}
		set_variable = {
			name = $poptype$_wealth
			value = governorship.var:$poptype$_wealth
		}
		# Divide by the number of this poptype in the governorship
		if = {
			limit = {
				governorship.governorship_$poptype$ > 0
			}
			change_variable = {
				name = $poptype$_wealth
				divide = governorship.governorship_$poptype$
			}
		}
		change_variable = {
			name = $poptype$_wealth
			multiply = num_of_$poptype$
		}
	}
	else = {
		set_variable = {
			name = $poptype$_wealth
			value = {
				value = num_of_$poptype$
				multiply = WEALTH_$poptype$_mod
			}
		}
	}
	
}

LAND_get_share_of_governorship_stockpile_var = {
	# Scope: province
	# Function: Get the amount of a governorship tradegood stockpile held in the province based on the number of trade buildings
	if = {
		limit = {
			governorship = { has_variable = $tradegood$_stockpile }
			trigger_if = {
				limit = {
					governorship = {
						has_variable = $tradegood$_stockpile
					}
				}
				governorship.var:$tradegood$_stockpile > 0
			}
		}
		set_variable = {
			name = $tradegood$_stockpile
			value = governorship.var:$tradegood$_stockpile
		}
		# Divide by the number of this poptype in the governorship
		if = {
			limit = {
				governorship.SHIPPING_depots_ports_river_ports_and_canals_bonus_governorship > 0
			}
			change_variable = {
				name = $tradegood$_stockpile
				divide = governorship.SHIPPING_depots_ports_river_ports_and_canals_bonus_governorship
			}
		}
		change_variable = {
			name = $tradegood$_stockpile
			multiply = SHIPPING_depots_ports_river_ports_and_canals_bonus
		}
	}
}

LAND_cache_values_for_new_governorship = {
	# Scope: province
	# Function: Set up variables at 0 to hold the sums of governorship-level pools owed to the new governorship to be formed (or merged into an existing governorship if being taken over by a country that already partially owns the same region)

	# Save the old governorship scope as well, so we can subtract these variables from it when we're transferring them over to the new governorship
	governorship = {
		save_scope_as = old_governorship # ISSUE: This will cease to exist once all land is taken in the old governorship. Needs to be rethought
	}
	set_variable = {
		name = old_governorship
		value = scope:old_governorship
	}
	
	every_tradegood_complex = {
		APPLY = LAND_get_share_of_governorship_stockpile_var
	}

	LAND_get_share_of_governorship_wealth_var = {
		poptype = upper_strata
	}
	LAND_get_share_of_governorship_wealth_var = {
		poptype = middle_strata
	}
	LAND_get_share_of_governorship_wealth_var = {
		poptype = lower_strata
	}
	LAND_get_share_of_governorship_wealth_var = {
		poptype = proletariat
	}
	LAND_get_share_of_governorship_wealth_var = {
		poptype = tribesmen
	}
	LAND_get_share_of_governorship_wealth_var = {
		poptype = slaves
	}
	LAND_get_share_of_governorship_wealth_var = {
		poptype = indentured
	}
}

LAND_update_new_governorship_var = {
	# Scope: province
	# Function: After the ownership has been transferred, update the new governorship's variables with the shares of stockpiles and wealth pools, while subtracting them from the old governorship if it still exist
	save_scope_as = origin_province
	if = {
		limit = {
			NOT = { flag:$variable$ = flag:proletariat_wealth } # I don't know why this is needed, but this poptype seems broken in this scenario
			exists = governorship
		}
		governorship ?= {
			if = {
				limit = {
					has_variable = $variable$
					scope:origin_province = {
						has_variable = $variable$
					}
				}
				change_variable = {
					name = $variable$
					add = scope:origin_province.var:$variable$
				}
			}
			else = {
				if = {
					limit = {
						scope:origin_province = {
							has_variable = $variable$
						}
						NOT = {
							has_variable = $variable$
						}
					}
					set_variable = {
						name = $variable$
						value = scope:origin_province.var:$variable$
					}
				}
				else = {
					set_variable = {
						name = $variable$
						value = $default$
					}
				}
			}
		}
	}

	if = {
		limit = {
			exists = governorship
		}
		if = { # Please, if you're reading this, ignore this jiggeryfuckery
			# I just needed the pain to go away
			limit = {
				governorship = {
					has_variable = proletariat_wealth
				}
				flag:$variable$ = flag:proletariat_wealth
			}
			governorship = {
				change_variable = {
					name = proletariat_wealth
					add = scope:origin_province.WEALTH_starting_proletariat_province
				}
			}
		}
		else = {
			governorship = {
				set_variable = {
					name = proletariat_wealth
					value = WEALTH_starting_proletariat
				}
			}
		}
	}

	var:old_governorship ?= {
		if = {
			limit = {
				has_variable = $variable$
				scope:origin_province = { has_variable = $variable$ }
			}
			change_variable = {
				name = $variable$
				subtract = scope:origin_province.var:$variable$
			}
		}
		
	}

	remove_variable = $variable$
}

LAND_update_new_governorship_stockpile = {
	# Scope: province
	# Function: After the ownership has been transferred, update the new governorship's variables with the shares of stockpiles and wealth pools, while subtracting them from the old governorship if it still exist
	save_scope_as = origin_province
	governorship ?= {
		if = {
			limit = {
				has_variable = $tradegood$_stockpile
				scope:origin_province = { has_variable = $tradegood$_stockpile }
			}
			change_variable = {
				name = $tradegood$_stockpile
				add = scope:origin_province.var:$tradegood$_stockpile
			}
		}
		else = {
			if = {
				limit = {
					scope:origin_province = {
						has_variable = $tradegood$_stockpile
					}
				}
				set_variable = {
					name = $tradegood$_stockpile
					value = scope:origin_province.var:$tradegood$_stockpile
				}
			}
			else = { # If this is a brand new governorship from uncolonised
				set_variable = {
					name = $tradegood$_stockpile
					value = 0
				}
			}
		}
	}

	if = {
		limit = {
			scope:origin_province = { has_variable = $tradegood$_stockpile }
		}
		var:old_governorship ?= {
			change_variable = {
				name = $tradegood$_stockpile
				subtract = scope:origin_province.var:$tradegood$_stockpile
			}
		}
	}
	

	remove_variable = $tradegood$_stockpile
}

LAND_transfer_provinces = {
	# Scope: Country
	# Function: Transfer ownership of a variable list of provinces to a tag
	# All land transfers have to be done using this method because of the way governorship vars are handled
	# Arguments required:
	# $target_provinces$ = List of target provinces, between 1 and x. If value is 0, the list will be ignored and only a single province will be transferred
	# $grantee$ = The receiving tag

	# Cache all the values from the old governorship

	# Count the number of pops and jobs in the old governorship, before the provinces were transferred over, to get the ratio for swapping wealth and stockpiles over if it's a partial change of ownership
		# Only do this IF they have a governorship

	# Count the number of pops and buildings in the target provinces

	# Get that as a ratio of the origin governorship's, giving you the percentage of the total wealth that should be transferred across

	# Save the values for the new governorship in the given province, just for holding. These will last until we hand them over to the new governorship

	# Give the provinces to the grantee

	# But first, select a random province that can be referenced by scope to act as a handler scope for all values during the transfer

	random_province = {
		limit = {
			NOT = {
				has_variable = is_province_transfer_handler
			}
		}
		set_variable = {
			name = is_province_transfer_handler
			days = 1
		}
		save_scope_as = province_transfer_handler
	}

	every_in_list = {
		list = $target_provinces$
		LAND_transfer_province = {
			grantee = $grantee$
		}
	}
	every_in_list = {
		list = $target_provinces$
		governorship ?= {
			if = {
				limit = {
					NOT = { is_in_list = governorship_vars_updated }
				}
				LAND_update_trade_center_and_internal_trade_scope = yes
				DEMAND_update_all_vars = yes
				add_to_list = governorship_vars_updated
			}
		}
	}
	every_in_list = {
		list = governorship_vars_updated
		remove_from_list = governorship_vars_updated
	}
}

LAND_transfer_province = {
	# Scope: province
	# Function: Transfer land between one province and another
		if = { # Only execute this block if the province is part of an existing governorship.
		# Otherwise, set up values from 0, and create local wealth based on the base values from the pops
			limit = {
				has_owner = yes
			}

			#governorship = {
			#	if = {
			#		limit = {
			#			NOT = {
			#				has_variable = governorship_counted
			#			}
			#		}
			#		LAND_cache_values_for_new_governorship = yes
			#	}
			#}

			LAND_cache_values_for_new_governorship = yes

		}

		FUNC_set_conquered_by = {
			grantee = $grantee$
		}

		LAND_update_new_governorship_var = {
			variable = upper_strata_wealth
			default = WEALTH_starting_upper_strata
		}
		LAND_update_new_governorship_var = {
			variable = middle_strata_wealth
			default = WEALTH_starting_middle_strata
		}
		LAND_update_new_governorship_var = {
			variable = lower_strata_wealth
			default = WEALTH_starting_lower_strata
		}
		LAND_update_new_governorship_var = {
			variable = proletariat_wealth
			default = WEALTH_starting_proletariat
		}
		LAND_update_new_governorship_var = {
			variable = tribesmen_wealth
			default = WEALTH_starting_tribesmen
		}
		LAND_update_new_governorship_var = {
			variable = slaves_wealth
			default = WEALTH_starting_slaves
		}
		LAND_update_new_governorship_var = {
			variable = indentured_wealth
			default = WEALTH_starting_indentured
		}
		set_variable = {
			name = governorship_population
			value = total_population
		}
		LAND_update_new_governorship_var = {
			variable = governorship_population
			default = 0
		}
		# WiP, etc...
		# TODO:
		# t1 and t2 education

		every_tradegood_complex = {
			APPLY = LAND_update_new_governorship_stockpile
		}

		remove_variable = old_governorship	
}

LAND_update_trade_center_and_internal_trade_scope = {
	# Scope: Governorship
	# Function: Create the trade center var in a governorship, if it does not exist
	# Called: Whenever a governorship changes hands, is created or needs to have its trade scopes updated
	if = {
		limit = {
			NOR = {
				has_variable = internal_trade_scope
				has_variable = trade_center
			}
		}
		TRADE_set_internal_trade_scope = yes
		TRADE_update_governorship_TZs = yes
	}
}

LAND_cache_all_old_governorship_values = {
	# Scope: Governorship
	# Function: Cache all the variables from a governorship that need to be carried over or split up if provinces change ownership
	# DEFUNCT - not in use

	save_scope_as = old_governorship

	random_province = {
		limit = {
			NOT = {
				has_variable = is_old_governorship_cache
			}
		}
		save_scope_as = old_governorship_cache
		set_variable = {
			name = is_old_governorship_cache
			days = 1
		}
	}

	set_variable = {
		name = old_governorship_cache
		value = scope:old_governorship_cache
	}

	scope:old_governorship_cache = {

		# WEALTH
		LAND_cache_old_governorship_value = {
			var_name = upper_strata_wealth
		}
		LAND_cache_old_governorship_value = {
			var_name = middle_strata_wealth
		}
		LAND_cache_old_governorship_value = {
			var_name = lower_strata_wealth
		}
		LAND_cache_old_governorship_value = {
			var_name = proletariat_wealth
		}
		LAND_cache_old_governorship_value = {
			var_name = tribesmen_wealth
		}
		LAND_cache_old_governorship_value = {
			var_name = slaves_wealth
		}

		every_tradegood_complex = {
			APPLY = LAND_cache_old_governorship_tradegood_stockpile
		}
	}

}

LAND_cache_old_governorship_tradegood_stockpile = {
	# Scope: province
	# Function: Save a tradegood stockpile from a governorship
	set_variable = {
		name = $var_name$_old
		value = scope:old_governorship.var:$tradegood$_stockpile
	}
}

LAND_cache_old_governorship_value = {
	# Scope: province
	# Function: Save named values from a governorship
	set_variable = {
		name = $var_name$_old
		value = scope:old_governorship.var:$var_name$
	}
}

LAND_release_from_list = {
	# Scope: Country which is creating a new country from the $list$ of provinces
	# Function: Create a new country from a list of provinces
	# Arguments will determine whether the new country is a subject, independent, and other values
	# args + accepted values:
	# list  			: list of provinces (NOT a variable list)
	# capital_location 	: by_population / p:provid
	# primary_culture 	: as_capital / culture script name
	# country_religion 	: dynamic / religion script name
	# country_name 		: dynamic / loc key
	# country_adj 		: dynamic / loc key
	# country_flag 		: dynamic / coat_of_arms script tag
	# give_overlord_hos : bool
	# as_subject_type 	: dynamic / independent
	# releaser 			: c:TAG / can be any value if the releaser country can be ignored


	$releaser$ = { save_scope_as = releaser }
	ordered_in_list = {
		# Ordered in order to pick the capital
		list = $list$
		# Select capital
		order_by = {
			value = 1
			if = {
				limit = {
					flag:$capital_location$ = flag:by_population
				}
				add = total_population
			}
		}
		max = 1
		save_scope_as = new_capital_scope

		# Overwrite with the predetermined capital scope if it is a valid province
		if = {
			limit = {
				any_province = {
					THIS = $capital_location$
				}
			}
			$capital_location$ = {
				save_scope_as = new_capital_scope
			}
		}

		create_country = {
			save_scope_as = new_country_scope
			# Set culture
            if = {
            	limit = {
            		flag:$primary_culture$ = flag:as_capital
            	}
            	set_primary_culture = scope:new_capital_scope.dominant_province_culture # TODO: Add conditions
            }
            else = {
            	set_primary_culture = $primary_culture$
            }
            # Set religion
            if = {
            	limit = {
            		flag:$country_religion$ = flag:as_capital
            	}
            	set_country_religion = scope:new_capital_scope.dominant_province_religion # TODO: Add conditions
            }
            # Set name
            set_variable = uses_custom_name
        }

    }
	LAND_transfer_provinces = {
		target_provinces = $list$
		grantee = scope:new_country_scope
	}
	# Determine subject status
	if = {
		limit = {
			flag:$as_subject_type$ = flag:dynamic
		}
		# Colony conditions:
		if = {
			limit = {
				scope:new_country_scope.capital_scope.civilization_value < scope:releaser.capital_scope.FUNC_capital_industrialisation_colonial
				scope:new_country_scope = {
					NOT = {
						any_owned_province = {
							any_neighbor_province = {
								owner = scope:releaser
							}
						}
					}
				}
			}
			FUNC_make_subject = {
				target = scope:new_country_scope
				type = client_colony
				overlord = scope:releaser
				#give_hos = scope:releaser.var:monarch_character
			}
		}
		else = {
			FUNC_make_subject = {
				target = scope:new_country_scope
				type = client_state
				overlord = scope:releaser
				#give_hos_character = scope:releaser.var:monarch_character
			}
		}
		# Territory conditions (same as colonial, but must be neighbouring releaser scope)
		# TODO
		
	}
	else_if = {
		limit = {
			flag:$as_subject_type$ = flag:independent
		}
		# Do nothing
	}
	
	scope:new_country_scope = {
		# Add monarch
		# TODO: Dynamic monarch assignment
		# Maybe give territories to members of the royal family?
		if = {
			limit = {
				trigger_if = {
					limit = {
						is_subject = yes
					}
					$give_overlord_hos$ = yes
					overlord = {
						has_variable = monarch_character
					}
				}
			}
			set_variable = {
				name = monarch_character
				value = overlord.var:monarch_character
			}
		}
		#Determine government type
		if = {
			limit = {
				flag:$government_type$ = flag:dynamic
			}
			change_government = viceroyalty
			# Also determine hidden royalty rank (i.e. county, principality, etc.)
		}

		if = {
			limit = {
				flag:$country_name$ = flag:dynamic
			}
			# Select name after full transfer of land, so that territory is accounted for in name
			COUNTRYNAME_select_custom_country_name = yes
		}
		else = {
			change_country_name = $country_name$
		}

		if = {
			limit = {
				flag:$country_adj$ = flag:dynamic
			}
			# Pass, already dealt with by COUNTRYNAME_select_custom_country_name
		}
		else = {
			change_country_adjective = $country_adj$
		}

		if = {
			limit = {
				flag:$country_flag$ = flag:dynamic
			}
			# Do nothing
		}
		else = {
			change_country_flag = $country_flag$
		}

		if = {
			limit = {
				flag:$country_color$ = flag:dynamic
			}
			# Do nothing
		}
		else = {
			change_country_color = $country_color$
		}

		trigger_event = {
			id = ECON_events.7
			days = 1
		}

	}

}


LAND_apply_custom_country_name = {
	if = {
		limit = {
			has_variable = uses_custom_name
		}
		change_country_name = $key$
	}
}

LAND_form_formable = {
	# Scope: Country
	# Function: Form the given formable tag
	if = {
		limit = {
			imp19c_can_form_country_trigger = {
				tag = $tag$
			}
		}
		save_scope_as = former

		# Change cosmetically, keep the same tag
		change_country_name = $tag_name$
		change_country_adjective = $tag_adj$
		change_country_color =  $colour$
		change_country_flag = $tag$

		every_in_list = {
			list = $tag$_claim_list
			add_claim = scope:former
		}

		set_variable = formed_$tag$
	}
}