MANUFACTURE_convert_resource = {
	# Scope: Governorship
	# Function: Convert one resource into a different manufactured resource, scaled to the amount of resource available
}

MANUFACTURE_combine_resources = {
	# Scope: Governorship
	# Function: Combine between 2 resources, that must all be available to work, to make a different manufactured resource
	# Only actually reduce the stockpile sizes if all necessary resources are available

	# This effect is called twice, with a different effect each time, first time to generate demand then second time to consume and produce the output

	# Phase 1: Generate demand
	if = {
		limit = {
			var:INDUSTRY_factories_assigned_$output$ > 0
		}
		if = {
			limit = {
				NOT = {
					has_variable = $input_1$_$input_2$_$output$_industry_demand_calculated
				}
			}
			# Scale to the size of the industry in this governorship
			set_variable = {
				name = actual_$input_1$_amt_$output$
				value = $input_1_amt$
			}
			change_variable = {
				name = actual_$input_1$_amt_$output$
				multiply = var:INDUSTRY_factories_assigned_$output$
			}
			set_variable = {
				name = actual_$input_2$_amt_$output$
				value = $input_2_amt$
			}
			change_variable = {
				name = actual_$input_2$_amt_$output$
				multiply = var:INDUSTRY_factories_assigned_$output$
			}
			set_variable = {
				name = actual_output_amt_$output$
				value = $output_amt$
			}
			change_variable = {
				name = actual_output_amt_$output$
				multiply = var:INDUSTRY_factories_assigned_$output$
			}

			# Update demand
			change_variable = {
				name = DEMAND_from_industry_$input_1$
				add = var:actual_$input_1$_amt_$output$
			}
			change_variable = {
				name = DEMAND_from_$output$_industry_$input_1$
				add = var:actual_$input_1$_amt_$output$
			}
			change_variable = {
				name = DEMAND_from_industry_$input_2$
				add = var:actual_$input_2$_amt_$output$
			}
			change_variable = {
				name = DEMAND_from_$output$_industry_$input_2$
				add = var:actual_$input_2$_amt_$output$
			}

			set_variable = $input_1$_$input_2$_$output$_industry_demand_calculated
		}
		# Phase 2: Manufacture
		else = {
			MANUFACTURE_consume_required_combined_resources = {
				input_1 = $input_1$
				input_1_amt = var:actual_$input_1$_amt_$output$
				input_2 = $input_2$
				input_2_amt = var:actual_$input_2$_amt_$output$
				output = $output$
				output_amt = var:actual_output_amt_$output$
			}
			remove_variable = $input_1$_$input_2$_$output$_industry_demand_calculated
		}
	}

}

MANUFACTURE_consume_required_combined_resources = {
	if = { # Only proceed if both resources are available here
		limit = {
				var:$input_1$_stockpile > 0.1
				var:$input_2$_stockpile > 0.1
		}
		remove_variable = $output$_industry_has_no_$input_1$
		remove_variable = $output$_industry_has_no_$input_2$
		# Consume from the stockpiles
		set_local_variable = {
			name = this_industry_production_$output$
			value = $output_amt$
		}
		if = {
			limit = {
				OR = {
					var:input_availability_$input_1$ < 1
					var:input_availability_$input_2$ < 1
				}
			}
			set_local_variable = {
				name = average_production_efficiency
				value = var:input_availability_$input_1$
			}
			change_local_variable = {
				name = average_production_efficiency
				add = var:input_availability_$input_2$
			}
			change_local_variable = {
				name = average_production_efficiency
				multiply = 0.5
			}
			change_local_variable = {
				name = this_industry_production_$output$
				multiply = local_var:average_production_efficiency
			}

			set_local_variable = {
				name = $input_1$_used
				value = $input_1_amt$
			}
			change_local_variable = {
				name = $input_1$_used
				multiply = var:input_availability_$input_1$
			}
			set_local_variable = {
				name = $input_2$_used
				value = $input_2_amt$
			}
			change_local_variable = {
				name = $input_2$_used
				multiply = var:input_availability_$input_2$
			}
			change_variable = {
				name = $input_1$_stockpile
				subtract = local_var:$input_1$_used
			}
			change_variable = {
				name = $input_2$_stockpile
				subtract = local_var:$input_2$_used
			}

			change_variable = {
				name = industry_production_$output$
				add = local_var:this_industry_production_$output$
			}
		}
		else = { # If all the required resources are available
			change_variable = {
				name = industry_production_$output$
				add = $output_amt$
			}
			change_variable = {
				name = $input_1$_stockpile
				subtract = $input_1_amt$
			}
			change_variable = {
				name = $input_2$_stockpile
				subtract = $input_2_amt$
			}
		}
	}
	else = {
		if = {
			limit = {
				var:$input_1$_stockpile = 0
			}
			set_variable = $output$_industry_has_no_$input_1$
		}
		if = {
			limit = {
				var:$input_2$_stockpile = 0
			}
			set_variable = $output$_industry_has_no_$input_2$
		}
	}
}

MANUFACTURE_use_bonus_resource = {
	# Scope: Governorship
	# Function: Use up a single resource that provides a bonus to the production of the main output

	# This effect is called twice, with a different effect each time, first time to generate demand then second time to consume and produce the output

	# Phase 1: Generate demand
	if = {
		limit = {
			var:INDUSTRY_factories_assigned_$output$ > 0
		}
		if = {
			limit = {
				NOT = {
					has_variable = $input$_$output$_bonus_industry_demand_calculated
				}
			}
			# Scale to the size of the industry in this governorship
			set_variable = {
				name = actual_bonus_$input$_amt_$output$
				value = $input_amt$
			}
			change_variable = {
				name = actual_bonus_$input$_amt_$output$
				multiply = var:INDUSTRY_factories_assigned_$output$
			}
			set_variable = {
				name = actual_bonus_amt_from_$input$_$output$
				value = $percentage_bonus$
			}
			change_variable = {
				name = actual_bonus_amt_from_$input$_$output$
				multiply = var:INDUSTRY_factories_assigned_$output$
			}

			# Update demand
			change_variable = {
				name = DEMAND_from_industry_$input$
				add = var:actual_bonus_$input$_amt_$output$
			}
			change_variable = {
				name = DEMAND_from_$output$_industry_$input$
				add = var:actual_bonus_$input$_amt_$output$
			}

			set_variable = $input$_$output$_bonus_industry_demand_calculated
		}
		else = {
			MANUFACTURE_consume_bonus_resource = {
				input = $input$
				output = $output$
				input_amt = var:actual_bonus_$input$_amt_$output$
				percentage_bonus = $percentage_bonus$
				essential = $essential$
			}
			remove_variable = $input$_$output$_bonus_industry_demand_calculated
		}
	}	
}

MANUFACTURE_consume_bonus_resource = {
	# Scope: Governorship
	# Function: Apply the demand, consume available resource and apply the modifier to production if available
	if = {
		limit = {
			var:$input$_stockpile > 0.1
		}
		set_local_variable = {
			name = this_industry_bonus_multiplier_$output$
			value = $percentage_bonus$
		}

		if = {
			limit = {
				var:input_availability_$input$ < 1
			}
			change_local_variable = {
				name = this_industry_bonus_multiplier_$output$
				multiply = var:input_availability_$input$
			}
		}

		set_local_variable = {
			name = input_amt_used
			value = $input_amt$
		}

		if = {
			limit = {
				var:input_availability_$input$ < 1
			}
			change_local_variable = {
				name = input_amt_used
				multiply = var:input_availability_$input$
			}
		}
		change_variable = {
			name = $input$_stockpile
			subtract = local_var:input_amt_used
		}

		change_variable = {
			name = industry_production_bonus_$output$
			add = local_var:this_industry_bonus_multiplier_$output$
		}
	}
	else = {
		if = {
			limit = {
				$essential$ = 1
			}
			change_variable = {
				name = industry_production_$output$
				multiply = 0
			}
		}
	}
}

MANUFACTURE_reset_demand_from_industry = {
	# Scope: governorship
	# Function: Set the demand from every industry for the given tradegood to 0, so that it can be recalculated when manufacturing takes place
	# Generic
	set_variable = {
		name = DEMAND_from_industry_$tradegood$
		value = 0
	}
	# Specific industries
	set_variable = {
		name = DEMAND_from_glass_industry_$tradegood$
		value = 0
	}
	set_variable = {
		name = DEMAND_from_machine_parts_industry_$tradegood$
		value = 0
	}
	set_variable = {
		name = DEMAND_from_clothing_industry_$tradegood$
		value = 0
	}
	set_variable = {
		name = DEMAND_from_bronze_industry_$tradegood$
		value = 0
	}
	set_variable = {
		name = DEMAND_from_luxury_clothing_industry_$tradegood$
		value = 0
	}
}

MANUFACTURE_reset_all_tradegood_demand = {
	every_tradegood_complex = {
		APPLY = MANUFACTURE_reset_demand_from_industry
	}
}

MANUFACTURE_get_all_input_availability = {
	# Scope: Governorship
	# Function: Get the % of each resource available for all industries, which will be used to multiply down efficiency when all industries use up available resources simultaneously
	every_tradegood_complex = {
		APPLY = MANUFACTURE_get_input_availability
	}
}

MANUFACTURE_get_input_availability = { # Should fire AFTER CONSUMER GOODS CONSUMPTION so that consumer usage is prioritised
	set_variable = {
		name = input_availability_$tradegood$
		value = var:$tradegood$_stockpile
	}
	if = {
		limit = {
			var:$tradegood$_stockpile > 0
			has_variable = DEMAND_from_industry_$tradegood$
		}
		if = {
			limit = {
				var:DEMAND_from_industry_$tradegood$ > 0
			}
			change_variable = {
				name = input_availability_$tradegood$
				divide = var:DEMAND_from_industry_$tradegood$
			}
		}
	}
	if = {
		limit = {
			var:input_availability_$tradegood$ > 1
		}
		set_variable = {
			name = input_availability_$tradegood$
			value = 1
		}
	}
}

MANUFACTURE_reset_production = {
	if = {
		limit = {
			NOT = {
				has_local_variable = MANUFACTURE_production_phase
			}
		}
		debug_log = "Resetting production for  $output$"
		debug_log_scopes = yes
		set_variable = {
			name = industry_production_$output$
			value = 0
		}
		set_variable = {
			name = industry_production_bonus_$output$
			value = 1 # Multiplier, modified by bonus resources
		}
	}
}

MANUFACTURE_produce_final = {
	if = {
		limit = {
			has_local_variable = MANUFACTURE_production_phase
		}
		debug_log = "Producing  $output$"
		debug_log_scopes = yes
		change_variable = {
			name = industry_production_$output$
			multiply = local_var:industry_production_bonus_$output$
		}
		change_variable = {
			name = $output$_stockpile
			add = var:industry_production_$output$
		}
	}
}

MANUFACTURE_all = {
	#MANUFACTURE_reset_all_tradegood_demand = yes

	MANUFACTURE_reset_production = {
		output = glass
	}
	MANUFACTURE_reset_production = {
		output = clothing
	}
	MANUFACTURE_reset_production = {
		output = luxury_clothing
	}
	MANUFACTURE_reset_production = {
		output = bronze
	}
	MANUFACTURE_reset_production = {
		output = machine_parts
	}

	MANUFACTURE_glass = yes
	MANUFACTURE_clothing = yes
	MANUFACTURE_luxury_clothing = yes
	MANUFACTURE_bronze = yes
	MANUFACTURE_machine_parts = yes

	MANUFACTURE_produce_final = {
		output = glass
	}
	MANUFACTURE_produce_final = {
		output = clothing
	}
	MANUFACTURE_produce_final = {
		output = luxury_clothing
	}
	MANUFACTURE_produce_final = {
		output = bronze
	}
	MANUFACTURE_produce_final = {
		output = machine_parts
	}
}

MANUFACTURE_example = {
	# TEMPLATE
	# Scope: Governorship
	# Function: Increase the glass stockpile according to the availability of resources in the glass recipe
	# Called: At game start, then every quarter after trade, by the master MANUFACTURE effect
	MANUFACTURE_combine_resources = {
		input_1 = coal
		input_1_amt = 1

		input_2 = inorganic_compounds
		input_2_amt = 1

		output = glass
		output_amt = 2
	}

	MANUFACTURE_use_bonus_resource = {
		input = coal
		input_amt = 1

		output = glass
		percentage_bonus = 1

		essential = 0 # If 1, no output will be produced if this input is unavailable. Otherwise, the bonus will simply be skipped
	}
}

MANUFACTURE_glass = {
	# Scope: Governorship
	# Function: Increase the glass stockpile according to the availability of resources in the glass recipe
	# Called: At game start, then every quarter after trade, by the master MANUFACTURE effect


	MANUFACTURE_combine_resources = {
		input_1 = coal
		input_1_amt = 1

		input_2 = inorganic_compounds
		input_2_amt = 2

		output = glass
		output_amt = 4
	}

	MANUFACTURE_use_bonus_resource = {
		input = lead
		input_amt = 1

		output = glass
		percentage_bonus = 0.75

		essential = 0
	}

	MANUFACTURE_use_bonus_resource = {
		input = machine_parts
		input_amt = 1

		output = rare_alloys
		percentage_bonus = 2

		essential = 0
	}

}

MANUFACTURE_rare_alloys = {
	# TEMPLATE
	# Scope: Governorship
	# Function: Increase the glass stockpile according to the availability of resources in the glass recipe
	# Called: At game start, then every quarter after trade, by the master MANUFACTURE effect
	MANUFACTURE_combine_resources = {
		input_1 = inorganic_compounds
		input_1_amt = 1

		input_2 = coal
		input_2_amt = 1

		output = rare_alloys
		output_amt = 1
	}

	MANUFACTURE_use_bonus_resource = {
		input = lead
		input_amt = 1

		output = rare_alloys
		percentage_bonus = 1

		essential = 0
	}

	MANUFACTURE_use_bonus_resource = {
		input = tin
		input_amt = 1

		output = rare_alloys
		percentage_bonus = 1

		essential = 0 
	}

	MANUFACTURE_use_bonus_resource = {
		input = iron
		input_amt = 1

		output = rare_alloys
		percentage_bonus = 0.5

		essential = 0 
	}

	MANUFACTURE_use_bonus_resource = {
		input = copper
		input_amt = 1

		output = rare_alloys
		percentage_bonus = 0.5

		essential = 0 
	}

	MANUFACTURE_use_bonus_resource = {
		input = chemicals
		input_amt = 1

		output = rare_alloys
		percentage_bonus = 2

		essential = 0
	}

	MANUFACTURE_use_bonus_resource = {
		input = machine_parts
		input_amt = 1

		output = rare_alloys
		percentage_bonus = 2

		essential = 0
	}

}

MANUFACTURE_clothing = {
	# Scope: Governorship
	# Function: Increase the glass stockpile according to the availability of resources in the glass recipe
	# Called: At game start, then every quarter after trade, by the master MANUFACTURE effect


	MANUFACTURE_combine_resources = {
		input_1 = textile_fibres
		input_1_amt = 5

		input_2 = livestock
		input_2_amt = 1

		output = clothing
		output_amt = 4
	}

	MANUFACTURE_use_bonus_resource = {
		input = wool
		input_amt = 5

		output = clothing
		percentage_bonus = 0.7

		essential = 0
	}

	MANUFACTURE_use_bonus_resource = {
		input = machine_parts
		input_amt = 1

		output = clothing
		percentage_bonus = 2

		essential = 0
	}

}

MANUFACTURE_luxury_clothing = {
	# Scope: Governorship
	# Function: Increase the glass stockpile according to the availability of resources in the glass recipe
	# Called: At game start, then every quarter after trade, by the master MANUFACTURE effect


	MANUFACTURE_combine_resources = {
		input_1 = textile_fibres
		input_1_amt = 5

		input_2 = livestock
		input_2_amt = 1

		output = luxury_clothing
		output_amt = 3
	}

	MANUFACTURE_use_bonus_resource = {
		input = wool
		input_amt = 1

		output = clothing
		percentage_bonus = 0.1

		essential = 0
	}

	MANUFACTURE_use_bonus_resource = {
		input = gold
		input_amt = 1

		output = clothing
		percentage_bonus = 1

		essential = 0
	}

	MANUFACTURE_use_bonus_resource = {
		input = silver
		input_amt = 1

		output = clothing
		percentage_bonus = 0.5

		essential = 0
	}

	MANUFACTURE_use_bonus_resource = {
		input = fur
		input_amt = 5

		output = clothing
		percentage_bonus = 1

		essential = 0
	}

	MANUFACTURE_use_bonus_resource = {
		input = gems
		input_amt = 1

		output = clothing
		percentage_bonus = 1

		essential = 0
	}

	MANUFACTURE_use_bonus_resource = {
		input = machine_parts
		input_amt = 1

		output = clothing
		percentage_bonus = 2

		essential = 0
	}

}

MANUFACTURE_bronze = {
	# Scope: Governorship
	# Function: Increase the glass stockpile according to the availability of resources in the glass recipe
	# Called: At game start, then every quarter after trade, by the master MANUFACTURE effect


	MANUFACTURE_combine_resources = {
		input_1 = tin
		input_1_amt = 1

		input_2 = copper
		input_2_amt = 4

		output = bronze
		output_amt = 5
	}

	MANUFACTURE_use_bonus_resource = {
		input = coal
		input_amt = 2

		output = bronze
		percentage_bonus = 1

		essential = 1
	}

	MANUFACTURE_use_bonus_resource = {
		input = machine_parts
		input_amt = 1

		output = bronze
		percentage_bonus = 2

		essential = 0
	}

}

MANUFACTURE_machine_parts = {
	# Scope: Governorship
	# Function: Increase the glass stockpile according to the availability of resources in the glass recipe
	# Called: At game start, then every quarter after trade, by the master MANUFACTURE effect


	MANUFACTURE_combine_resources = {
		input_1 = copper
		input_1_amt = 2

		input_2 = iron
		input_2_amt = 4

		output = machine_parts
		output_amt = 5
	}

	MANUFACTURE_use_bonus_resource = {
		input = coal
		input_amt = 1

		output = clothing
		percentage_bonus = 1

		essential = 0
	}

	MANUFACTURE_use_bonus_resource = {
		input = bronze
		input_amt = 1

		output = clothing
		percentage_bonus = 0.75

		essential = 0
	}

	MANUFACTURE_use_bonus_resource = {
		input = steel
		input_amt = 5

		output = clothing
		percentage_bonus = 2

		essential = 0
	}

	MANUFACTURE_use_bonus_resource = {
		input = machine_parts
		input_amt = 1

		output = clothing
		percentage_bonus = 2

		essential = 0
	}

}