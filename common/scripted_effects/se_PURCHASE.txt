
#*************************************************
#*            The Purchase Order Plan            *
#*************************************************


#1. Wealth from pops in the governorship should all be pooled up to determine the "Purchasing Power" of the governorship for that quarter.
#	- This would be "WEALTH_governorship_total"

#2. Then sort demand by how important the trade good is.

#3. The purchase order will then be made to nearby trade zones that have an available stockpile for the goods that are in demand.

#4. Once the order is sent the movement cost between the trade zones can be factored in along with the price of the good. This will give the final price of the order.

#5. After the order is made the goods will be "moved" into the stockpile of the governorship that ordered them.

# INTERNAL PURCHASES
# Run these first, checking if demand can be fulfilled within the country or customs union

PURCHASE_make_internal_shopping_list = {
	# Create a list of items that will need to be bought to satisfy demand this quarter
	# Scope = governorship

	# Iterate manually through all the stockpiles
	# tradegood = the tradegood to order
	# category = the category under which to log spends, so the costs can be correctly attributed to buyers. See wiki for which good is which https://github.com/sobisonator/imp19c/wiki/Trade#tradegood-groups

	# COMMENTED OUT - CURRENTLY NOT FIRING THE EFFECTS AS EXPECTED
	#every_essential_goods_megacomplex = {
	#	APPLY = PURCHASE_check_shopping_internal
	#	CATEGORY = essential_goods
	#}
	#every_luxury_goods_megacomplex = {
	#	APPLY = PURCHASE_check_shopping_internal
	#	CATEGORY = luxury_goods
	#}
	#every_business_goods_megacomplex = { 
	#	APPLY = PURCHASE_check_shopping_internal
	#	CATEGORY = business_goods
	#}
	#every_military_goods_megacomplex = {
	#	APPLY = PURCHASE_check_shopping_internal
	#	CATEGORY = military_goods
	#}

	PURCHASE_check_shopping_internal = { 
		tradegood = grain 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = fish 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = livestock 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = tropical_fruit 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = mediterranean_fruit 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = temperate_fruit 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = processed_foods 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = clothing 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = furniture 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = pharmaceuticals 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = coal 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = whales 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = alcohol 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = gems 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = opium 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = tobacco 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = chocolate 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = coffee 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = tea 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = spices 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = sugar 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = luxury_clothing 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = luxury_furniture 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = glass 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = motors 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = fur 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = industrial_fibres 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = textile_fibres 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = wool 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = silk 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = wood 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = stone 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = sulphur 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = peat 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = tin 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = inorganic_compounds 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = copper 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = iron 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = gold 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = silver 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = dye 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = lead 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = oil 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = hardwood 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = rubber 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = salt 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = electronics 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = construction_materials 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = steel 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = bronze 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = machine_parts 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = chemicals 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = naval_supplies 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = steel_ships 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = wooden_ships 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = petrochemicals 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = early_munitions 
		category = military_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = late_munitions 
		category = military_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = early_artillery 
		category = military_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = late_artillery 
		category = military_goods
	}
}

PURCHASE_check_shopping_internal = {
	# Scope: governorship
	# Function: The sole purpose of this effect is to only run the purchase order effect if there's actually demand, therefore all of its arguments are basically proxies for the purchase order effect.

	# It has to be this way because you can't use a < operator between a svalue and a var
	# Check if the stockpile is big enough to satisfy demand
	set_local_variable = {
		name = l_demand_diff
		value = DEMAND_$tradegood$
	}
	change_local_variable = {
		name = l_demand_diff
		subtract = var:$tradegood$_stockpile
	}
	if = { # It has to be this way I promise
		limit = {
			local_var:l_demand_diff > 0
		}
		set_local_variable = {
			name = l_order_size
			value = DEMAND_$tradegood$
		}
		change_local_variable = {
			name = l_order_size
			subtract = var:$tradegood$_stockpile
		}
		if = {
			limit = {
				local_var:l_order_size > var:governorship_trade_capacity
			}
			set_local_variable = {
				name = l_order_size
				value = var:governorship_trade_capacity
			}
		}
		# Below is commented out: limits the import capacity based on infrastructure
		# Disabled during testing because buildings aren't set up yet
		#if = {
		#	limit = {
		#		local_var:l_order_size > TRADE_governorship_infrastructure_capacity_svalue
		#	}
		#	set_local_variable = {
		#		name = l_order_size
		#		value = TRADE_governorship_infrastructure_capacity_svalue
		#	}
		#}
		PURCHASE_order_internal = {
			tradegood = $tradegood$
			#for_stockpile = $for_stockpile$
			#from_stockpile = $from_stockpile$
			order_size = local_var:l_order_size
			category = $category$
			#goods_price = $goods_price$
			#internal_sold_total = $internal_sold_total$
		}
	}
}

PURCHASE_order_internal = {
	# Scope: governorship
	# Buy from the internal trade scope's stockpile, be it country or customs union

	# Format of arguments:
	# $for_stockpile$ = grain_stockpile, the stockpile in the governorship scope
	# $from_stockpile$ = grain_stockpile_internal, the stockpile from the internal trade scope with the sum of all goods available for internal trade
	# $order_size$ = local variable, local_var:l_order_size
	# $internal_sold_total$ = internal_sold_total_grain

	debug_log = "Making a purchase order for  $tradegood$"

	var:internal_trade_scope = {
		set_local_variable = {
			name = i_demand_diff
			value = $order_size$
		}
		change_local_variable = {
			name = i_demand_diff
			subtract = var:$tradegood$_stockpile_internal
		}
	}

	if = { # Only transfer the goods if they from stockpile is actually bigger than the order size
		limit = {
			var:internal_trade_scope = { local_var:i_demand_diff < 0 }
		}
		# Add to the purchasing governorship's stockpile
		PURCHASE_transfer_goods_internally = {
			tradegood = $tradegood$
			#target_stockpile = $for_stockpile$
			amount = $order_size$
			category = $category$
			#from_stockpile = $from_stockpile$
			#local_price = $goods_price$
			#internal_sold_total = $internal_sold_total$
		}
	}

	# Give the share of sale income to the selling governorships
}

PURCHASE_transfer_goods_internally = {
	# Scope: governorship
	# Function: Put goods in the purchasing governorship, subtract goods from the internal trade scope and allocate trade-scope-wide revenue accordingly.

	# Format of arguments:
	# $target_stockpile$ = grain_stockpile, derived from $for_stockpile$ in PURCHASE_order_internal, the stockpile in the governorship being filled
	# $amount$ = local variable, derived from $order_size$ in PURCHASE_order_internal
	# $from_stockpile$ = grain_stockpile_internal, derived from $from_stockpile$ in PURCHASE_order_internal, this is the available stockpile on the whole internal market
	# $local_price$ = local_price_grain, gets the local price of grain from the governorship owner's capital
	# $internal_sold_total$ = internal_sold_total_grain, the total amount sold in the internal trade scope, used by the effect to distribute the cut of amount sold to contributing governorships

	# ADD TO BUYER'S STOCKPILE
	change_variable = {
		name = $tradegood$_stockpile
		add = $amount$
	}

	# SEND MONEY TO THE POOL
	set_local_variable = {
		name = this_spend
		value = $amount$
	}

	# SUBTRACT FROM THE INTERNAL AVAILABLE STOCKPILE
	var:internal_trade_scope = {
		change_variable = {
			name = $tradegood$_stockpile_internal
			subtract = local_var:this_spend
		}
	}

	# Transport costs are fully discounted for internal trade
	change_local_variable = { # use the price from the governorship capital's TZ
		name = this_spend
		multiply = owner.capital_scope.governorship.var:trade_center.var:local_price_$tradegood$
	}

	# SUBTRACT MONEY FROM THE BUYING GOVERNORSHIP'S BALANCE
	# The balance will then be applied to the governorship wealth pools at the end of the purchase phase

	change_variable = {
		name = governorship_this_quarter_spend_on_$category$
		subtract = local_var:this_spend # Must be negative so it can be used with add_treasury
	}

	# ADD THE AMOUNT SOLD TO THE TOTAL IN THE TRADE SCOPE
	var:internal_trade_scope = {
		change_variable = {
			name = internal_sold_total_$tradegood$
			add = $amount$
		}
		change_variable = {
			name = internal_total_revenue_$tradegood$
			add = local_var:this_spend
		}
	}
	
}

PURCHASE_split_all_costs = {
	# Scope: governorship
	# Function: Split the spend for each category of tradegoods between the appropriate pop groups
	PURCHASE_split_costs = {
		category = essential_goods
	}
	PURCHASE_split_costs = {
		category = luxury_goods
	}
	PURCHASE_split_costs = {
		category = business_goods
	}
	PURCHASE_split_costs = {
		category = military_goods
	}
}

PURHCASE_calculate_actual_share_of_spend = {
	set_local_variable = {
		name = this_spend_on_$category$
		value = var:governorship_this_quarter_spend_on_$category$
	}
	change_local_variable = {
		name = this_spend_on_$category$
		multiply = var:spender_share_$category$_$spender$
	}
}

PURCHASE_split_costs = {
	# Scope: governorship
	# Split the spend for a single category of imported goods
	PURCHASE_apply_internal_sales_tax = {
		category = $category$
	}

	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = the_state
	}
	owner = {
		add_treasury = local_var:this_spend_on_$category$
	}
	# Upper strata
	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = upper_strata
	}
	change_variable = {
		name = upper_strata_wealth
		add = local_var:this_spend_on_$category$
	}
	# Middle strata
	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = middle_strata
	}
	change_variable = {
		name = middle_strata_wealth
		add = local_var:this_spend_on_$category$
	}
	# Lower strata
	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = lower_strata
	}
	change_variable = {
		name = lower_strata_wealth
		add = local_var:this_spend_on_$category$
	}
	# Tribesmen
	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = tribesmen
	}
	change_variable = {
		name = tribesmen_wealth
		add = local_var:this_spend_on_$category$
	}
	# Indentured
	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = indentured
	}
	change_variable = {
		name = indentured_wealth
		add = local_var:this_spend_on_$category$
	}
	# Slaves
	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = slaves
	}
	change_variable = {
		name = slaves_wealth
		add = local_var:this_spend_on_$category$
	}
}


PURCHASE_apply_internal_sales_tax = {
	set_local_variable = {
		name = this_internal_sales_taxed
		value = var:governorship_this_quarter_spend_on_$category$
	}

	change_local_variable = {
		name = this_internal_sales_taxed
		multiply = owner.var:internal_sales_tax_rate
	}

	change_variable = {
		name = governorship_quarterly_revenue_from_internal_sales_tax_$category$
		add = local_var:this_internal_sales_taxed
	}

	owner = {
		change_variable = {
			name = national_quarterly_revenue_from_internal_sales_tax_$category$
			add = local_var:this_internal_sales_taxed
		}
	}
	
	change_variable = {
		name = governorship_this_quarter_spend_on_$category$
		add = local_var:this_internal_sales_taxed # This value is negative
	}
}

# EXTERNAL PURCHASES

PURHCASE_make_shopping_list = {
	# Create a list of items that will need to be bought to satisfy demand this quarter
	# Scope = governorship

	# Iterate automatically through all the stockpiles
	# WiP - add iterate through all tradegoods effect
	PURCHASE_check_shopping = {
		tradegood = grain
		# demand = DEMAND_grain
		# stockpile = grain_stockpile
	}
}

PURCHASE_check_shopping = { # Check if it's necessary to go shopping for X stockpile
	if = {
		limit = {
			$demand$ > var:$stockpile$
		}
		PURCHASE_order = {
			for_stockpile = var:$stockpile$
		}
	}
}

PURHCASE_order = {
	# Every governorship does this for every deficit every quarter
	# $for_stockpile$ = the stockpile sent from the shopping list scripted effect when the PO is created
}


PURCHASE_reset_quarterly_var = {
	#Reset puchase variable every quarter for every country for every governorship
	if = {
		limit = {
			NOT = { has_variable = purchase_power }
		}
		set_variable = {
			name = purchase_power
			value = 0
		}
	}
	else = {
		remove_variable = purchase_power
		set_variable = {
			name = purchase_power
			value = 0
		}
	}
	change_variable = {
		name = purchase_power
		add = WEALTH_governorship_total
	}
}

PURCHASE_rank_deals = { # Rank tradezones by total costs for the named tradegood
	# Scope: Trade center
	# This effect creates a list of the best deals with the best deal first, including a variable that stores the best deal.
	# This somehow needs to add together the TZ's price for selling the named good + the travel cost variable
	ordered_in_global_list = {
		variable = list_of_trade_centers

		# use a switch here too
		# And for each TZ, create a variable that is total_cost
		# total_cost = travel_cost + tradegood_price
		# Then compare all those variables and rank them
		# Create a special variable for top slot, for quick reference
		# And have a mechanism in place to swap to second best, etc. as the top slot runs out

		limit = { # Only check prices where there are goods available
			var:$goods_stockpile$ > 0
		}
		order_by = var:$tradegood_price$ # Order based on that TZ's price for the named tradegood
		PREV = {
			set_variable = {
				name = $best_value_for_goods$ # format = best_value_for_grain
				value = PREV # The TZ scope
			}
		}
	}
}