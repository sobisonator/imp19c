
#*************************************************
#*            The Purchase Order Plan            *
#*************************************************


#1. Wealth from pops in the governorship should all be pooled up to determine the "Purchasing Power" of the governorship for that quarter.
#	- This would be "WEALTH_governorship_total"

#2. Then sort demand by how important the trade good is.

#3. The purchase order will then be made to nearby trade zones that have an available stockpile for the goods that are in demand.

#4. Once the order is sent the movement cost between the trade zones can be factored in along with the price of the good. This will give the final price of the order.

#5. After the order is made the goods will be "moved" into the stockpile of the governorship that ordered them.

# INTERNAL PURCHASES
# Run these first, checking if demand can be fulfilled within the country or customs union

PURCHASE_make_internal_shopping_list = {
	# Create a list of items that will need to be bought to satisfy demand this quarter
	# Scope = governorship

	# Iterate manually through all the stockpiles
	# tradegood = the tradegood to order
	# category = the category under which to log spends, so the costs can be correctly attributed to buyers. See wiki for which good is which https://github.com/sobisonator/imp19c/wiki/Trade#tradegood-groups

	# COMMENTED OUT - CURRENTLY NOT FIRING THE EFFECTS AS EXPECTED
	#every_essential_goods_megacomplex = {
	#	APPLY = PURCHASE_check_shopping_internal
	#	CATEGORY = essential_goods
	#}
	#every_luxury_goods_megacomplex = {
	#	APPLY = PURCHASE_check_shopping_internal
	#	CATEGORY = luxury_goods
	#}
	#every_business_goods_megacomplex = { 
	#	APPLY = PURCHASE_check_shopping_internal
	#	CATEGORY = business_goods
	#}
	#every_military_goods_megacomplex = {
	#	APPLY = PURCHASE_check_shopping_internal
	#	CATEGORY = military_goods
	#}

	PURCHASE_check_shopping_internal = { 
		tradegood = grain 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = fish 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = livestock 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = vegetables 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = tropical_fruit 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = mediterranean_fruit 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = temperate_fruit 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = processed_foods 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = clothing 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = furniture 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = pharmaceuticals 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = coal 
		category = essential_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = whales 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = alcohol 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = gems 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = opium 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = tobacco 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = chocolate 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = coffee 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = tea 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = spices 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = sugar 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = luxury_clothing 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = luxury_furniture 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = glass 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = motors 
		category = luxury_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = fur 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = industrial_fibres 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = textile_fibres 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = wool 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = silk 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = wood 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = stone 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = sulphur 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = peat 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = tin 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = inorganic_compounds 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = copper 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = iron 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = gold 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = silver 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = dye 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = lead 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = oil 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = hardwood 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = rubber 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = salt 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = electronics 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = construction_materials 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = steel 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = bronze 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = machine_parts 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = chemicals 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = naval_supplies 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = steel_ships 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = wooden_ships 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = petrochemicals 
		category = business_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = early_munitions 
		category = military_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = late_munitions 
		category = military_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = early_artillery 
		category = military_goods
	}
	PURCHASE_check_shopping_internal = { 
		tradegood = late_artillery 
		category = military_goods
	}
}

PURCHASE_set_order_size = {
	# Scope: governorship
	# Function: Check if there are enough goods in the target tradezone stockpile
	# It has to be this way because you can't use a < operator between a svalue and a var
	# Check if the stockpile is big enough to satisfy demand
	if = { # It has to be this way I promise
		limit = {
			local_var:l_demand_diff > 0
		}
		set_variable = {
			name = l_order_size
			value = DEMAND_$tradegood$
		}
		change_variable = {
			name = l_order_size
			subtract = var:$tradegood$_stockpile
		}
		if = { # Limit the amount imported up to trade capacity
			limit = {
				var:l_order_size > TRADE_governorship_trade_capacity
			}
			set_variable = {
				name = l_order_size
				value = var:governorship_trade_capacity
			}
		}
	}
	else = {
		set_variable = {
			name = l_order_size
			value = 0
		}
	}
}

PURCHASE_check_shopping_internal = {
	# Scope: governorship
	# Function: The sole purpose of this effect is to only run the purchase order effect if there's actually demand, therefore all of its arguments are basically proxies for the purchase order effect.
	save_scope_as = purchaser_governorship

	### BEGIN INTERNAL

	if = { # Only process this if the internal trade scope has any of the goods to offer.
		limit = {
			var:internal_trade_scope = {
				var:$tradegood$_stockpile_total > 0
			}
		}
		set_local_variable = {
			name = l_demand_diff
			value = DEMAND_$tradegood$ 
		}
		change_local_variable = {
			name = l_demand_diff
			subtract = var:$tradegood$_stockpile
		}

		# If the trade center for this internal tradescope tradescope has not yet ranked this good this quarter, rank it first. Otherwise, skip this step.
		# TODO: Think of a way to check this. Set a variable unique to the internal trade scope / trade center combination. Should be easy enough...

		# Returns var:l_order_size
		PURCHASE_set_order_size = {
			tradegood = $tradegood$
		}
		# If the preferred supplier for the goods is external, and internal trade is not preferred by law, then go external first.
		#if = {
		#	limit = {
		#		NOT = { var:preferred_supplier = var:internal_trade_scope }
		#	}
		#}
		if = {
			limit = {
				var:l_order_size > 0
			}
			if = {
				limit = {
					NOT = { has_variable = 1st_rank_internal_supplier_$tradegood$ }
				}
				PURCHASE_get_preferred_tradezone_internal = {
					tradegood = $tradegood$
					order_size = scope:purchaser_governorship.var:l_order_size
				} # Creates a set of variables in the trade center
			}
			PURCHASE_order_internal = {
				tradegood = $tradegood$
				order_size = scope:purchaser_governorship.var:l_order_size
				category = $category$
			}
		}
	}

	### END INTERNAL

	# EXTERNAL
	# If the stockpile is still not full, try to purchase externally.
	# Reset demand diff
	set_local_variable = {
		name = l_demand_diff
		value = DEMAND_$tradegood$
	}
	change_local_variable = {
		name = l_demand_diff
		subtract = var:$tradegood$_stockpile
	}

	# Returns var:l_order_size
	PURCHASE_set_order_size = {
		tradegood = $tradegood$
	}

	# debug_log = "About to check purchase order external trigger"

	if = {
		limit = {
			AND = {
				local_var:l_demand_diff > 0
				owner = { has_variable_list = list_of_trade_partners_all_categories }
			}
		}
		# debug_log = "Purchase order external triggers YES"
		PURCHASE_order_external = {
			tradegood = $tradegood$
			order_size = scope:purchaser_governorship.var:l_order_size
			category = $category$
		}
	}
}

PURCHASE_check_shopping_internal_pre_ranked = {
	# Scope: governorship
	# Function: The sole purpose of this effect is to only run the purchase order effect if there's actually demand, therefore all of its arguments are basically proxies for the purchase order effect.
	save_scope_as = purchaser_governorship

	### BEGIN INTERNAL

	if = { # Only process this if the internal trade scope has any of the goods to offer.
		limit = {
			var:internal_trade_scope = {
				var:$tradegood$_stockpile_total > 0
			}
		}
		set_local_variable = {
			name = l_demand_diff
			value = DEMAND_$tradegood$ 
		}
		change_local_variable = {
			name = l_demand_diff
			subtract = var:$tradegood$_stockpile
		}

		# If the trade center for this internal tradescope tradescope has not yet ranked this good this quarter, rank it first. Otherwise, skip this step.
		# TODO: Think of a way to check this. Set a variable unique to the internal trade scope / trade center combination. Should be easy enough...

		# Returns var:l_order_size
		PURCHASE_set_order_size = {
			tradegood = $tradegood$
		}

		#if = {
		#	limit = {
		#		NOT = { has_variable = 1st_rank_internal_supplier_$tradegood$ }
		#	}
		#	PURCHASE_get_preferred_tradezone_internal = {
		#		tradegood = $tradegood$
		#		order_size = scope:purchaser_governorship.var:l_order_size
		#	} # Creates a set of variables in the trade center
		#}
		# If the preferred supplier for the goods is external, and internal trade is not preferred by law, then go external first.
		#if = {
		#	limit = {
		#		NOT = { var:preferred_supplier = var:internal_trade_scope }
		#	}
		#}
		set_local_variable = {
			name = TZs_tried
			value = 0
		}
		while = {
			limit = {
				var:l_order_size > 0
				local_var:TZs_tried < var:internal_trade_scope.num_TZ_in_ITS
			}
			debug_log = "Attempting a purchase order as order size is still above 0"
			PURCHASE_order_internal = {
				tradegood = $tradegood$
				order_size = scope:purchaser_governorship.var:l_order_size
				category = $category$
			}
			change_local_variable = {
				name = TZs_tried
				add = 1
			}
		}
	}

	### END INTERNAL

	# EXTERNAL
	# Order size should be above 0 already

	# debug_log = "About to check purchase order external trigger"

	if = {
		limit = {
			AND = {
				local_var:l_demand_diff > 0
				owner = { has_variable_list = list_of_trade_partners_all_categories }
			}
		}
		# debug_log = "Purchase order external triggers YES"
		PURCHASE_order_external = {
			tradegood = $tradegood$
			order_size = scope:purchaser_governorship.var:l_order_size
			category = $category$
		}
	}
}

PURCHASE_rank_supplier_zone_internal = {
	# Scope: Trade center province, scoped from a purchaser and being considered to supply tradegoods
	# Scoped to by a loop of the trade zones available in an internal trade scope
	# Function: Give a score to this tradezone for the potential purchaser. This score will then be used to rank the provinces. HIGHER score = WORSE deal
	# Passes the tradezone name as an argument to PURCHASE_get_seller_purchaser_score_internal
	# That then returns the name of the preferred stockpile that is referenced when ordering

	if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_india_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_east_north_america_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_west_north_america_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_caribbean_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_west_south_america_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_east_south_america_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_south_east_asia_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_indo_china_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_yellow_sea_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_southern_africa_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_west_africa_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_east_africa_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_middle_east_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_western_steppe_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_eastern_steppe_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_upper_yangtzi_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_atlantic_seaboard_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_central_europe_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_west_mediterranean_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_baltic_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_east_europe_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_east_mediterranean_tradezone
			}
		}
		PURCHASE_get_seller_purchaser_score_internal = {
			supplier_TZ = $supplier_TZ$
			order_size = $order_size$
			tradegood = $tradegood$
		}
	}

	#TODO: How do we use this score to actually select a supplier?
	# ... First thought is to use an ordered_ listing of list_of_tradezones_in_internal_trade_scope, ordering by this var (in which case it should be low to high - the first one in the list would have the lowest cost, i.e. lowest total points added up)
}

PURCHASE_get_seller_purchaser_score_internal = {
	# Scope: Trade center province
	# Function: Takes a string substitution from TRADE_rank_supplier_zone_internal to turn the dynamically passed tradezone of the purchaser into part of the tradezone distance variable name

	# Creates a score variable that is formatted like:
	# grain_supplier_score_here_to_india_tradezone
	# This is then used by the purchaser TZ to rank the best suppliers

	# Total score is the price of the order plus cost of transport

	# Steps:
	# Add the movement cost between tradezones (0 if the same tradezone) - how to find this reasonably? We need to identify the variable for this tradezone to the originator province's tradezone. This would be easier if the movement cost variables were saved in the trade center province scopes so we could grab them right away...
	# distance = var:here_to_$tradezone$
	# Add the price of the tradegood in that tradezone (modified somehow to add up sensibly)
	# (for international trade, we'll want to factor in tariff rates, but that shouldn't matter in customs unions)
	scope:purchaser_governorship = {

		if = { # If the stockpile is lower than the order size, add the difference to the score so that areas with low prices but also very little stock are not procured from, resulting in unfulfilled orders when slightly more expensive but plentiful stocks are available in the trade scope
			limit = {
				scope:ranking_governorship.var:internal_trade_scope = {
					has_variable = $tradegood$_stockpile_$supplier_TZ$_tradezone
				}
			}
			set_variable = {
				name = $tradegood$_supplier_score_here_to_$supplier_TZ$_tradezone
				value = global_var:global_$supplier_TZ$_tradezone.var:local_price_$tradegood$
			}
			change_variable = {
				name = $tradegood$_supplier_score_here_to_$supplier_TZ$_tradezone
				multiply = $order_size$
			}
			debug_log = "Scoring  $tradegood$ from $purchaser_TZ$ and accounting for available stockpile in  $supplier_TZ$"
			set_local_variable = {
				name = l_order_size_diff
				value = $order_size$
			}
			change_local_variable = {
				name = l_order_size_diff
				subtract = scope:ranking_governorship.var:internal_trade_scope.var:$tradegood$_stockpile_$supplier_TZ$_tradezone
			}
			if = {
				limit = {
					var:trade_center = {
						has_variable = here_to_$supplier_TZ$_tradezone
						NOT = {
							has_variable = is_$supplier_TZ$_tradezone
						}
					}
				}
				change_variable = {
					name = $tradegood$_supplier_score_here_to_$supplier_TZ$_tradezone
					add = var:trade_center.var:here_to_$supplier_TZ$_tradezone
				}
			}
			change_variable = {
				name = $tradegood$_supplier_score_here_to_$supplier_TZ$_tradezone
				multiply = -1
			}
		}

		else = {
			set_variable = {
				name = $tradegood$_supplier_score_here_to_$supplier_TZ$_tradezone
				value = 999 # No stock, no point using
			}
		}
	}


}

PURCHASE_check_name_and_apply_rank_internal = {
	# Scope: trade center province, to the governorship which is ranking the tradezone
	# Function: Check what the name of the tradezone is, and give the ranking variable the corresponding value
	scope:ranking_governorship = {
		if = {
			limit = {
				NOT = { has_variable = 1st_rank_internal_supplier_$tradegood$ }
			}
			set_variable = {
				name = 1st_rank_internal_supplier_$tradegood$
				value = global_var:global_$tradezone$_tradezone
			}
			debug_log = "Awarding 1st rank supplier for  $tradegood$ to  $tradezone$"
		}
		else_if = {
			limit = {
				NOT = { has_variable = 2nd_rank_internal_supplier_$tradegood$ }
			}
			set_variable = {
				name = 2nd_rank_internal_supplier_$tradegood$
				value = global_var:global_$tradezone$_tradezone
			}
			debug_log = "Awarding 2nd rank supplier for  $tradegood$ to  $tradezone$"
		}
		else_if = {
			limit = {
				NOT = { has_variable = 3rd_rank_internal_supplier_$tradegood$ }
			}
			set_variable = {
				name = 3rd_rank_internal_supplier_$tradegood$
				value = global_var:global_$tradezone$_tradezone
			}
			debug_log = "Awarding 3rd rank supplier for  $tradegood$ to  $tradezone$"
		}
		else_if = {
			limit = {
				NOT = { has_variable = 4th_rank_internal_supplier_$tradegood$ }
			}
			set_variable = {
				name = 4th_rank_internal_supplier_$tradegood$
				value = global_var:global_$tradezone$_tradezone
			}
		}
		else_if = {
			limit = {
				NOT = { has_variable = 5th_rank_internal_supplier_$tradegood$ }
			}
			set_variable = {
				name = 5th_rank_internal_supplier_$tradegood$
				value = global_var:global_$tradezone$_tradezone
			}
		}
		else_if = {
			limit = {
				NOT = { has_variable = 6th_rank_internal_supplier_$tradegood$ }
			}
			set_variable = {
				name = 6th_rank_internal_supplier_$tradegood$
				value = global_var:global_$tradezone$_tradezone
			}
		}
		# etc... WiP at the moment
	}
}

PURCHASE_get_preferred_tradezone_internal = {
	# Scope: governorship, to internal trade scope
	# Function: Get the best value supplier of $tradegood$ in the stockpiles available in the internal trade scope
	# This checks the names of the potential supplier tradezones; it must then hand over to the next scripted effect, PURCHASE_rank_supplier_zone_internal, to get the name of the purchasing governorship's tradezone
	# TODO: We might want to optimise this by preventing repeat scoring once one tradegood has already been scored. Basically, an if check for whether there's an existing preferred_stockpile

	# TODO: condense the if_else list into a single scripted effect that can be re-used by the external ranking script

	# Only rank if there is more than 1 TZ in the internal trade scope to rank

	if = {
		limit = {
			var:internal_trade_scope = {
				num_TZ_in_ITS > 1 # Has more than 1 tradezone to score
			}
		}
		var:trade_center = { save_scope_as = purchaser_TZ_scope }
		save_scope_as = ranking_governorship # Usually the same as purchaser governorship, except for during international trade
		var:internal_trade_scope = {
			
			every_in_list = {
				variable = list_of_tradezones_in_internal_trade_scope
				debug_log = "Checking tradezone for score"

				if = {
					limit = { has_variable = is_india_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = india
				    }
				}
				else_if = {
					limit = { has_variable = is_east_north_america_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = east_north_america
				    }
				}
				else_if = {
					limit = { has_variable = is_west_north_america_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = west_north_america
				    }
				}
				else_if = {
					limit = { has_variable = is_caribbean_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = caribbean
				    }
				}
				else_if = {
					limit = { has_variable = is_west_south_america_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = west_south_america
				    }
				}
				else_if = {
					limit = { has_variable = is_east_south_america_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = east_south_america
				    }
				}
				else_if = {
					limit = { has_variable = is_south_east_asia_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = south_east_asia
				    }
				}
				else_if = {
					limit = { has_variable = is_indo_china_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = indo_china
				    }
				}
				else_if = {
					limit = { has_variable = is_yellow_sea_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = yellow_sea
				    }
				}
				else_if = {
					limit = { has_variable = is_southern_africa_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = southern_africa
				    }
				}
				else_if = {
					limit = { has_variable = is_west_africa_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = west_africa
				    }
				}
				else_if = {
					limit = { has_variable = is_east_africa_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = east_africa
				    }
				}
				else_if = {
					limit = { has_variable = is_middle_east_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = middle_east
				    }
				}
				else_if = {
					limit = { has_variable = is_western_steppe_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = western_steppe
				    }
				}
				else_if = {
					limit = { has_variable = is_eastern_steppe_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = eastern_steppe
				    }
				}
				else_if = {
					limit = { has_variable = is_upper_yangtzi_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = upper_yangtzi
				    }
				}
				else_if = {
					limit = { has_variable = is_atlantic_seaboard_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = atlantic_seaboard
				    }
				}
				else_if = {
					limit = { has_variable = is_central_europe_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = central_europe
				    }
				}
				else_if = {
					limit = { has_variable = is_west_mediterranean_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = west_mediterranean
				    }
				}
				else_if = {
					limit = { has_variable = is_baltic_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = baltic
				    }
				}
				else_if = {
					limit = { has_variable = is_east_europe_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = east_europe
				    }
				}
				else_if = {
					limit = { has_variable = is_east_mediterranean_tradezone }
					PURCHASE_rank_supplier_zone_internal = {
						purchaser_TZ = scope:purchaser_TZ_scope
						order_size = $order_size$
				        tradegood = $tradegood$
				        supplier_TZ = east_mediterranean
				    }
				}
			}

			# Now iterate through the list in order and set variables in the trade center scope stating their rank from this trade center, for this particular tradegood. The trade scope will then use this rank to direct purchase orders for this tradegood to the best deal first, then to alternatives in descending order if it is not available there.
			ordered_in_list = {
				variable = list_of_tradezones_in_internal_trade_scope
				order_by = {
					value = 0
					if = {
						limit = { 
							has_variable = is_india_tradezone
						}
						add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_india_tradezone
					}
					else_if = {
				        limit = { has_variable = is_east_north_america_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_east_north_america_tradezone
					}
					else_if = {
				        limit = { has_variable = is_west_north_america_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_west_north_america_tradezone
					}
					else_if = {
				        limit = { has_variable = is_caribbean_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_caribbean_tradezone
					}
					else_if = {
				        limit = { has_variable = is_west_south_america_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_west_south_america_tradezone
					}
					else_if = {
				        limit = { has_variable = is_east_south_america_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_east_south_america_tradezone
					}
					else_if = {
				        limit = { has_variable = is_south_east_asia_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_south_east_asia_tradezone
					}
					else_if = {
				        limit = { has_variable = is_indo_china_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_indo_china_tradezone
					}
					else_if = {
				        limit = { has_variable = is_yellow_sea_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_yellow_sea_tradezone
					}
					else_if = {
				        limit = { has_variable = is_southern_africa_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_southern_africa_tradezone
					}
					else_if = {
				        limit = { has_variable = is_west_africa_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_west_africa_tradezone
					}
					else_if = {
				        limit = { has_variable = is_east_africa_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_east_africa_tradezone
					}
					else_if = {
				        limit = { has_variable = is_middle_east_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_middle_east_tradezone
					}
					else_if = {
				        limit = { has_variable = is_western_steppe_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_western_steppe_tradezone
					}
					else_if = {
				        limit = { has_variable = is_eastern_steppe_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_eastern_steppe_tradezone
					}
					else_if = {
				        limit = { has_variable = is_upper_yangtzi_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_upper_yangtzi_tradezone
					}
					else_if = {
				        limit = { has_variable = is_atlantic_seaboard_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_atlantic_seaboard_tradezone
					}
					else_if = {
				        limit = { has_variable = is_central_europe_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_central_europe_tradezone
					}
					else_if = {
				        limit = { has_variable = is_west_mediterranean_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_west_mediterranean_tradezone
					}
					else_if = {
				        limit = { has_variable = is_baltic_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_baltic_tradezone
					}
					else_if = {
				        limit = { has_variable = is_east_europe_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_east_europe_tradezone
					}
					else_if = {
				        limit = { has_variable = is_east_mediterranean_tradezone }
					    add = scope:purchaser_governorship.var:$tradegood$_supplier_score_here_to_east_mediterranean_tradezone
					}
				}
				max = 3
				check_range_bounds = no
				# save_scope_as = supplier_tradezone_ranked
				if = {
					limit = { has_variable = is_india_tradezone }
					PURCHASE_check_name_and_apply_rank_internal = {
						tradezone = india
						tradegood = $tradegood$
					}
				}
				else_if = {
				    limit = { has_variable = is_east_north_america_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = east_north_america
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_west_north_america_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = west_north_america
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_caribbean_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = caribbean
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_west_south_america_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = west_south_america
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_east_south_america_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = east_south_america
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_south_east_asia_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = south_east_asia
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_indo_china_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = indo_china
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_yellow_sea_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = yellow_sea
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_southern_africa_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = southern_africa
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_west_africa_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = west_africa
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_east_africa_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = east_africa
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_middle_east_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = middle_east
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_western_steppe_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = western_steppe
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_eastern_steppe_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = eastern_steppe
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_upper_yangtzi_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = upper_yangtzi
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_atlantic_seaboard_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = atlantic_seaboard
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_central_europe_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = central_europe
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_west_mediterranean_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = west_mediterranean
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_baltic_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = baltic
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_east_europe_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = east_europe
				        tradegood = $tradegood$
				    }
				}
				else_if = {
				    limit = { has_variable = is_east_mediterranean_tradezone }
				    PURCHASE_check_name_and_apply_rank_internal = {
				        tradezone = east_mediterranean
				        tradegood = $tradegood$
				    }
				}
			}
		}
	}
	else = {
		set_variable = {
			name = 1st_rank_internal_supplier_$tradegood$
			value = var:trade_center
		}
	}

}



PURCHASE_get_preferred_tradezone_external = {
	# Scope: governorship, to governorship's tradezone
	# Function: get the best value supplier of $tradegood$ among (sus???) the purchasing country's trade partners
	var:trade_center = {
		save_scope_as = current_governorship_trade_center
		owner = {
			every_in_list = {
				variable = list_of_trade_partners_all_categories # For now, we're just sorting all categories - and maybe it would be too demanding to expect to have trade deals for each category

				# TODO:
				# Add the if_else loop effect with the ranking effect.
				# Maybe add an argument to the ranking effect that determines external or internal
				# Rank by tradezone first, then check countries' tariffs etc... this will be complicated

				# Order of the function:
				# 2. Rank up to 5 trade partners in the top 3 tradezones
			}
		}
	}
}

PURCHASE_try_supplier = {
	# Scope: governorship
	# Function: check the name of the current tradezone rank being checked, and poll the corresponding stockpile variable
	debug_log = "Contacting supplier..."
	var:$supplier_rank$_rank_internal_supplier_$tradegood$ = {
		save_scope_as = target_supplier
	}
	if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_india_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = india
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_east_north_america_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = east_north_america
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_west_north_america_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = west_north_america
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_caribbean_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = caribbean
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_west_south_america_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = west_south_america
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_east_south_america_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = east_south_america
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_south_east_asia_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = south_east_asia
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_indo_china_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = indo_china
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_yellow_sea_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = yellow_sea
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_southern_africa_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = southern_africa
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_west_africa_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = west_africa
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_east_africa_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = east_africa
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_middle_east_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = middle_east
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_western_steppe_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = western_steppe
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_eastern_steppe_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = eastern_steppe
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_upper_yangtzi_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = upper_yangtzi
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_atlantic_seaboard_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = atlantic_seaboard
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_central_europe_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = central_europe
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_west_mediterranean_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = west_mediterranean
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_baltic_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = baltic
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_east_europe_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = east_europe
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
	else_if = {
		limit = {
			scope:target_supplier = {
				has_variable = is_east_mediterranean_tradezone
			}
		}
		PURCHASE_transfer_if_able = {
			tradezone = east_mediterranean
			order_size = $order_size$
			tradegood = $tradegood$
			category = $category$
		}
	}
}

PURCHASE_transfer_if_able = {
	# Scope: governorship of the selling trade scope
	# Function: check if there is a sufficient stockpile in the supplier trade scope
	debug_log = "Contacting tradezone  $tradezone$ "
	if = {
		limit = {
			var:internal_trade_scope = {
				has_variable = $tradegood$_stockpile_$tradezone$_tradezone
			}
		}
		if = {
			limit = {
				var:internal_trade_scope = {
					var:$tradegood$_stockpile_$tradezone$_tradezone > 0
				}
			}
			debug_log = "Tradezone has been contacted"
			set_local_variable = {
				name = i_demand_diff
				value = $order_size$
			}
			var:internal_trade_scope = {
				debug_log = "Internal trade scope while attempting transfer is: "
				debug_log_scopes = yes
				change_local_variable = {
					name = i_demand_diff
					subtract = var:$tradegood$_stockpile_$tradezone$_tradezone
				}
			}
			save_scope_as = seller_governorship
			set_variable = { # Set a variable to be modified down in case it can't be fulfilled completely by the supplier stockpile
				name = this_order_size
				value = $order_size$
			}

			if = { # Account for inability to fulfil the whole order: if the order size minus the stockpile is positive, lower the order size by that amount
				limit = {
					local_var:i_demand_diff > 0
				}
				change_variable = {
					name = this_order_size
					subtract = local_var:i_demand_diff
				}
			}
			# Add to the purchasing governorship's stockpile
			PURCHASE_transfer_goods_internally = {
				tradegood = $tradegood$
				amount = scope:purchaser_governorship.var:this_order_size
				category = $category$
				tradezone = $tradezone$
			}
			owner = {
				change_variable = {
					name = country_internal_total_ordered_$tradegood$ # Saves the total amount ordered - Note: not the total amount successfully purchased
					add = $order_size$
				}
			}
			scope:purchaser_governorship = {
				change_variable = {
					name = l_order_size
					subtract = scope:seller_governorship.var:this_order_size
				}
			}
		}
	}
	else = {
		debug_log = "Internal trade scope did not have  $tradegood$ stockpile in  $tradezone$"
	}
	
}

PURCHASE_order_internal = {
	# Scope: governorship
	# Buy from the internal trade scope's stockpile, be it country or customs union

	# Format of arguments:
	# $for_stockpile$ = grain_stockpile, the stockpile in the governorship scope
	# $from_stockpile$ = grain_stockpile_internal, the stockpile from the internal trade scope with the sum of all goods available for internal trade
	# $order_size$ = local variable, global_var:l_order_size
	# $internal_sold_total$ = internal_sold_total_grain

	debug_log = "Making a purchase order for  $tradegood$"
	debug_log_scopes = yes

	# save_scope_as = purchaser_governorship # Moved back to check shopping

	if = {
		limit = {
			var:internal_trade_scope = {
				num_TZ_in_ITS > 1
			}
		}
		debug_log = "Trying next ranked supplier"
		if = {
			limit = {
				NOT = { has_variable = $tradegood$_purchase_order_tender_complete }
				scope:ranking_governorship = { has_variable = 1st_rank_internal_supplier_$tradegood$ }
			}
			debug_log = "Rank = 1st"
			PURCHASE_try_supplier = {
				supplier_rank = 1st
				tradegood = $tradegood$
				order_size = $order_size$
				category = $category$
			}
			if = {
				limit = {
					NOT = { has_variable = $tradegood$_purchase_order_tender_complete }
					scope:ranking_governorship = { has_variable = 2nd_rank_internal_supplier_$tradegood$ }
				}
				debug_log = "Rank = 2nd"
				PURCHASE_try_supplier = {
					supplier_rank = 2nd
					tradegood = $tradegood$
					order_size = $order_size$
					category = $category$
				}
				if = {
					limit = {
						NOT = { has_variable = $tradegood$_purchase_order_tender_complete }
						scope:ranking_governorship = { has_variable = 3rd_rank_internal_supplier_$tradegood$ }
					}
					debug_log = "Rank = 3rd"
					PURCHASE_try_supplier = {
						supplier_rank = 3rd
						tradegood = $tradegood$
						order_size = $order_size$
						category = $category$
					}
					if = {
						limit = {
							NOT = { has_variable = $tradegood$_purchase_order_tender_complete }
							scope:ranking_governorship = { has_variable = 4th_rank_internal_supplier_$tradegood$ }
						}
						debug_log = "Rank = 4th"
						PURCHASE_try_supplier = {
							supplier_rank = 4th
							tradegood = $tradegood$
							order_size = $order_size$
							category = $category$
						}
						if = {
							limit = {
								NOT = { has_variable = $tradegood$_purchase_order_tender_complete }
								scope:ranking_governorship = { has_variable = 5th_rank_internal_supplier_$tradegood$ }
							}
							debug_log = "Rank = 5th"
							PURCHASE_try_supplier = {
								supplier_rank = 5th
								tradegood = $tradegood$
								order_size = $order_size$
								category = $category$
							}
							if = {
								limit = {
									NOT = { has_variable = $tradegood$_purchase_order_tender_complete }
									scope:ranking_governorship = { has_variable = 6th_rank_internal_supplier_$tradegood$ }
								}
								debug_log = "Rank = 6th"
								PURCHASE_try_supplier = {
									supplier_rank = 6th
									tradegood = $tradegood$
									order_size = $order_size$
									category = $category$
								}
							}
						}
					}
				}
			}
		}
	}
	else = { # If there is less than 1 tradezone to try, go direct to only trying the first ranked one
		if = {
			limit = {
				NOT = { has_variable = $tradegood$_purchase_order_tender_complete }
				has_variable = 1st_rank_internal_supplier_$tradegood$
			}
			PURCHASE_try_supplier = {
				supplier_rank = 1st
				tradegood = $tradegood$
				order_size = $order_size$
				category = $category$
			}
		}
	}
}

PURCHASE_transfer_goods_internally = {
	# Scope: governorship (seller scope)
	# Function: Put goods in the purchasing governorship, subtract goods from the internal trade scope and allocate trade-scope-wide revenue accordingly.

	# Format of arguments:
	# $target_stockpile$ = grain_stockpile, derived from $for_stockpile$ in PURCHASE_order_internal, the stockpile in the governorship being filled
	# $amount$ = local variable, derived from $order_size$ in PURCHASE_order_internal
	# $from_stockpile$ = grain_stockpile_internal, derived from $from_stockpile$ in PURCHASE_order_internal, this is the available stockpile on the whole internal market
	# $local_price$ = local_price_grain, gets the local price of grain from the governorship owner's capital
	# $internal_sold_total$ = internal_sold_total_grain, the total amount sold in the internal trade scope, used by the effect to distribute the cut of amount sold to contributing governorships
	debug_log = "Transferring  $tradegood$  from  $tradezone$"
	debug_log = "SCOPES BELOW."
	debug_log_scopes = yes

	var:trade_center = {
		random_in_list = {
			variable = list_of_tradegood_trackers
			limit = {
				var:tradegood = flag:$tradegood$
			}
			change_variable = {
				name = amt_exported
				add = $amount$
			}
		}
	}

	scope:purchaser_governorship = {
		# ADD TO BUYER'S STOCKPILE
		change_variable = {
			name = $tradegood$_stockpile
			add = $amount$
		}

		# ALLOCATE WEALTH FOR THE POOL
		set_local_variable = {
			name = this_spend
			value = $amount$
		}

		var:trade_center = {
			random_in_list = {
				variable = list_of_tradegood_trackers
				limit = {
					var:tradegood = flag:$tradegood$
				}
				change_variable = {
					name = amt_imported
					add = $amount$
				}
			}
		}
	}

	# SUBTRACT FROM THE SELECTED INTERNAL AVAILABLE STOCKPILE
	var:internal_trade_scope = {
		change_variable = {
			name = $tradegood$_stockpile_$tradezone$_tradezone
			subtract = $amount$
		}
		change_variable = {
			name = $tradegood$_stockpile_total
			subtract = $amount$
		}
	}

	change_local_variable = { # use the price from the seller TZ, marked up to the midpoint between seller and purchaser
		name = this_spend
		multiply = global_var:global_$tradezone$_tradezone.var:local_price_$tradegood$
	}

	if = {
		limit = {
			NOT = {
				global_var:global_$tradezone$_tradezone = scope:purchaser_governorship.var:trade_center
			}
		}
		# Mark up to exploit the price in the purchaser TZ
		set_local_variable = {
			name = price_markup
			value = scope:purchaser_governorship.var:trade_center.var:local_price_$tradegood$
		}
		# If the purchaser's TZ's price is higher than the seller's
		change_local_variable = {
			name = price_markup
			subtract = global_var:global_$tradezone$_tradezone.var:local_price_$tradegood$
		}
		if = {
			limit = {
				local_var:price_markup > 0
			}
			change_local_variable = { # meet 25% of the way between prices
				name = price_markup
				multiply = 0.25
			}
			change_local_variable = {
				name = price_markup
				multiply = $amount$
			}
		}

		change_local_variable = {
			name = this_spend
			add = local_var:price_markup
		}
	}

	# Update the amount sold from the seller TZ. This is used to update the price: the total demand in the seller TZ is divided by the amount sold in that TZ
	#global_var:global_$tradezone$_tradezone = {
	#	change_variable = {
	#		name = total_sold_TZ_$tradegood$
	#		add = $amount$
	#	}
	#}

	if = {
		limit = { # If the buyer and sellers are not in the same tradezone
			NOT = {
				global_var:global_$tradezone$_tradezone = scope:purchaser_governorship.var:trade_center
			}
		}
		PURCHASE_update_shipping = {
			#origin_tradezone_name = $tradezone$
			origin_tradezone = global_var:global_$tradezone$_tradezone
			destination_tradezone = scope:purchaser_governorship.var:trade_center
			order_size = $amount$
		}
	}
	else = {
		scope:purchaser_governorship.var:trade_center = {
			change_variable = {
				name = TZ_shipping
				add = $amount$
			}
		}
	}

	# SUBTRACT MONEY FROM THE BUYING GOVERNORSHIP'S BALANCE
	# The balance will then be applied to the governorship wealth pools at the end of the purchase phase

	scope:purchaser_governorship = {
		# Add transport costs
		if = { # Only add transport costs between tradezones if there is an actual transport cost to account for
			limit = {
				var:trade_center = {
					has_variable = here_to_$tradezone$_tradezone
				}
			}
			set_local_variable = {
				name = this_spend_on_transport
				value = var:trade_center.var:here_to_$tradezone$_tradezone
			}
			change_local_variable = {
				name = this_spend
				add = var:trade_center.var:here_to_$tradezone$_tradezone # Note: should this be re-framed as here_from_$tradezone$, so that it can account for the speed of importing being faster in one direction?
			}
			change_variable = {
				name = governorship_this_quarter_spend_on_transport_$tradegood$ # Track the transport costs for the player's benefit
				add = var:trade_center.var:here_to_$tradezone$_tradezone
			}
			change_variable = {
				name = governorship_this_quarter_spend_on_transport # Track the transport costs for the player's benefit
				add = var:trade_center.var:here_to_$tradezone$_tradezone
			}
			var:trade_center = {
				change_variable = {
					name = TZ_this_quarter_transport_pool
					add = local_var:this_spend_on_transport
				}
			}
		}
		# TODO: Add a way to account for transport costs within a tradezone, too, using trade infrastructure level?

		change_variable = {
			name = governorship_this_quarter_spend_on_$category$
			add = local_var:this_spend
		}

		change_variable = {
			name = governorship_this_quarter_spend_on_$tradegood$
			add = local_var:this_spend
		}

		if = {
			limit = {
				NOT = {
					has_variable = $tradegood$_imported_from_$tradezone$
				}
			}
			set_variable = {
				name = $tradegood$_imported_from_$tradezone$
				value = $amount$
			}
		}
		else = {
			change_variable = {
				name = $tradegood$_imported_from_$tradezone$
				add = $amount$
			}
		}

		change_variable = {
			name = governorship_this_quarter_imported_$tradegood$
			add = $amount$ 
		}


		set_local_variable = {
			name = l_demand_diff
			value = DEMAND_$tradegood$
		}
		change_local_variable = {
			name = l_demand_diff
			subtract = var:$tradegood$_stockpile
		}
		if = {
			limit = {
				local_var:l_demand_diff <= 0
			}
			# Mark the goods transfer as complete, so it does not repeat the order in lower ranked tradezones
			set_variable = {
				name = $tradegood$_purchase_order_tender_complete
				days = 2
			}
		}

	}

	# ADD THE AMOUNT SOLD TO THE TOTAL IN THE TRADE SCOPE
	var:internal_trade_scope = {
		if = { # Make sure that the total_revenue variable started at 0 this cycle
			limit = {
				NOT = { has_variable = total_sold_and_revenue_reset_$tradezone$_$tradegood$ } # Needs to be removed at the end of the trade.2 event
			}
			# Reset total revenue and total sold to 0
			set_variable = { 
				name = $tradegood$_total_revenue_$tradezone$
				value = 0
			}
			set_variable = { 
				name = $tradegood$_sold_total_$tradezone$
				value = 0
			}
			set_variable = { 
				name = total_sold_and_revenue_reset_$tradezone$_$tradegood$
				value = 0
				days = 1 # Set it to auto-expire after 1 day to avoid having to fire a cleanup event. This limits the firing of any trade ticks to having 1 day between them!
			}
		}
		change_variable = {
			name = $tradegood$_sold_total_$tradezone$
			add = $amount$
		}
		change_variable = {
			name = internal_income_pool
			add = local_var:this_spend
		}
		change_variable = {
			name = $tradegood$_total_revenue_$tradezone$ # Adds to the internal revenue pile of the seller tradezone
			add = local_var:this_spend
		}
	}
	
}

PURCHASE_split_all_costs = {
	# Scope: governorship
	# Function: Split the spend for each category of tradegoods between the appropriate pop groups
	PURCHASE_split_costs = {
		category = essential_goods
	}
	PURCHASE_split_costs = {
		category = luxury_goods
	}
	PURCHASE_split_costs = {
		category = business_goods
	}
	PURCHASE_split_costs = {
		category = military_goods
	}
}

PURHCASE_calculate_actual_share_of_spend = {
	set_local_variable = {
		name = this_spend_on_$category$
		value = var:governorship_this_quarter_spend_on_$category$
	}
	change_local_variable = {
		name = this_spend_on_$category$
		multiply = var:spender_share_$category$_$spender$
	}
}

PURCHASE_split_costs = {
	# Scope: governorship
	# Split the spend for a single category of imported goods
	PURCHASE_apply_internal_sales_tax = {
		category = $category$
	}

	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = the_state
	}
	owner = {
		add_treasury = local_var:this_spend_on_$category$
	}
	# Upper strata
	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = upper_strata
	}
	change_variable = {
		name = upper_strata_wealth
		add = local_var:this_spend_on_$category$
	}
	# Middle strata
	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = middle_strata
	}
	change_variable = {
		name = middle_strata_wealth
		add = local_var:this_spend_on_$category$
	}
	# Lower strata
	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = lower_strata
	}
	change_variable = {
		name = lower_strata_wealth
		add = local_var:this_spend_on_$category$
	}
	# Tribesmen
	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = tribesmen
	}
	change_variable = {
		name = tribesmen_wealth
		add = local_var:this_spend_on_$category$
	}
	# Indentured
	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = indentured
	}
	change_variable = {
		name = indentured_wealth
		add = local_var:this_spend_on_$category$
	}
	# Slaves
	PURHCASE_calculate_actual_share_of_spend = {
		category = $category$
		spender = slaves
	}
	change_variable = {
		name = slaves_wealth
		add = local_var:this_spend_on_$category$
	}
}


PURCHASE_apply_internal_sales_tax = {
	set_local_variable = {
		name = this_internal_sales_taxed
		value = var:governorship_this_quarter_spend_on_$category$
	}

	change_local_variable = {
		name = this_internal_sales_taxed
		multiply = owner.var:internal_sales_tax_rate
	}

	change_variable = {
		name = governorship_quarterly_revenue_from_internal_sales_tax_$category$
		add = local_var:this_internal_sales_taxed
	}

	owner = {
		change_variable = {
			name = national_quarterly_revenue_from_internal_sales_tax_$category$
			add = local_var:this_internal_sales_taxed
		}
	}
	
	change_variable = {
		name = governorship_this_quarter_spend_on_$category$
		add = local_var:this_internal_sales_taxed # This value is negative
	}
}

# EXTERNAL PURCHASES

PURCHASE_make_external_shopping_list = {
	# Create a list of items that will need to be bought to satisfy demand this quarter
	# Scope = governorship

	# Iterate manually through all the stockpiles
	# tradegood = the tradegood to order
	# category = the category under which to log spends, so the costs can be correctly attributed to buyers. See wiki for which good is which https://github.com/sobisonator/imp19c/wiki/Trade#tradegood-groups

	# COMMENTED OUT - CURRENTLY NOT FIRING THE EFFECTS AS EXPECTED
	#every_essential_goods_megacomplex = {
	#	APPLY = PURCHASE_check_shopping_external
	#	CATEGORY = essential_goods
	#}
	#every_luxury_goods_megacomplex = {
	#	APPLY = PURCHASE_check_shopping_external
	#	CATEGORY = luxury_goods
	#}
	#every_business_goods_megacomplex = { 
	#	APPLY = PURCHASE_check_shopping_external
	#	CATEGORY = business_goods
	#}
	#every_military_goods_megacomplex = {
	#	APPLY = PURCHASE_check_shopping_external
	#	CATEGORY = military_goods
	#}

	PURCHASE_check_shopping_external = { 
		tradegood = grain 
		category = essential_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = fish 
		category = essential_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = livestock 
		category = essential_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = tropical_fruit 
		category = essential_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = mediterranean_fruit 
		category = essential_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = temperate_fruit 
		category = essential_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = processed_foods 
		category = essential_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = clothing 
		category = essential_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = furniture 
		category = essential_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = pharmaceuticals 
		category = essential_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = coal 
		category = essential_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = whales 
		category = essential_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = alcohol 
		category = luxury_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = gems 
		category = luxury_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = opium 
		category = luxury_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = tobacco 
		category = luxury_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = chocolate 
		category = luxury_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = coffee 
		category = luxury_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = tea 
		category = luxury_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = spices 
		category = luxury_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = sugar 
		category = luxury_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = luxury_clothing 
		category = luxury_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = luxury_furniture 
		category = luxury_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = glass 
		category = luxury_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = motors 
		category = luxury_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = fur 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = industrial_fibres 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = textile_fibres 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = wool 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = silk 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = wood 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = stone 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = sulphur 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = peat 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = tin 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = inorganic_compounds 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = copper 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = iron 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = gold 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = silver 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = dye 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = lead 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = oil 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = hardwood 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = rubber 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = salt 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = electronics 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = construction_materials 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = steel 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = bronze 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = machine_parts 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = chemicals 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = naval_supplies 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = steel_ships 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = wooden_ships 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = petrochemicals 
		category = business_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = early_munitions 
		category = military_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = late_munitions 
		category = military_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = early_artillery 
		category = military_goods
	}
	PURCHASE_check_shopping_external = { 
		tradegood = late_artillery 
		category = military_goods
	}
}

PURCHASE_check_shopping_external = {
	# Scope: governorship
	# Function: The sole purpose of this effect is to only run the purchase order effect if there's actually demand, therefore all of its arguments are basically proxies for the purchase order effect.

	# It has to be this way because you can't use a < operator between a svalue and a var
	# Check if the stockpile is big enough to satisfy demand
	set_local_variable = {
		name = l_demand_diff
		value = DEMAND_$tradegood$
	}
	change_local_variable = {
		name = l_demand_diff
		subtract = var:$tradegood$_stockpile
	}
	if = { # It has to be this way I promise
		limit = {
			AND = {
				local_var:l_demand_diff > 0
				capital_scope.owner = { has_variable_list = list_of_trade_partners_all_categories }
			}
		}
		PURCHASE_order_external = {
			tradegood = $tradegood$
			#for_stockpile = $for_stockpile$
			#from_stockpile = $from_stockpile$
			order_size = scope:purchaser_governorship.var:l_order_size
			category = $category$
			#goods_price = $goods_price$
			#external_sold_total = $external_sold_total$
		}
	}
}

PURCHASE_order_external = {
	# Scope: governorship
	# Function: Buy from stockpiles in other trade scopes
	# Called: By PURCHASE_check_shopping_internal, if PURCHASE_order_internal does not succeed in filling up the stockpile
	debug_log = "SCOPES BELOW. Making an EXTERNAL purchase order for  $tradegood$"
	debug_log_scopes = yes
	capital_scope.owner = {
		if = {
			limit = { 
				has_variable_list = list_of_trade_partners_all_categories
			}
			every_in_list = {
				variable = list_of_trade_partners_all_categories
				debug_log = "SCOPES BELOW: Checking trade partner for  $tradegood$"
				debug_log_scopes = yes
				capital_scope.governorship = {
					if = {
						limit = {
							NOT = { has_variable = 1st_rank_internal_supplier_$tradegood$ }
						}
						PURCHASE_get_preferred_tradezone_internal = {
							tradegood = $tradegood$
							order_size = scope:purchaser_governorship.var:l_order_size
						} # Creates a set of variables in the trade center
					}
				}
			}
			ordered_in_list = {
				# TODO: Break this list down down by the $category$ in question, as trade agreements can be for all or some categories.
				variable = list_of_trade_partners_all_categories
				order_by = { # Order by highest rank seller's capital's best ranked tradezone stockpile size, largest to smallest. Buy from the biggest stockpile, as it will be pre-sorted on price by the other trade scopes ranking them.
					value = 0
					if = {
						limit = {
							capital_scope.governorship = {
								has_variable = 1st_rank_internal_supplier_$tradegood$
							}
						}
						add = capital_scope.governorship.var:1st_rank_internal_supplier_$tradegood$.var:local_price_$tradegood$
						multiply = -1
					}
					# TODO: Add a way of affecting the order by the distance between scope:purchaser_governorship and the seller tradezone
					#if = {
					#	limit = {
					#		scope:purchaser_governorship.var:trade_center = {
					#			has_variable = here_to_$tradezone$_tradezone
					#		}
					#	}
					#	add = scope:purchaser_governorship.var:trade_center.var:here_to_$tradezone$_tradezone
					#}
				}
				max = 6
				check_range_bounds = no
				debug_log = "SCOPES BELOW: Attempting to order  $tradegood$ from supplier"
				debug_log_scopes = yes
				if = {
					limit = { # Do only one attempt with the best ranked external trade partner
						scope:purchaser_governorship = { 
							NOT = { has_variable = external_trade_done_$tradegood$ } # If we want, we can set this flag only when the order has been fulfilled, in order to try more than one trade partner.
						}
					}
					capital_scope.governorship = { # Capital of the seller's country acts as the trader, handling the transfer on behalf of the purchaser governorship

						save_scope_as = seller_trade_scope

						PURCHASE_try_supplier = {
							supplier_rank = 1st
							order_size = $order_size$
							tradegood = $tradegood$
							category = $category$
						}

					}
					scope:purchaser_governorship = {
						debug_log = "SCOPES BELOW. External trade done for  $tradegood$"
						debug_log_scopes = yes
						set_variable = {
							name = external_trade_done_$tradegood$
							days = 1
						}
					}
				}
			}
		}
	}
}


PURCHASE_reset_quarterly_var = {
	#Reset puchase variable every quarter for every country for every governorship
	if = {
		limit = {
			NOT = { has_variable = purchase_power }
		}
		set_variable = {
			name = purchase_power
			value = 0
		}
	}
	else = {
		remove_variable = purchase_power
		set_variable = {
			name = purchase_power
			value = 0
		}
	}
	change_variable = {
		name = purchase_power
		add = WEALTH_governorship_total
	}
}

PURCHASE_rank_deals = { # Rank tradezones by total costs for the named tradegood
	# Scope: Trade center
	# This effect creates a list of the best deals with the best deal first, including a variable that stores the best deal.
	# This somehow needs to add together the TZ's price for selling the named good + the travel cost variable
	ordered_in_global_list = {
		variable = list_of_trade_centers

		# use a switch here too
		# And for each TZ, create a variable that is total_cost
		# total_cost = travel_cost + tradegood_price
		# Then compare all those variables and rank them
		# Create a special variable for top slot, for quick reference
		# And have a mechanism in place to swap to second best, etc. as the top slot runs out

		limit = { # Only check prices where there are goods available
			var:$goods_stockpile$ > 0
		}
		order_by = var:$tradegood_price$ # Order based on that TZ's price for the named tradegood
		PREV = {
			set_variable = {
				name = $best_value_for_goods$ # format = best_value_for_grain
				value = PREV # The TZ scope
			}
		}
	}
}

# SHIPPING FUNCTIONS

PURCHASE_reset_shipping_variables = {
    every_trade_center = {
    	set_variable = {
    		name = TZ_shipping
    		value = 0
    	}
    }
}

PURCHASE_update_shipping = {

	# Part 1: Update shipping traffic in en-route locations, and get the amount by which to divide the spend on transport (2, for origin and destination, + number of intermediate TZs)

	if = { # 1: India <-> European Atlantic Coast
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_india_tradezone
					}
					$destination_tradezone$ = {
						OR = {
							has_variable = is_west_mediterranean_tradezone
							has_variable = is_atlantic_seaboard_tradezone
							has_variable = is_east_south_america_tradezone
						}
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_india_tradezone
					}
					$origin_tradezone$ = {
						OR = {
							has_variable = is_west_mediterranean_tradezone
							has_variable = is_atlantic_seaboard_tradezone
							has_variable = is_east_south_america_tradezone
						}
					}
				}
			}
		}
		debug_log = "Shipping between India and European Atlantic Coast"
		PURCHASE_india_to_european_atlantic_shipping = {
			order_size = $order_size$ 
		}
	}

	else_if = { # 2: India <-> Northern American Atlantic Coast
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_india_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_east_north_america_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_india_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_east_north_america_tradezone
					}
				}
			}
		}
		PURCHASE_india_to_northern_american_atlantic_shipping = {
			order_size = $order_size$ 
		}
	}

	else_if = { # 3: Yellow sea <-> Northern American Atlantic Coast
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_yellow_sea_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_east_north_america_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_yellow_sea_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_east_north_america_tradezone
					}
				}
			}
		}
		if = {
			limit = {
				NOT = { has_global_variable = panama_canal_built }
			}
			PURCHASE_china_to_india_shipping = {
				order_size = $order_size$
			}
			PURCHASE_india_to_northern_american_atlantic_shipping = { 
				order_size = $order_size$ 
			}
		}
		else = {
			global_var:global_caribbean_tradezone = {
			change_variable = {
				name = TZ_shipping
				add = $order_size$
			}
			}
		}
		
	}

	else_if = { # 4: Yellow Sea <-> India
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_yellow_sea_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_india_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_yellow_sea_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_india_tradezone
					}
				}
			}
		}
		PURCHASE_china_to_india_shipping = {
			order_size = $order_size$
		}
	}

	else_if = { # 5: Eastern Steppe <-> India
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_eastern_steppe_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_india_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_eastern_steppe_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_india_tradezone
					}
				}
			}
		}
			global_var:global_yellow_sea_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
		PURCHASE_china_to_india_shipping = {
			order_size = $order_size$
		}
	}

	else_if = { # 6: East Europe <-> West Mediterranean (black sea route)
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_east_europe_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_west_mediterranean_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_east_europe_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_west_mediterranean_tradezone
					}
				}
			}
		}
			global_var:global_east_mediterranean_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
	}

	else_if = { # 7: East Europe <-> Atlantic seaboard (split between Baltic and Med)
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_east_europe_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_east_europe_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
				}
			}
		}
		PURCHASE_east_europe_atlantic_seaboard_shipping = {
			order_size = $order_size$
		}

	}

	else_if = { # 8: India <-> East Mediterranean (via middle east)
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_india_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_east_mediterranean_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_india_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_east_mediterranean_tradezone
					}
				}
			}
		}
			global_var:global_middle_east_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
	}

	else_if = { # 9: West South America <-> East North America
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_west_south_america_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_east_north_america_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_west_south_america_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_east_north_america_tradezone
					}
				}
			}
		}
		
		PURCHASE_west_south_america_to_east_north_america_shipping = {
			order_size = $order_size$
		}
		
	}

	else_if = { # 10: West South America <-> Atlantic Seaboard
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_west_south_america_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_west_south_america_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
				}
			}
		}
		PURCHASE_west_south_america_to_east_north_america_shipping = {
			order_size = $order_size$
		}
		if = {
			limit = {
				has_global_variable = panama_canal_built
			}
				global_var:global_east_north_america_tradezone = {
			change_variable = {
				name = TZ_shipping
				add = $order_size$
			}
			}
		}
		else = {
			global_var:global_west_africa_tradezone = {
			change_variable = {
				name = TZ_shipping
				add = $order_size$
			}
			}
		}
	}

	else_if = { # 11: East South America <-> Atlantic seaboard
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_east_south_america_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_east_south_america_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
				}
			}
		}
		
			global_var:global_west_africa_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
		
	}

	else_if = { # 12: East Europe <-> Central Europe
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_east_europe_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_central_europe_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_east_europe_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_central_europe_tradezone
					}
				}
			}
		}
		
			global_var:global_baltic_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
		
	}

	else_if = { # 13: Western Steppe <-> Atlantic seaboard (split between Baltic and Med)
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_east_europe_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_east_europe_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
				}
			}
		}
			global_var:global_east_europe_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
		PURCHASE_east_europe_atlantic_seaboard_shipping = {
			order_size = $order_size$
		}

	}

	else_if = { # 14: South Africa <-> Eastern Med
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_southern_africa_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_east_mediterranean_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_southern_africa_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_east_mediterranean_tradezone
					}
				}
			}
		}
		
		PURCHASE_southern_africa_east_mediterranean_shipping = {
			order_size = $order_size$
		}
		
	}

	else_if = { # 15: Middle East <-> West Med
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_middle_east_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_west_mediterranean_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_middle_east_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_west_mediterranean_tradezone
					}
				}
			}
		}
		
			global_var:global_east_mediterranean_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
		
	}

	else_if = { # 16: Middle East <-> Atlantic seaboard
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_middle_east_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_middle_east_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
				}
			}
		}
		
			global_var:global_east_mediterranean_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
			global_var:global_west_mediterranean_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
		
	}

	else_if = { # 17: East Europe <-> East North America
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_east_europe_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_east_north_america_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_east_europe_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_east_north_america_tradezone
					}
				}
			}
		}
		
			global_var:global_baltic_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
			global_var:global_atlantic_seaboard_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
		PURCHASE_atlantic_seaboard_east_north_america_shipping = {
			order_size = $order_size$
		}
		
	}

	else_if = { # 18: Atlantic Seaboard <-> East North America
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_east_north_america_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_east_north_america_tradezone
					}
				}
			}
		}
		
		PURCHASE_atlantic_seaboard_east_north_america_shipping = {
			order_size = $order_size$
		}
		
	}

	else_if = { # 18: Atlantic Seaboard <-> West North America
		limit = {
			OR = {
				AND = {
					$origin_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
					$destination_tradezone$ = {
						has_variable = is_west_north_america_tradezone
					}
				}

				AND = {
					$destination_tradezone$ = {
						has_variable = is_atlantic_seaboard_tradezone
					}
					$origin_tradezone$ = {
						has_variable = is_west_north_america_tradezone
					}
				}
			}
		}
		
		PURCHASE_atlantic_seaboard_east_north_america_shipping = {
			order_size = $order_size$
		}
			global_var:global_east_north_america_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
		
	}

	# Part 1: Update shipping trafic in origin and destination tradezones

	# We should assume that local_var:this_spend_on_transport exists, because it is created in the same circumstances, i.e. the purchaser and seller TZs are not the same

	$origin_tradezone$ = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
	}
	$destination_tradezone$ = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
	}

}

PURCHASE_atlantic_seaboard_east_north_america_shipping = {
	#if = {
	#	limit = {
	#		scope:purchaser_governorship.owner = {
	#			has_variable = advanced_steam_ships # Placeholder
	#		}
	#	}
	#	# Do nothing, direct route
	#}
	global_var:global_west_africa_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
	}
	global_var:global_caribbean_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
	}
}

PURCHASE_southern_africa_east_mediterranean_shipping = {
	if = {
		limit = { 
			NOT = { has_global_variable = suez_canal_built }
		}
			global_var:global_west_africa_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
			global_var:global_west_mediterranean_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
	}
	else = {
		global_var:global_east_africa_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
	}
}

PURCHASE_east_europe_atlantic_seaboard_shipping = {
	set_local_variable = {
		name = l_shipping_value
		value = $order_size$
	}
	change_local_variable = {
		name = l_shipping_value
		multiply = 0.5
	}

	global_var:global_east_mediterranean_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = local_var:l_shipping_value
		}
	}
	global_var:global_west_mediterranean_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = local_var:l_shipping_value
		}
	}
	global_var:global_baltic_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = local_var:l_shipping_value
		}
	}
}

PURCHASE_west_south_america_to_east_north_america_shipping = {
	if = {
		limit = {
			NOT = {
				has_global_variable = panama_canal_built
			}
		}
		set_local_variable = {
			name = l_shipping_value
			value = $order_size$
		}
		change_local_variable = {
			name = l_shipping_value
			multiply = 0.33
		}
		global_var:global_west_north_america_tradezone = {
			change_variable = {
				name = TZ_shipping
				add = local_var:l_shipping_value
			}
		}
		global_var:global_caribbean_tradezone = {
			change_variable = {
				name = TZ_shipping
				add = local_var:l_shipping_value
			}
		}
		global_var:global_east_south_america_tradezone = {
			change_variable = {
				name = TZ_shipping
				add = local_var:l_shipping_value
			}
		}
	}
	else = {
		global_var:global_caribbean_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
	}
}

PURCHASE_china_to_india_shipping = {
	global_var:global_indo_china_tradezone = {
	change_variable = {
		name = TZ_shipping
		add = $order_size$
	}
	}
		global_var:global_south_east_asia_tradezone = {
	change_variable = {
		name = TZ_shipping
		add = $order_size$
	}
	}
}

PURCHASE_india_to_northern_american_atlantic_shipping = {
	global_var:global_east_africa_tradezone = {
	change_variable = {
		name = TZ_shipping
		add = $order_size$
	}
	}
		global_var:global_southern_africa_tradezone = {
	change_variable = {
		name = TZ_shipping
		add = $order_size$
	}
	}
		global_var:global_west_africa_tradezone = {
	change_variable = {
		name = TZ_shipping
		add = $order_size$
	}
	}
		global_var:global_caribbean_tradezone = {
	change_variable = {
		name = TZ_shipping
		add = $order_size$
	}
	}
}

PURCHASE_india_to_european_atlantic_shipping = {
	global_var:global_east_africa_tradezone = {
	change_variable = {
		name = TZ_shipping
		add = $order_size$
	}
	}
	if = {
		limit = {
			NOT = { has_global_variable = suez_canal_built }
		}
			global_var:global_southern_africa_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
			global_var:global_west_africa_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
	}
	else = {
		global_var:global_east_mediterranean_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
			global_var:global_west_mediterranean_tradezone = {
		change_variable = {
			name = TZ_shipping
			add = $order_size$
		}
		}
	}
}

PURCHASE_update_all_quarterly_shipping = {
	# DEFUNCT
	global_var:global_india_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:india_shipping
	    }
    }
    global_var:global_east_north_america_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:east_north_america_shipping
	    }
    }
    global_var:global_west_north_america_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:west_north_america_shipping
	    }
    }
    global_var:global_caribbean_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:caribbean_shipping
	    }
    }
    global_var:global_west_south_america_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:west_south_america_shipping
	    }
    }
    global_var:global_east_south_america_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:east_south_america_shipping
	    }
    }
    global_var:global_south_east_asia_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:south_east_asia_shipping
	    }
    }
    global_var:global_indo_china_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:indo_china_shipping
	    }
    }
    global_var:global_yellow_sea_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:yellow_sea_shipping
	    }
    }
    global_var:global_southern_africa_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:southern_africa_shipping
	    }
    }
    global_var:global_west_africa_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:west_africa_shipping
	    }
    }
    global_var:global_east_africa_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:east_africa_shipping
	    }
    }
    global_var:global_middle_east_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:middle_east_shipping
	    }
    }
    global_var:global_western_steppe_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:western_steppe_shipping
	    }
    }
    global_var:global_eastern_steppe_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:eastern_steppe_shipping
	    }
    }
    global_var:global_upper_yangtzi_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:upper_yangtzi_shipping
	    }
    }
    global_var:global_atlantic_seaboard_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:atlantic_seaboard_shipping
	    }
    }
    global_var:global_central_europe_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:central_europe_shipping
	    }
    }
    global_var:global_west_mediterranean_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:west_mediterranean_shipping
	    }
    }
    global_var:global_baltic_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:baltic_shipping
	    }
    }
    global_var:global_east_europe_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:east_europe_shipping
	    }
    }
    global_var:global_east_mediterranean_tradezone = {
	    set_variable = {
		    name = TZ_shipping
		    value = global_var:east_mediterranean_shipping
	    }
    }
}