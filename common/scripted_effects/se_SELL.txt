# Sale actions

## Internal - for customs unions or countries

SELL_reset_internal_trade_stockpile = { # Needs to be repeated for every tradegood
	# Scope: Random country

	# Called: At the beginning of every quarter, to refresh the temporary stockpiles

	# Format of arguments:
	# $goods_stockpile_internal$ = grain_stockpile_internal
	set_variable = {
		name = $tradegood$_stockpile_internal
		value = 0
	}
}

SELL_declare_all_internal_available = {
	# Scope: Governorship
	# Called: At the beginning of every quarter
	# Tells the internal tradezone all the stockpiles a governorship has available to sell to other governorships in the same country or customs union


	every_tradegoods_complex = {
		APPLY = SELL_declare_available_based_on_TZ
	}

}

SELL_declare_available_based_on_TZ = {
	# Scope: governorship
	# Function: While iterating through tradegoods, set the governorship's tradezone and pass it to the declare available script
	if = {
		limit = {
			capital_scope = { 
				india_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = india_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				east_north_america_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = east_north_america_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				west_north_america_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = west_north_america_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				caribbean_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = caribbean_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				west_south_america_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = west_south_america_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				east_south_america_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = east_south_america_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				south_east_asia_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = south_east_asia_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				indo_china_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = indo_china_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				yellow_sea_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = yellow_sea_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				southern_africa_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = southern_africa_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				west_africa_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = west_africa_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				east_africa_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = east_africa_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				middle_east_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = middle_east_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				western_steppe_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = western_steppe_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				eastern_steppe_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = eastern_steppe_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				upper_yangtzi_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = upper_yangtzi_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				atlantic_seaboard_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = atlantic_seaboard_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				central_europe_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = central_europe_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				west_mediterranean_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = west_mediterranean_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				baltic_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = baltic_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				east_europe_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = east_europe_tradezone
		}
	}
	else_if = {
		limit = {
			capital_scope = { 
				east_mediterranean_tradezone = { PROVINCE = yes } 
			}
		}
		SELL_declare_internal_available = {
			tradegood = $tradegood$
			tradezone = east_mediterranean_tradezone
		}
	}
}

SELL_declare_internal_available = { # WiP: Rename to declare_available as this will be used for both internal and external
	# Scope: Governorship
	set_variable = { # Within the governorship scope, track how much was sold so you can then calculate how much of a cut to get
	# See SELL_calculate_cut to see how the cut of revenue gets calculated
		name = $tradegood$_offered
		value = TRADE_governorship_for_export_internal_$tradegood$
	} # Setting this as a variable allows scoping back to check the value as set in the governorship


	var:internal_trade_scope = { # Scope to the internal trade scope, be it country or customs union
		# Add to the internal trade scope's stockpile
		change_variable = { 
			name = $tradegood$_stockpile_$tradezone$ # This is the stockpile available for this tradezone within this trade scope
			add = prev.var:$tradegood$_offered
		}
		change_variable = { # Set a parallel variable that sums up the total regardless of tradezones, for other tracking purposes
		# TODO: Set up this variable at the start of the trade phase
			name = $tradegood$_stockpile_total
			add = prev.var:$tradegood$_offered
		}
		change_variable = { # Save a parallel variable that does not have its value reduced as purchase orders are fulfilled, and can thereby reliably be used to calculate a final cut of income and deductions from governorships
			name = $tradegood$_available_at_start_of_quarter_$tradezone$ # TODO: Normalise this so it's not requiring _tradezone suffix, to match the format of the other trade effects
			add = prev.var:$tradegood$_offered
		}
		change_variable = { # Save a parallel variable that tracks the total amount offered within the internal market
			name = $tradegood$_available_at_start_of_quarter_internal
			add = prev.var:$tradegood$_offered
		}
	} 
}

SELL_reset_internal_amount_offered = {
	# Scope: governorship

	# Format of arguments:
	# $tradegood$_offered = grain_offered

	set_variable = {
		name = $tradegood$_offered
		value = 0
	}
}

SELL_reset_all_internal_amounts_offered = {
	# Scope: governorship

	every_tradegoods_complex = {
		APPLY = SELL_reset_internal_amount_offered
	}

}

SELL_calculate_all_internal_revenue_cut_percentages = {
	# Scope: governorship
	# Function: Loop through every tradegood to get this governorship's cut of their sale in its tradezone

	every_tradegoods_complex = {
		APPLY = SELL_calculate_internal_revenue_cut_based_on_tradezone
	}

}

SELL_calculate_internal_revenue_cut_based_on_tradezone = {
	# Scope: governorship
	# Function: Check the tradezone of a governorship so that it can be passed as a second argument to the internal revenue cut percentage scripted effect alongside the tradegood name
	if = {
		limit = { var:trade_center = { has_variable = is_india_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = india_tradezone # TODO: Normalise this so it doesn't need to take _tradezone suffix
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_east_north_america_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = east_north_america_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_west_north_america_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = west_north_america_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_caribbean_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = caribbean_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_west_south_america_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = west_south_america_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_east_south_america_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = east_south_america_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_south_east_asia_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = south_east_asia_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_indo_china_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = indo_china_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_yellow_sea_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = yellow_sea_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_southern_africa_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = southern_africa_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_west_africa_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = west_africa_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_east_africa_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = east_africa_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_middle_east_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = middle_east_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_western_steppe_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = western_steppe_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_eastern_steppe_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = eastern_steppe_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_upper_yangtzi_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = upper_yangtzi_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_atlantic_seaboard_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = atlantic_seaboard_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_central_europe_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = central_europe_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_west_mediterranean_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = west_mediterranean_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_baltic_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = baltic_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_east_europe_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = east_europe_tradezone
		}
	}
	else_if = {
		limit = { var:trade_center = { has_variable = is_east_mediterranean_tradezone } }
		SELL_set_internal_revenue_cut_percentage = {
			tradegood = $tradegood$
			tradezone = east_mediterranean_tradezone
		}
	}
}

SELL_set_internal_revenue_cut_percentage = {
	# Scope: governorship
	# Function: Set the governorship's cut of the total value of the given tradegood sold in this supplier zone (a tradezone within a tag)

	set_variable = { # Get the total of the goods that this governorship sent up
		name = internal_stockpile_cut_percentage_$tradegood$
		value = var:$tradegood$_offered
	}

	if = {
		limit = {
			var:internal_trade_scope = {
				var:$tradegood$_available_at_start_of_quarter_$tradezone$ > 0
			}
		}
		change_variable = { # Now divide the amount contributed by the total in the internal stockpile, getting a percentage.
			# e.g. if the governorship contributed 150 units and the internal stockpile has 1000 units, you get 0.15 (15%)
			name = internal_stockpile_cut_percentage_$tradegood$
			divide = var:internal_trade_scope.var:$tradegood$_available_at_start_of_quarter_$tradezone$ # Gets the stockpile from the internal trade scope (country or customs union) e.g. "grain_available_at_start_of_quarter_india_tradezone" TODO: Make sure this is normalised, the usual format for most of these trade 	effects is to use just the TZ name, not its full label (e.g. "india", not "india_tradezone")
		}
	}
}

DEFUNCT_SELL_calculate_internal_revenue_cut_percentage = {
	# Scope: governorship
	# Calculates how much money the governorship should get for contributing goods to the internal trade for-sale stockpile
	# This calculates the percentage BEFORE sales are made, and AFTER all the SELL_declare_available actions have been completed

	# This calculates the cut of each governorship in its tradezone group

	# Should only be called if the governorship has actually sold any of the given tradegood. How to limit this to that scenario?

	# This needs to be specific to the governorship's tradezone

	
}

SELL_get_all_internal_cuts_of_revenue = {
	# Scope: governorship
	# Function: Get the tradezone of this governorship and trigger get_internal_cut_of_revenue for every tradegood with the correct tradezone argument
	if = {
		limit = {
			var:trade_center = { has_variable = is_india_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = india
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_east_north_america_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = east_north_america
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_west_north_america_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = west_north_america
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_caribbean_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = caribbean
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_west_south_america_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = west_south_america
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_east_south_america_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = east_south_america
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_south_east_asia_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = south_east_asia
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_indo_china_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = indo_china
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_yellow_sea_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = yellow_sea
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_southern_africa_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = southern_africa
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_west_africa_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = west_africa
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_east_africa_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = east_africa
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_middle_east_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = middle_east
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_western_steppe_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = western_steppe
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_eastern_steppe_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = eastern_steppe
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_upper_yangtzi_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = upper_yangtzi
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_atlantic_seaboard_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = atlantic_seaboard
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_central_europe_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = central_europe
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_west_mediterranean_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = west_mediterranean
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_baltic_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = baltic
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_east_europe_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = east_europe
		}
	}
	else_if = {
		limit = {
			var:trade_center = { has_variable = is_east_mediterranean_tradezone }
		}
		SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {
			tradezone = east_mediterranean
		}
	}
}

SELL_pass_tradezone_get_all_internal_cuts_of_revenue = {

	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = grain
		category = essential_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = fish
		category = essential_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = livestock
		category = essential_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = tropical_fruit
		category = essential_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = mediterranean_fruit
		category = essential_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = temperate_fruit
		category = essential_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = processed_foods
		category = essential_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = clothing
		category = essential_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = furniture
		category = essential_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = pharmaceuticals
		category = essential_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = coal
		category = essential_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = whales
		category = essential_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = alcohol
		category = luxury_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = gems
		category = luxury_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = opium
		category = luxury_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = tobacco
		category = luxury_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = chocolate
		category = luxury_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = coffee
		category = luxury_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = tea
		category = luxury_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = spices
		category = luxury_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = sugar
		category = luxury_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = luxury_clothing
		category = luxury_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = luxury_furniture
		category = luxury_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = glass
		category = luxury_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = motors
		category = luxury_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = fur
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = industrial_fibres
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = textile_fibres
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = wool
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = silk
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = wood
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = stone
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = sulphur
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = peat
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = tin
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = inorganic_compounds
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = copper
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = iron
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = gold
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = silver
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = dye
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = lead
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = oil
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = hardwood
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = rubber
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = salt
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = electronics
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = construction_materials
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = steel
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = bronze
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = machine_parts
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = chemicals
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = naval_supplies
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = steel_ships
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = wooden_ships
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = petrochemicals
		category = business_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = early_munitions
		category = military_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = late_munitions
		category = military_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = early_artillery
		category = military_goods
	}
	SELL_get_internal_cut_of_revenue = {
		tradezone = $tradezone$
		tradegood = late_artillery
		category = military_goods
	}
	
}

SELL_get_internal_cut_of_revenue = {
	# WIP
	# Scope: governorship
	# Called: After all internal POs are completed.
	# Function: Get the governorship's cut of total revenue AND subtract the resources sold proportionate to their contribution to trade-scope-wide trade.

	# Format of arguments
	# $internal_total_revenue$ = internal_total_revenue_grain
	# $internal_stockpile_cut_percentage$ = internal_stockpile_cut_percentage_grain
	# $local_cut_of_revenue$ = local_internal_revenue_cut_grain
	# $stockpile_sold$ = grain_stockpile, the stockpile which is reduced in the governorship to reflect goods sold
	# $amount_sold_total$ = internal_sold_total_grain, recorded by the transfer of goods effect

	set_variable = { # Get the total revenue from the tradezone
		name = local_internal_revenue_cut_$tradegood$
		value = var:internal_trade_scope.var:$tradegood$_total_revenue_$tradezone$ # TODO: Update so that this checks income based on the governorship's TZ, as each TZ will have a unique pool of revenue according to the price of tradegoods there.
	}
	change_variable = {
		name = local_internal_revenue_cut_$tradegood$
		multiply = var:internal_stockpile_cut_percentage_$tradegood$
	}

	change_variable = {
		name = governorship_this_quarter_income_from_$category$ # Quarterly governorship income is only divvied up and given out at the end of both internal and external trade. Gets reset at the beginning of every quarter
		add = var:local_internal_revenue_cut_$tradegood$
	}

	# SUBTRACT THE RESOURCES SOLD FROM THE GOVERNORSHIPS ACCORDING TO THEIR CUT

	var:internal_trade_scope = {
		set_local_variable = {
			name = local_sold_cut
			value = var:$tradegood$_sold_total_$tradezone$
		}
	}

	change_local_variable = {
		name = local_sold_cut
		multiply = var:internal_stockpile_cut_percentage_$tradegood$
	}

	change_variable = {
		name = $tradegood$_stockpile
		subtract = local_var:local_sold_cut
	}

	owner = {
		change_variable = {
			name = country_internal_total_sold_$tradegood$
			add = local_var:local_sold_cut
		}
	}

}

SELL_split_all_income = {
	# Scope: governorship
	# Function: Split the income for each category of tradegoods between the appropriate pop groups
	SELL_split_income = {
		category = essential_goods
	}
	SELL_split_income = {
		category = luxury_goods
	}
	SELL_split_income = {
		category = business_goods
	}
	SELL_split_income = {
		category = military_goods
	}
}

SELL_calculate_actual_share_of_income = {
	set_local_variable = {
		name = this_income_from_$category$
		value = var:governorship_this_quarter_income_from_$category$
	}
	change_local_variable = {
		name = this_income_from_$category$
		multiply = var:income_share_$category$_$seller$
	}
}

SELL_split_income = {
	# Scope: governorship
	# Split the income for a single category of imported goods
	SELL_calculate_actual_share_of_income = {
		category = $category$
		seller = the_state
	}
	owner = {
		add_treasury = local_var:this_income_from_$category$
	}
	# Upper strata
	SELL_calculate_actual_share_of_income = {
		category = $category$
		seller = upper_strata
	}
	change_variable = {
		name = upper_strata_wealth
		add = local_var:this_income_from_$category$
	}
	# Middle strata
	SELL_calculate_actual_share_of_income = {
		category = $category$
		seller = middle_strata
	}
	change_variable = {
		name = middle_strata_wealth
		add = local_var:this_income_from_$category$
	}
	# Lower strata
	SELL_calculate_actual_share_of_income = {
		category = $category$
		seller = lower_strata
	}
	change_variable = {
		name = lower_strata_wealth
		add = local_var:this_income_from_$category$
	}
	# Tribesmen
	SELL_calculate_actual_share_of_income = {
		category = $category$
		seller = tribesmen
	}
	change_variable = {
		name = tribesmen_wealth
		add = local_var:this_income_from_$category$
	}
	# Indentured
	SELL_calculate_actual_share_of_income = {
		category = $category$
		seller = indentured
	}
	change_variable = {
		name = indentured_wealth
		add = local_var:this_income_from_$category$
	}
	# Slaves
	SELL_calculate_actual_share_of_income = {
		category = $category$
		seller = slaves
	}
	change_variable = {
		name = slaves_wealth
		add = local_var:this_income_from_$category$
	}
}

SELL_deduct_internal_offered_goods = {
	# Scope: governorship
	# TBC
	# Effect to actually decrease a governorship's stockpile when goods are sold from the TZ scope!
	# This will probably need two scenarios in case a governorship is selling to itself (i.e. customers for a good within the same governorship)

	# Method plan:
	# 1. Get the total sold from the TZ (so we need to be storing this in a gradually growing variable whenever a PO is completed, and that needs to be reset to 0 every quarter)
	# 2. Divide that by the cut percentage of this governorship (multiply if it's being done as <1, you get the idea)
	# 3. Subtract that amount from this governorship
	# e.g. total sold from the TZ is 1,500 out of 3,000 offered
	# ... this governorship's cut is 12%
	# ... so this governorship has to deduct 180 goods from its stockpile (and it would have offered 360)

	# Maybe this effect could be wrapped into the SELL_get_cut_of_revenue effect. Rename, "resolve_sale"?
}

## Global - for the whole world

SELL_reset_all_TZ_trade_stockpiles = {
	# Scope: Random country

	# Called: At the beginning of every quarter, to refresh the temporary stockpiles

	SELL_reset_TZ_trade_stockpile = {
		tradegood = grain
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = fish
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = livestock
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = tropical_fruit
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = mediterranean_fruit
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = temperate_fruit
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = processed_foods
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = clothing
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = furniture
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = pharmaceuticals
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = coal
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = whales
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = alcohol
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = gems
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = opium
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = tobacco
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = chocolate
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = coffee
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = tea
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = spices
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = sugar
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = luxury_clothing
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = luxury_furniture
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = glass
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = motors
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = fur
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = industrial_fibres
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = textile_fibres
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = wool
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = silk
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = wood
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = stone
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = sulphur
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = peat
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = tin
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = inorganic_compounds
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = copper
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = iron
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = gold
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = silver
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = dye
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = lead
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = oil
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = hardwood
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = rubber
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = salt
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = electronics
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = construction_materials
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = steel
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = bronze
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = machine_parts
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = chemicals
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = naval_supplies
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = steel_ships
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = wooden_ships
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = petrochemicals
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = early_munitions
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = late_munitions
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = early_artillery
	}
	SELL_reset_TZ_trade_stockpile = {
		tradegood = late_artillery
	}
}

SELL_reset_TZ_trade_stockpile = { # Needs to be repeated for every tradegood
	# Scope: Random country

	# Called: At the beginning of every quarter, to refresh the temporary stockpiles

	# Format of arguments:
	# $goods_stockpile$ = stockpile_grain

	every_in_global_list = {
		variable = list_of_trade_centers
		set_variable = {
			name = stockpile_$tradegood$
			value = 0
		}
	}
}

SELL_set_TZ_price_modifier = { # used to get local price modifier for the named good
	# Scope: TZ
	# This does NOT contain an iteration of all TZs, as it should only be run in TZs that actually supply said good.
		# the on_action should have the every_in_global_list, with a limit that they have a variable for that tradegood

	# Format of arguments:
	# $share_of_global_supply$ = share_of_global_supply_grain
	# $global_supply$ = global_supply_grain

	# Share of global supply should come from a svalue
	set_variable = {
		name = $share_of_global_supply$
		value = global_var:$global_supply$
	}
	#change_variable = {
	#
	#}
}

SELL_set_TZ_prices = {
	# Scope: TZ
	# This effect determines the sale price modifier on the global price of the given tradegood
	# This does NOT contain an iteration of all TZs, as it should only be run in TZs that actually supply said good.
		# the on_action should have the every_in_global_list, with a limit that they have a variable for that tradegood

	# Format of arguments:
	# $local_price$ = local_price_grain
	# $global_price$ = global_price_grain
	set_variable = {
		name = local_price_$tradegood$
		value = global_var:global_price_$tradegood$
	}
}

SELL_declare_all_external_available = {
	# Scope: Governorship
	# This effect gets the governorship to declare to the tradezone (TZ) what resources it has available to sell
	# Once all governorships have done this, the TZ will have a stockpile of available goods to sell in order to meet POs
	# Then the governorships will all get a cut of revenue from these sales
	every_tradegoods_complex = {
		APPLY = SELL_declare_external_available
	}
	
}

SELL_declare_external_available = {
	# Scope: Governorship

	# Format of arguments:
	# $amount_for_sale$ = TRADE_governorship_for_export_grain, svalue, see TRADE_svalues
	# $goods_stockpile$ = $tradegood$_stockpile_TZ

	set_variable = { # Within the governorship scope, track how much was sold so you can then calculate how much of a cut to get
	# See SELL_calculate_cut to see how the cut of revenue gets calculated
		name = external_offered_$tradegood$
		value = TRADE_governorship_for_export_$tradegood$
	} # Is this necessary, or can we just use the svalues?

	var:trade_center = { # Scope to the TZ
		# Add to the tradezone's stockpile
		change_variable = { # TODO: set stockpile variables back to 0 at the beginning of every quarter, using a SE in the on_action
			name = $tradegood$_stockpile_TZ # The trade center variable will have the same name as the governorship one, for ease of reference
			add = prev.var:external_offered_$tradegood$ # TODO: set this variable at the start of the trade phase
		}
		change_variable = { # Save a parallel variable that does not have its value reduced as purchase orders are fulfilled, and can thereby reliably be used to calculate a final cut of income and deductions from governorships
			name = $tradegood$_available_at_start_of_quarter_TZ
			add = prev.TRADE_governorship_for_export_$tradegood$
		}
	}
}
	# A governorship declares how much is available for its tradezone.
	# The proportion that governorship's available stock makes up of the tradezone total is the...
	#... share of gross profit that goes back to the governorship when that stockpile is bought from

SELL_calculate_external_revenue_cut_percentage = { # Calculates how much money the governorship should get for contributing goods to the tradezone's for-sale stockpile
	# This calculates the percentage BEFORE sales are made, and AFTER all the SELL_declare_available actions have been completed
	# Should only be called if the governorship has actually sold any of the given tradegood. How to limit this to that scenario?
	# Scope: governorship
	set_variable = { # Get the total of the goods that this governorship sent up
		name = external_stockpile_cut_percentage_$tradegood$
		value = var:external_offered_$tradegood$
	}

	if = {
		limit = {
			var:trade_center.var:TZ_stockpile_$tradegood$ > 0
		}
		change_variable = { # Now divide the amount contributed by the total in the internal stockpile, getting a percentage.
			# e.g. if the governorship contributed 150 units and the internal stockpile has 1000 units, you get 0.15 (15%)
			name = external_stockpile_cut_percentage_$tradegood$
			divide = var:trade_center.var:$tradegood$_available_at_start_of_quarter_$tradezone$ # Gets the total initial stockpile from the internal trade scope (country or customs union) e.g. "grain__available_at_start_of_quarter_tradezone"
		}
	}
}

SELL_get_cut_of_revenue = {
	# NOT IN USE
	# Scope: governorship
	random_trade_center = { # Scope to the tradezone
		save_scope_as = tradezone
	}
	set_variable = { # Get the total revenue from the tradezone
		name = local_external_revenue_cut_$tradegood$
		value = var:trade_center.var:$tradezone_revenue_var$ # This needs a variable name like "TZ_revenue_total_grain"
	}
	change_variable = {
		name = $local_cut_of_revenue$
		multiply = $stockpile_cut_percentage$ # This argument gets a name like "grain_stockpile_cut_percentage"
	}
}

SELL_deduct_offered_goods = {
	# Scope: governorship
	# TBC
	# Effect to actually decrease a governorship's stockpile when goods are sold from the TZ scope!
	# This will probably need two scenarios in case a governorship is selling to itself (i.e. customers for a good within the same governorship)

	# Method plan:
	# 1. Get the total sold from the TZ (so we need to be storing this in a gradually growing variable whenever a PO is completed, and that needs to be reset to 0 every quarter)
	# 2. Divide that by the cut percentage of this governorship (multiply if it's being done as <1, you get the idea)
	# 3. Subtract that amount from this governorship
	# e.g. total sold from the TZ is 1,500 out of 3,000 offered
	# ... this governorship's cut is 12%
	# ... so this governorship has to deduct 180 goods from its stockpile (and it would have offered 360)

	# Maybe this effect could be wrapped into the SELL_get_cut_of_revenue effect. Rename, "resolve_sale"?
}