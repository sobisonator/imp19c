TRADE_score_tradezone_connections = {
	# Scope: Random country
	# Function: Run the TRADE_score_tradezone_tradegood_connection scripted effect to score the cost of importing every tradegood from every other tradezone to this tradezone
	every_trade_center = {
		every_tradegoods_complex = {
			APPLY = {
				TRADE_score_tradezone_tradegood_connection
			}
		}
	}
}

TRADE_score_tradezone = {
	# Scope: Trade center province
	# Scoped to by a loop of the trade zones
	# Function: Give a score to this tradezone for the origin tradezone. This score will then be used to rank the tradezones when governorships are making international purchases. HIGHER score = WORSE deal
	# The governorship will refer to the best ranked deal in the tradezone's scope
	# That then returns the name of the preferred stockpile that is referenced when ordering

	if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_india_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = india
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_east_north_america_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = east_north_america
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_west_north_america_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = west_north_america
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_caribbean_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = caribbean
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_west_south_america_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = west_south_america
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_east_south_america_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = east_south_america
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_south_east_asia_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = south_east_asia
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_indo_china_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = indo_china
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_yellow_sea_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = yellow_sea
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_southern_africa_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = southern_africa
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_west_africa_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = west_africa
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_east_africa_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = east_africa
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_middle_east_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = middle_east
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_western_steppe_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = western_steppe
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_eastern_steppe_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = eastern_steppe
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_upper_yangtzi_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = upper_yangtzi
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_atlantic_seaboard_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = atlantic_seaboard
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_central_europe_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = central_europe
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_west_mediterranean_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = west_mediterranean
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_baltic_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = baltic
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_east_europe_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = east_europe
		}
	}
	else_if = {
		limit = {
			$origin_TZ$ = {
				has_variable = is_east_mediterranean_tradezone
			}
		}
		TRADE_get_tradezone_connection_score = {
			tradegood = $tradegood$
			origin_TZ = east_mediterranean
		}
	}

}

TRADE_score_all_tradegoods = {
	if = {
		limit = { has_variable = is_india_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = india
	    }
	}
	else_if = {
		limit = { has_variable = is_east_north_america_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = east_north_america
	    }
	}
	else_if = {
		limit = { has_variable = is_west_north_america_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = west_north_america
	    }
	}
	else_if = {
		limit = { has_variable = is_caribbean_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = caribbean
	    }
	}
	else_if = {
		limit = { has_variable = is_west_south_america_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = west_south_america
	    }
	}
	else_if = {
		limit = { has_variable = is_east_south_america_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = east_south_america
	    }
	}
	else_if = {
		limit = { has_variable = is_south_east_asia_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = south_east_asia
	    }
	}
	else_if = {
		limit = { has_variable = is_indo_china_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = indo_china
	    }
	}
	else_if = {
		limit = { has_variable = is_yellow_sea_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = yellow_sea
	    }
	}
	else_if = {
		limit = { has_variable = is_southern_africa_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = southern_africa
	    }
	}
	else_if = {
		limit = { has_variable = is_west_africa_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = west_africa
	    }
	}
	else_if = {
		limit = { has_variable = is_east_africa_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = east_africa
	    }
	}
	else_if = {
		limit = { has_variable = is_middle_east_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = middle_east
	    }
	}
	else_if = {
		limit = { has_variable = is_western_steppe_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = western_steppe
	    }
	}
	else_if = {
		limit = { has_variable = is_eastern_steppe_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = eastern_steppe
	    }
	}
	else_if = {
		limit = { has_variable = is_upper_yangtzi_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = upper_yangtzi
	    }
	}
	else_if = {
		limit = { has_variable = is_atlantic_seaboard_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = atlantic_seaboard
	    }
	}
	else_if = {
		limit = { has_variable = is_central_europe_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = central_europe
	    }
	}
	else_if = {
		limit = { has_variable = is_west_mediterranean_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = west_mediterranean
	    }
	}
	else_if = {
		limit = { has_variable = is_baltic_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = baltic
	    }
	}
	else_if = {
		limit = { has_variable = is_east_europe_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = east_europe
	    }
	}
	else_if = {
		limit = { has_variable = is_east_mediterranean_tradezone }
		TRADE_score_tradezone = {
			origin_TZ = scope:origin_TZ_scope
	        tradegood = $tradegood$
	        #tradezone = east_mediterranean
	    }
	}
}

TRADE_score_tradezone_tradegood_connection = {
	# Scope: trade center province
	# Function: Score the best connections to import $tradegood$ from the target tradezone to the current tradezone, accounting only for price of the goods and transport costs. Tariffs specific to countries will be dealt with on a country-by-country basis in a separate effect, which governorships will then pick up and combine with this tradezone connection score to pick their supplier by getting the lowest score.
	# Called: At the beginning of every trade phase
	save_scope_as = origin_TZ_scope
	every_trade_center = {
		every_tradegoods_complex = {
			APPLY = TRADE_score_all_tradegoods
		}
	}
}

TRADE_score_country_connections = {
	# Scope: country
	# Function: Score this country's trade partners in terms of their tariffs. Connections between tradezones are ranked separately, and combined with this score will be used by governorships when purchasing to select their supplier by combining the country and tradezone scores to get the lowest score.

	# WiP - on hold for the moment. Governorships will ignore tariffs while selecting supplier tradezones. They will just buy from every country in the trade partners list which has governorships in the selected supplier tradezone
	save_scope_as = scoring_country

	every_in_list = {
		variable = list_of_trade_partners_all_categories

	}
}

TRADE_reset_TZ_internal_rankings = {
	# Scope: Every governorship
	# Function: Clear the rankings for internal trades in trade zones
	# Called: After every internal trade scope is finished doing its internal trade, so that the next scope's governorships rank their preferred supplier zones properly.
	if = {
		limit = { has_variable = 1st_rank_internal_supplier_$tradegood$ }
		remove_variable = 1st_rank_internal_supplier_$tradegood$ #Is it even necessary to remove 1st rank? It will always get reset by the ranking effect no matter what
		if = {
			limit = { has_variable = 2nd_rank_internal_supplier_$tradegood$ }
			remove_variable = 2nd_rank_internal_supplier_$tradegood$
			if = {
				limit = { has_variable = 3rd_rank_internal_supplier_$tradegood$ }
				remove_variable = 3rd_rank_internal_supplier_$tradegood$
				# etc... purely concept at the moment
			}
		}
	}
}

TRADE_reset_all_tradegoods_TZ_internal_rankings = {
	# Scope: country
	every_tradegoods_complex = {
		APPLY = TRADE_reset_TZ_internal_rankings
	}	
}

TRADE_reset_purchase_order_tender_completions = {
	every_tradegoods_complex = {
		APPLY = TRADE_reset_purchase_order_tender_completions_governorship
	}
}

TRADE_reset_purchase_order_tender_completions_governorship = {
	# Scope: governorship
	if = {
		limit = { has_variable = $tradegood$_purchase_order_tender_complete }

		remove_variable = $tradegood$_purchase_order_tender_complete
	}	
}

TRADE_save_connection_time_values = {
	# Scope: random country, scoping to every trade center province
	# Function: Save variables in each trade center province containing the travel time between two trade zones so that they can be referenced without re-checking svalues every time
	# The format of these variables is here_to_$tradezone$
	# Called: at the start of the trade phase
	every_trade_center = {
		if = {
			limit = {
				has_variable = is_india_tradezone
			}
			set_connection_time_vars = {
				tradezone = india
			}
		}
		else_if = {
			limit = {
				has_variable = is_east_north_america_tradezone
			}
			set_connection_time_vars = {
				tradezone = east_north_america
			}
		}
		else_if = {
			limit = {
				has_variable = is_west_north_america_tradezone
			}
			set_connection_time_vars = {
				tradezone = west_north_america
			}
		}
		else_if = {
			limit = {
				has_variable = is_caribbean_tradezone
			}
			set_connection_time_vars = {
				tradezone = caribbean
			}
		}
		else_if = {
			limit = {
				has_variable = is_west_south_america_tradezone
			}
			set_connection_time_vars = {
				tradezone = west_south_america
			}
		}
		else_if = {
			limit = {
				has_variable = is_east_south_america_tradezone
			}
			set_connection_time_vars = {
				tradezone = east_south_america
			}
		}
		else_if = {
			limit = {
				has_variable = is_south_east_asia_tradezone
			}
			set_connection_time_vars = {
				tradezone = south_east_asia
			}
		}
		else_if = {
			limit = {
				has_variable = is_indo_china_tradezone
			}
			set_connection_time_vars = {
				tradezone = indo_china
			}
		}
		else_if = {
			limit = {
				has_variable = is_yellow_sea_tradezone
			}
			set_connection_time_vars = {
				tradezone = yellow_sea
			}
		}
		else_if = {
			limit = {
				has_variable = is_southern_africa_tradezone
			}
			set_connection_time_vars = {
				tradezone = southern_africa
			}
		}
		else_if = {
			limit = {
				has_variable = is_west_africa_tradezone
			}
			set_connection_time_vars = {
				tradezone = west_africa
			}
		}
		else_if = {
			limit = {
				has_variable = is_east_africa_tradezone
			}
			set_connection_time_vars = {
				tradezone = east_africa
			}
		}
		else_if = {
			limit = {
				has_variable = is_middle_east_tradezone
			}
			set_connection_time_vars = {
				tradezone = middle_east
			}
		}
		else_if = {
			limit = {
				has_variable = is_western_steppe_tradezone
			}
			set_connection_time_vars = {
				tradezone = western_steppe
			}
		}
		else_if = {
			limit = {
				has_variable = is_eastern_steppe_tradezone
			}
			set_connection_time_vars = {
				tradezone = eastern_steppe
			}
		}
		else_if = {
			limit = {
				has_variable = is_upper_yangtzi_tradezone
			}
			set_connection_time_vars = {
				tradezone = upper_yangtzi
			}
		}
		else_if = {
			limit = {
				has_variable = is_atlantic_seaboard_tradezone
			}
			set_connection_time_vars = {
				tradezone = atlantic_seaboard
			}
		}
		else_if = {
			limit = {
				has_variable = is_central_europe_tradezone
			}
			set_connection_time_vars = {
				tradezone = central_europe
			}
		}
		else_if = {
			limit = {
				has_variable = is_west_mediterranean_tradezone
			}
			set_connection_time_vars = {
				tradezone = west_mediterranean
			}
		}
		else_if = {
			limit = {
				has_variable = is_baltic_tradezone
			}
			set_connection_time_vars = {
				tradezone = baltic
			}
		}
		else_if = {
			limit = {
				has_variable = is_east_europe_tradezone
			}
			set_connection_time_vars = {
				tradezone = east_europe
			}
		}
		else_if = {
			limit = {
				has_variable = is_east_mediterranean_tradezone
			}
			set_connection_time_vars = {
				tradezone = east_mediterranean
			}
		}
	}
}

set_connection_time_vars = {
	# Scope: Trade center province
	# Function: while looping through all the tradezones as strings, save global variables with value equal to the connections to other tradezones
        if = {
            limit = {
                NOT = { has_variable = is_india_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_india_tradezone
                value = $tradezone$_to_india_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_east_north_america_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_east_north_america_tradezone
                value = $tradezone$_to_east_north_america_svalue
                }
        }
        if = {
            limit = {
                NOT = { has_variable = is_west_north_america_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_west_north_america_tradezone
                value = $tradezone$_to_west_north_america_svalue
                }
        }
        if = {
            limit = {
                NOT = { has_variable = is_caribbean_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_caribbean_tradezone
                value = $tradezone$_to_caribbean_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_west_south_america_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_west_south_america_tradezone
                value = $tradezone$_to_west_south_america_svalue
                }
        }
        if = {
            limit = {
                NOT = { has_variable = is_east_south_america_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_east_south_america_tradezone
                value = $tradezone$_to_east_south_america_svalue
                }
        }
        if = {
            limit = {
                NOT = { has_variable = is_south_east_asia_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_south_east_asia_tradezone
                value = $tradezone$_to_south_east_asia_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_indo_china_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_indo_china_tradezone
                value = $tradezone$_to_indo_china_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_yellow_sea_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_yellow_sea_tradezone
                value = $tradezone$_to_yellow_sea_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_southern_africa_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_southern_africa_tradezone
                value = $tradezone$_to_southern_africa_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_west_africa_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_west_africa_tradezone
                value = $tradezone$_to_west_africa_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_east_africa_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_east_africa_tradezone
                value = $tradezone$_to_east_africa_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_middle_east_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_middle_east_tradezone
                value = $tradezone$_to_middle_east_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_western_steppe_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_western_steppe_tradezone
                value = $tradezone$_to_western_steppe_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_eastern_steppe_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_eastern_steppe_tradezone
                value = $tradezone$_to_eastern_steppe_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_upper_yangtzi_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_upper_yangtzi_tradezone
                value = $tradezone$_to_upper_yangtzi_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_atlantic_seaboard_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_atlantic_seaboard_tradezone
                value = $tradezone$_to_atlantic_seaboard_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_central_europe_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_central_europe_tradezone
                value = $tradezone$_to_central_europe_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_west_mediterranean_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_west_mediterranean_tradezone
                value = $tradezone$_to_west_mediterranean_svalue
                }
        }
        if = {
            limit = {
                NOT = { has_variable = is_baltic_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_baltic_tradezone
                value = $tradezone$_to_baltic_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_east_europe_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_east_europe_tradezone
                value = $tradezone$_to_east_europe_svalue
            }
        }
        if = {
            limit = {
                NOT = { has_variable = is_east_mediterranean_tradezone }
                    # Can not have travel time to itself!
            }
            set_variable = {
                name = here_to_east_mediterranean_tradezone
                value = $tradezone$_to_east_mediterranean_svalue
               }
        }
}

tradezone_setup_effect = {
	#Makes the most populated province in a trade zone a center of trade.
	#REQUIRED INPUT: TRADE_ZONE = XXX (scripted trigger name)
	random_region = {
		limit = {
			$TRADE_ZONE$ = {
				PROVINCE = no
			}
		}
		ordered_region_province = {
			order_by = total_population
			add_permanent_province_modifier = {
				name = regional_center_of_trade_level_1
			}
			add_to_global_variable_list = {
				name = list_of_trade_centers
				target = THIS
			}
			set_variable = is_$TRADE_ZONE$ # Record the name of the TZ in the province
			set_variable = { # use to reference the tradezone province using an arbitrary string
				name = TZ_name
				value = flag:$TRADE_ZONE$
			}
			save_scope_as = trade_zone_province
			# Make this province a pirate haven so that we can trigger a custom tradezone GUI widget to appear on the trade map - pirate haven is the only customisable mapiconlayer widget with arbitrary placement that appears in fog of war, so it's been hijacked for this purpose
			add_permanent_province_modifier = {
				name = pirate_haven_modifier
				duration = -1
			}
			every_tradegood_complex = {
				APPLY = TRADE_setup_import_and_export_trackers
			}
		}
		# Set global variable so that the province can be scoped to by name from anywhere
		set_global_variable = {
			name = global_$TRADE_ZONE$
			value = scope:trade_zone_province
		}
	}
}

TRADE_setup_import_and_export_trackers = {
	# Scope: Trade center province
	# Function: Set up a list of provinces in every TZ that contain varibles for import and export of tradegoods
	random_province = {
		limit = {
			NOT = {
				has_variable = is_TZ_tradegood_tracker
			}
		}
		set_variable = is_TZ_tradegood_tracker
		save_scope_as = tracker_province
		set_variable = {
			name = tracker_for_TZ
			value = scope:trade_zone_province
		}
		set_variable = {
			name = tradegood
			value = flag:$tradegood$
		}
		set_variable = {
			name = amt_imported
			value = 0
		}
		set_variable = {
			name = amt_exported
			value = 0
		}
		scope:trade_zone_province = {
			add_to_variable_list = {
				name = list_of_tradegood_trackers
				target = scope:tracker_province
			}
			set_variable = {
				name = $tradegood$_tracker
				value = scope:tracker_province
			}
		}
	}
}

TRADE_update_TZ_tradegood_trackers = {
	# Scope: Country, scoping to every trade center
	# Function: Reset the quarterly trackers to 0
	# Called: Every quarterly trade tick
	every_trade_center = {
		save_scope_as = root_TZ
		every_in_list = {
			variable = list_of_tradegood_trackers
			set_variable = {
				name = amt_imported
				value = 0
			}
			set_variable = {
				name = amt_exported
				value = 0
			}
		}
	}
}

TRADE_update_governorship_TZ_vars = {
	# Scope: Governorship
	# Function: Runs as a child of TRADE_update_governorship_TZs
	# Save the list of tradezones present in the internal trade scope
	# And save the name of the tradezone as a string in the governorship
	save_scope_as = prev_governorship

	set_variable = TZ_is_$TZ$

	random_trade_center = {
		limit = { $TZ$ = { PROVINCE = yes } }
		save_scope_as = trade_center_province
		set_global_variable = {
			name = handling_trade_center_province
			value = scope:trade_center_province
		}
	}
	# The list of tradezones in the internal trade scope is cleared and reset every quarter by TRADE_update_governorship_TZs
	var:internal_trade_scope = {
		add_to_variable_list = {
			name = governorships_in_$TZ$
			target = scope:prev_governorship
		}
		if = {
			limit = {
				scope:trade_center_province = {
					NOT = { is_in_list = list_of_tradezones_in_internal_trade_scope }
				}
			}
			add_to_variable_list = { # Keep a list in the internal trade scope of tradezones, so that they can be iterated through when sorting favoured suppliers
				name = list_of_tradezones_in_internal_trade_scope
				target = scope:trade_center_province
			}
		}
	}
}


TRADE_count_country_TZs = {
	save_scope_as = country_scope
	set_variable = {
		name = country_num_of_TZs
		value = 0
	}
	every_governorships = {
		if = {
			limit = {
				has_local_variable = previous_TZ
				NOT = { var:trade_center = local_var:previous_TZ }
			}
			scope:country_scope = {
				change_variable = {
					name = country_num_of_TZs
					add = 1
				}
			}
		}
		set_local_variable = {
			name = previous_TZ
			value = var:trade_center
		}
	}
}

TRADE_update_governorship_TZs = {
	# Function:	Add a variable to every governorship that stores the tradezone scope, so that you can easily scope to the TZ from a governorship with minimal performance overhead whenever necessary. This front-loads the performance overhead to the start of the game and any update periods.
	# Scope:	Governorship
	# Called:	1) Whenever the governorship change effects are called (e.g. change of territory)
	#			2) At the beginning of the game
	# NOTE:		Actually calls several other effects that set the variables
	save_scope_as = this_governorship

	# Clear the previous values in the internal trade scope
	var:internal_trade_scope = {
		if = {
			limit = {
				has_variable_list = list_of_tradezones_in_internal_trade_scope
			}
			every_in_list = {
				variable = list_of_tradezones_in_internal_trade_scope
				remove_from_list = list_of_tradezones_in_internal_trade_scope
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_india_tradezone
			}
			every_in_list = {
				variable = governorships_in_india_tradezone
				remove_from_list = governorships_in_india_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_east_north_america_tradezone
			}
			every_in_list = {
				variable = governorships_in_east_north_america_tradezone
				remove_from_list = governorships_in_east_north_america_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_west_north_america_tradezone
			}
			every_in_list = {
				variable = governorships_in_west_north_america_tradezone
				remove_from_list = governorships_in_west_north_america_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_caribbean_tradezone
			}
			every_in_list = {
				variable = governorships_in_caribbean_tradezone
				remove_from_list = governorships_in_caribbean_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_west_south_america_tradezone
			}
			every_in_list = {
				variable = governorships_in_west_south_america_tradezone
				remove_from_list = governorships_in_west_south_america_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_east_south_america_tradezone
			}
			every_in_list = {
				variable = governorships_in_east_south_america_tradezone
				remove_from_list = governorships_in_east_south_america_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_south_east_asia_tradezone
			}
			every_in_list = {
				variable = governorships_in_south_east_asia_tradezone
				remove_from_list = governorships_in_south_east_asia_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_indo_china_tradezone
			}
			every_in_list = {
				variable = governorships_in_indo_china_tradezone
				remove_from_list = governorships_in_indo_china_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_yellow_sea_tradezone
			}
			every_in_list = {
				variable = governorships_in_yellow_sea_tradezone
				remove_from_list = governorships_in_yellow_sea_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_southern_africa_tradezone
			}
			every_in_list = {
				variable = governorships_in_southern_africa_tradezone
				remove_from_list = governorships_in_southern_africa_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_west_africa_tradezone
			}
			every_in_list = {
				variable = governorships_in_west_africa_tradezone
				remove_from_list = governorships_in_west_africa_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_east_africa_tradezone
			}
			every_in_list = {
				variable = governorships_in_east_africa_tradezone
				remove_from_list = governorships_in_east_africa_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_middle_east_tradezone
			}
			every_in_list = {
				variable = governorships_in_middle_east_tradezone
				remove_from_list = governorships_in_middle_east_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_western_steppe_tradezone
			}
			every_in_list = {
				variable = governorships_in_western_steppe_tradezone
				remove_from_list = governorships_in_western_steppe_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_eastern_steppe_tradezone
			}
			every_in_list = {
				variable = governorships_in_eastern_steppe_tradezone
				remove_from_list = governorships_in_eastern_steppe_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_upper_yangtzi_tradezone
			}
			every_in_list = {
				variable = governorships_in_upper_yangtzi_tradezone
				remove_from_list = governorships_in_upper_yangtzi_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_atlantic_seaboard_tradezone
			}
			every_in_list = {
				variable = governorships_in_atlantic_seaboard_tradezone
				remove_from_list = governorships_in_atlantic_seaboard_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_central_europe_tradezone
			}
			every_in_list = {
				variable = governorships_in_central_europe_tradezone
				remove_from_list = governorships_in_central_europe_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_west_mediterranean_tradezone
			}
			every_in_list = {
				variable = governorships_in_west_mediterranean_tradezone
				remove_from_list = governorships_in_west_mediterranean_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_baltic_tradezone
			}
			every_in_list = {
				variable = governorships_in_baltic_tradezone
				remove_from_list = governorships_in_baltic_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_east_europe_tradezone
			}
			every_in_list = {
				variable = governorships_in_east_europe_tradezone
				remove_from_list = governorships_in_east_europe_tradezone
			}
		}
		if = {
			limit = {
				has_variable_list = governorships_in_east_mediterranean_tradezone
			}
			every_in_list = {
				variable = governorships_in_east_mediterranean_tradezone
				remove_from_list = governorships_in_east_mediterranean_tradezone
			}
		}
	}

	if = {
		limit = { NOT = { has_variable = trade_center } }
		capital_scope = {
			if = {
				limit = { india_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = india_tradezone
					}
				}
			}
			else_if = {
				limit = { east_north_america_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = east_north_america_tradezone
					}
				}
			}
			else_if = {
				limit = { west_north_america_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = west_north_america_tradezone
					}
				}
			}
			else_if = {
				limit = { caribbean_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = caribbean_tradezone
					}
				}
			}
			else_if = {
				limit = { west_south_america_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = west_south_america_tradezone
					}
				}
			}
			else_if = {
				limit = { east_south_america_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = east_south_america_tradezone
					}
				}
			}
			else_if = {
				limit = { south_east_asia_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = south_east_asia_tradezone
					}
				}
			}
			else_if = {
				limit = { indo_china_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = indo_china_tradezone
					}
				}
			}
			else_if = {
				limit = { yellow_sea_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = yellow_sea_tradezone
					}
				}
			}
			else_if = {
				limit = { southern_africa_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = southern_africa_tradezone
					}
				}
			}
			else_if = {
				limit = { west_africa_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = west_africa_tradezone
					}
				}
			}
			else_if = {
				limit = { east_africa_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = east_africa_tradezone
					}
				}
			}
			else_if = {
				limit = { middle_east_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = middle_east_tradezone
					}
				}
			}
			else_if = {
				limit = { western_steppe_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = western_steppe_tradezone
					}
				}
			}
			else_if = {
				limit = { eastern_steppe_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = eastern_steppe_tradezone
					}
				}
			}
			else_if = {
				limit = { upper_yangtzi_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = upper_yangtzi_tradezone
					}
				}
			}
			else_if = {
				limit = { atlantic_seaboard_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = atlantic_seaboard_tradezone
					}
				}
			}
			else_if = {
				limit = { central_europe_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = central_europe_tradezone
					}
				}
			}
			else_if = {
				limit = { west_mediterranean_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = west_mediterranean_tradezone
					}
				}
			}
			else_if = {
				limit = { baltic_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = baltic_tradezone
					}
				}
			}
			else_if = {
				limit = { east_europe_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = east_europe_tradezone
					}
				}
			}
			else_if = {
				limit = { east_mediterranean_tradezone = { PROVINCE = yes } }
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = east_mediterranean_tradezone
					}
				}
			}
			else = {
				prev = {
					TRADE_update_governorship_TZ_vars = {
						#governorship_scope = scope:this_governorship
						TZ = east_mediterranean_tradezone # FAILSAFE - MUST BE REMOVED!
					}
				}
			}
		}
		set_variable = { # Save the reference to the trade center scope in the governorship
			name = trade_center
			value = global_var:handling_trade_center_province
		}
		remove_global_variable = handling_trade_center_province
	}  
}

# Function:	Set a province as the "trade center" scope for a tradezone (TZ) to act as a scope for that TZ.
# Scope:	any
# Called:	1) At the beginning of the game

TRADE_setup_tradezones = { # Calls the tradezone_setup_effect for every tradezone
	#Populate the world with trade centers - 1 per tradezone.
	set_global_variable = economic_enhancement_setup_done
	tradezone_setup_effect = {
		 TRADE_ZONE = india_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = east_north_america_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = west_north_america_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = caribbean_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = west_south_america_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = east_south_america_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = south_east_asia_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = indo_china_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = yellow_sea_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = southern_africa_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = west_africa_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = east_africa_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = middle_east_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = western_steppe_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = eastern_steppe_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = upper_yangtzi_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = atlantic_seaboard_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = central_europe_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = west_mediterranean_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = baltic_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = east_europe_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = east_mediterranean_tradezone
	}
}

# Function:	Get every governorship in a specified trade zone, only used to put goverorship svalues into trade zone svalues
# Scope:	Country

stockpile_every_gov_in_tradezone = {
	every_governorships = {
		random_governorship_state = {
			limit = {
				 any_state_province = {
					$TRADE_ZONE$ = { PROVINCE = yes }
				}
			}
			random_state_province = {
				$TRADE_ZONE$ = { PROVINCE = yes }
			}
		}
		add = $STOCKPILE$
	}
}

# Function:	Store all the necessary values as variables every quarter
# Scope:	Governorship
# Called:	1) Every quarter before doing trade
#			2) At the beginning of the game, to prevent any errors from missing variables referenced in svalues
# NOTE:		Actually calls several other effects that set the variables
TRADE_governorship_set_variables = {
	TRADE_governorship_get_pops_this_quarter = yes
}

# Function:	Store population values for a governorship in variables so that they can be referenced multiple times quickly in one quarter, rather than being re-calculated every time as a svalue
# Scope:	Governorship
# Called:	1) Every quarter before doing trade
#			2) At the beginning of the game, to prevent any errors from missing variables referenced in svalues
# NOTE:		Whenever this is called, the variables are overwritten.

TRADE_governorship_get_pops_this_quarter = {
	set_variable = {
		name = governorship_population
		value = governorship_population
	}
	set_variable = {
		name = governorship_upper_strata
		value = governorship_upper_strata
	}
	set_variable = {
		name = governorship_middle_strata
		value = governorship_middle_strata
	}
	set_variable = {
		name = governorship_lower_strata
		value = governorship_lower_strata
	}
	set_variable = {
		name = governorship_proletariat
		value = governorship_proletariat
	}
	set_variable = {
		name = governorship_indentured
		value = governorship_indentured
	}
	set_variable = {
		name = governorship_tribesmen
		value = governorship_tribesmen
	}
	set_variable = {
		name = governorship_slaves
		value = governorship_slaves
	}
}

# Effects supporting the PURCHASE and SELL effects

TRADE_set_internal_trade_scope = {
	# Function: Tell the governorship whether it's selling to a country or a customs union when doing internal trade
	# Scope: governorship
	# Called: Every quarter before doing trade
	if = {
		limit = {
			AND = {
				NOT = { has_variable = federation_customs_union }
				owner = {
					NOT = { has_variable = overlord_customs_union }
				}
			}
		}
		set_variable = {
			name = internal_trade_scope
			value = owner
		}

	}

	else_if = {
		limit = {
			AND = {
				NOT = { has_variable = federation_customs_union }
				owner = {
					is_subject = yes
					has_variable = overlord_customs_union # Customs unions in dependencies
				}
			}
		}
#		owner = {
#			var:overlord_customs_union = {
#				save_scope_as = internal_trade_scope
#			}
#		}
		if = {
			limit = {
				owner.var:overlord_customs_union = {
					has_variable = overlord_customs_union
				}
			}
			set_variable = {
				name = internal_trade_scope
				value = owner.var:overlord_customs_union.var:overlord_customs_union
			}
		}
		else = {
			set_variable = {
				name = internal_trade_scope
				value = owner.var:overlord_customs_union
			}
		}
	}

	else_if = {
		limit = {
			has_variable = federation_customs_union
		}
		var:federation_customs_union = {
			save_scope_as = internal_trade_scope
		}
		set_variable = {
			name = internal_trade_scope
			value = scope:internal_trade_scope
		}
	}

	else = {
		set_variable = {
			name = internal_trade_scope
			value = owner
		}
	}
}

TRADE_create_overlord_customs_union = {
	c:$overlord_tag$ = {
		save_scope_as = overlord_scope
	}
	c:$subject_tag$ = {
		set_variable = {
			name = overlord_customs_union
			value = scope:overlord_scope
		}
	}
}

TRADE_set_trade_capacity = {
	# Function: Set a variable derived from the infrastructure in a governorship that informs the system how much a governorship can import and export
	# See TRADE_svalues: TRADE_governorship_infrastructure_capacity_svalue
	# Scope: governorship
	# Called: NOT AT THE MOMENT, BUILDING SETUP NEEDS TO BE REFINED
	# TODO: Factor this in as a max value in all declare availables and purchase orders
	set_variable = {
		name = governorship_trade_capacity
		value = TRADE_governorship_infrastructure_capacity_svalue
	}
}

TRADE_reset_quarterly_governorship_values = {
	# Scope: governorship
	# Trade infrastructure limit variable
	TRADE_set_trade_capacity = yes
	TRADE_reset_governorship_tax_totals = yes
	# Income and spend variables
	set_variable = {
		name = governorship_this_quarter_income_from_essential_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_income_from_luxury_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_income_from_business_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_income_from_military_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_spend_on_luxury_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_spend_on_business_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_spend_on_essential_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_spend_on_military_goods
		value = 0
	}
	every_tradegoods_complex = {
		APPLY = TRADE_set_this_quarter_spends_on_transport
	}
	set_variable = {
		name = governorship_this_quarter_spend_on_transport
		value = 0
	}
	every_tradegood_complex = {
		APPLY = TRADE_reset_quarterly_spend_on_tradegood
	}
	# PURCHASE_reset_quarterly_var = yes # OSBOLETE - unused
	SELL_reset_all_internal_amounts_offered = yes
}

TRADE_reset_quarterly_spend_on_tradegood = {
	set_variable = {
		name = governorship_this_quarter_spend_on_$tradegood$
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_imported_$tradegood$
		value = 0
	}
}

TRADE_set_this_quarter_spends_on_transport = {
	# Scope: governorship
	set_variable = {
		name = governorship_this_quarter_spend_on_transport_$tradegood$ # Track the transport costs for the player's benefit
		value = 0
	}
}

TRADE_set_spender_shares = {
	# Scope: governorship
	# Function: Get all the split of costs between pop groups and the state into variables so they don't have to be re-calculated every time they're called.
	# These come already as percentages
	TRADE_set_spender_share = {
		category = essential_goods
	}
	TRADE_set_spender_share = {
		category = luxury_goods
	}
	TRADE_set_spender_share = {
		category = business_goods
	}
	TRADE_set_spender_share = {
		category = military_goods
	}
	
}

TRADE_set_spender_share = {
	# Scope: governorship
	set_variable = {
		name = spender_share_$category$_upper_strata
		value = TRADE_spender_share_percentage_essential_goods_upper_strata
	}
	set_variable = {
		name = spender_share_$category$_middle_strata
		value = TRADE_spender_share_percentage_essential_goods_middle_strata
	}
	set_variable = {
		name = spender_share_$category$_lower_strata
		value = TRADE_spender_share_percentage_essential_goods_lower_strata
	}
	set_variable = {
		name = spender_share_$category$_proletariat
		value = TRADE_spender_share_percentage_essential_goods_proletariat
	}
	set_variable = {
		name = spender_share_$category$_indentured
		value = TRADE_spender_share_percentage_essential_goods_indentured
	}
	set_variable = {
		name = spender_share_$category$_tribesmen
		value = TRADE_spender_share_percentage_essential_goods_tribesmen
	}
	set_variable = {
		name = spender_share_$category$_slaves
		value = TRADE_spender_share_percentage_essential_goods_slaves
	}
	set_variable = {
		name = spender_share_$category$_the_state
		value = TRADE_spender_share_percentage_essential_goods_the_state
	}
}

TRADE_set_income_shares = {
	# Scope: governorship
	# Function: Get all the split of costs between pop groups and the state into variables so they don't have to be re-calculated every time they're called.
	# These come already as percentages
	TRADE_set_income_share = {
		category = essential_goods
	}
	TRADE_set_income_share = {
		category = luxury_goods
	}
	TRADE_set_income_share = {
		category = business_goods
	}
	TRADE_set_income_share = {
		category = military_goods
	}
	
}

TRADE_set_income_share = {
	# Scope: governorship
	set_variable = {
		name = income_share_$category$_upper_strata
		value = TRADE_income_share_percentage_$category$_upper_strata
	}
	set_variable = {
		name = income_share_$category$_middle_strata
		value = TRADE_income_share_percentage_$category$_middle_strata
	}
	set_variable = {
		name = income_share_$category$_lower_strata
		value = TRADE_income_share_percentage_$category$_lower_strata
	}
	set_variable = {
		name = income_share_$category$_proletariat
		value = TRADE_income_share_percentage_$category$_proletariat
	}
	set_variable = {
		name = income_share_$category$_indentured
		value = TRADE_income_share_percentage_$category$_indentured
	}
	set_variable = {
		name = income_share_$category$_tribesmen
		value = TRADE_income_share_percentage_$category$_tribesmen
	}
	set_variable = {
		name = income_share_$category$_slaves
		value = TRADE_income_share_percentage_$category$_slaves
	}
	set_variable = {
		name = income_share_$category$_the_state
		value = TRADE_income_share_percentage_$category$_the_state
	}
}

TRADE_reset_quarterly_trade_scope_values = {
	# Scope: random country
	TRADE_reset_internal_pools = yes
	# SELL_reset_all_internal_trade_stockpiles = yes # OBSOLETE - REMOVE
}

TRADE_reset_total_ordered_sold_and_bought_pools = {
	# Scope: country
	set_variable = {
		name = country_internal_total_ordered_$tradegood$
		value = 0
	}
	set_variable = {
		name = country_internal_bought_total_$tradegood$
		value = 0
	}
	set_variable = {
		name = country_internal_total_sold_$tradegood$
		value = 0
	}
	set_variable = {
		name = average_spend_on_$tradegood$
		value = 0
	}
}

TRADE_reset_tradegood_total_internal_stockpile = {
	# Scope: country/trade zone province
	# Function: set to 0 the tracking variables that store the total amount of every tradegood offered in an internal trade scope
	set_variable = {
		name = $tradegood$_stockpile_total
		value = 0
	}
}

TRADE_reset_internal_pools = {
	# Scope: country
	# Function: set to 0 all the variables which allow caching of values used in trade.
	every_country = {
		set_variable = {
			name = internal_income_pool
			value = 0
		}
		set_variable = {
			name = national_trade_income_pool
			value = 0
		}
		#TRADE_reset_all_tradegoods_TZ_internal_rankings = yes
		every_tradegoods_complex = {
			APPLY = TRADE_reset_tradegood_total_internal_stockpile
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_amount_sold
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_stockpiles
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_revenue_total
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_total_ordered_sold_and_bought_pools
		}
		TRADE_reset_quarterly_tax_totals = yes
	}
	every_federation = {
		set_variable = {
			name = internal_income_pool
			value = 0
		}
		#TRADE_reset_all_tradegoods_TZ_internal_rankings = yes
		every_tradegoods_complex = {
			APPLY = TRADE_reset_tradegood_total_internal_stockpile
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_amount_sold
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_stockpiles
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_revenue_total
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_total_ordered_sold_and_bought_pools
		}
	}
	# TRADE_reset_internal_amounts_sold = yes # Replaced by every_tradegoods_complex + TRADE_reset_internal_amount_sold
}

TRADE_reset_TZ_pools = {
	every_trade_center = {
		set_variable = {
			name = TZ_income_pool
			value = 0
		}
		set_variable = {
			name = TZ_this_quarter_transport_pool
			value = 0
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_TZ_amount_sold
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_TZ_trade_stockpile
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_TZ_trade_revenue_total
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_TZ_total_ordered_sold_and_bought_pools
		}
		# TRADE_reset_quarterly_tax_totals = yes # Tax will have to be dealt with in a different scope for external trade
	}
	# TRADE_reset_internal_amounts_sold = yes # Replaced by every_tradegoods_complex + TRADE_reset_internal_amount_sold
}

TRADE_reset_trt_ias = {
	set_variable = {
		name = $tradegood$_sold_total_india
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_east_north_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_west_north_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_caribbean
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_west_south_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_east_south_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_south_east_asia
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_indo_china
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_yellow_sea
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_southern_africa
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_west_africa
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_east_africa
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_middle_east
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_western_steppe
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_eastern_steppe
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_upper_yangtzi
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_atlantic_seaboard
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_central_europe
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_west_mediterranean
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_baltic
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_east_europe
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_east_mediterranean
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_india
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_east_north_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_west_north_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_caribbean
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_west_south_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_east_south_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_south_east_asia
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_indo_china
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_yellow_sea
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_southern_africa
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_west_africa
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_east_africa
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_middle_east
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_western_steppe
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_eastern_steppe
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_upper_yangtzi
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_atlantic_seaboard
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_central_europe
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_west_mediterranean
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_baltic
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_east_europe
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_east_mediterranean
		value = 0
	}
}

TRADE_reset_internal_amount_sold = {
	# Scope: internal trade scope

	# Format of arguments:
	# $tradegood$_sold_total_$tradezone$ = grain_sold_total_india
	set_variable = {
		name = $tradegood$_sold_total_india
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_east_north_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_west_north_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_caribbean
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_west_south_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_east_south_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_south_east_asia
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_indo_china
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_yellow_sea
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_southern_africa
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_west_africa
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_east_africa
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_middle_east
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_western_steppe
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_eastern_steppe
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_upper_yangtzi
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_atlantic_seaboard
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_central_europe
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_west_mediterranean
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_baltic
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_east_europe
		value = 0
	}
	set_variable = {
		name = $tradegood$_sold_total_east_mediterranean
		value = 0
	}
}

TRADE_clear_total_sold_and_revenue_flag = {
	# Scope: every internal trade scope
	# Called: at end of trade phase
	# Function: clear the variable whose absence flags that sold total and total revenue vars need to be reset to 0
	remove_variable = total_sold_and_revenue_reset
}

TRADE_clear_local_revenue_cut_flags = {
	# Scope: governorship
	# Called: at end of trade phase
	# Function: clear the variable whose absence flags that the total revenue cut var for each tradegood in every governorship has not been updated
	every_tradegoods_complex = {
		APPLY = TRADE_clear_local_revenue_cut_flag
	}
}

TRADE_clear_local_revenue_cut_flag = {
	remove_variable = local_revenue_cut_reset_$tradegood$
}

DEFUNCT_TRADE_reset_TZ_amount_sold = {
	# Scope: trade center province

	# Format of arguments:
	# $internal_sold_total$ = internal_sold_total_grain
	set_variable = {
		name = TZ_sold_total_$tradegood$
		value = 0
	}
}

TRADE_reset_internal_trade_stockpiles = {
	# Scope: Internal trade scope: country or federation province
	# Function: Set all the stockpiles per tradezone for a trade scope to 0.
	# The limits allow the effect to skip over any tradezones that are not traded in by that trade scope
	if = {
		limit = { 
			has_variable_list = governorships_in_india_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = india_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_east_north_america_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = east_north_america_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_west_north_america_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = west_north_america_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_caribbean_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = caribbean_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_west_south_america_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = west_south_america_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_east_south_america_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = east_south_america_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_south_east_asia_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = south_east_asia_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_indo_china_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = indo_china_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_yellow_sea_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = yellow_sea_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_southern_africa_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = southern_africa_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_west_africa_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = west_africa_tradezone
		}
	}
	else_if = {
		limit = {
			has_variable_list = governorships_in_east_africa_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = east_africa_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_middle_east_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = middle_east_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_western_steppe_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = western_steppe_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_eastern_steppe_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = eastern_steppe_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_upper_yangtzi_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = upper_yangtzi_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_atlantic_seaboard_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = atlantic_seaboard_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_central_europe_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = central_europe_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_west_mediterranean_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = west_mediterranean_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_baltic_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = baltic_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_east_europe_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = east_europe_tradezone
		}
	}
	if = {
		limit = {
			has_variable_list = governorships_in_east_mediterranean_tradezone
		}
		TRADE_reset_internal_trade_stockpile = {
			tradegood = $tradegood$
			tradezone = east_mediterranean_tradezone
		}
	}
}

TRADE_reset_internal_trade_stockpile = {
	# Scope: internal trade scope
	# Function: Reset the temporary stockpiles used for trading to 0
	set_variable = {
		name = $tradegood$_stockpile_$tradezone$
		value = 0
	}
	set_variable = {
		name = $tradegood$_available_at_start_of_quarter_$tradezone$
		value = 0
	}
}

TRADE_reset_TZ_trade_stockpile = {
	set_variable = {
		name = $tradegood$_stockpile_TZ
		value = 0
	}
	set_variable = {
		name = $tradegood$_available_at_start_of_quarter_TZ
		value = 0
	}
}

TRADE_reset_all_internal_trade_revenue_totals = {
	# Scope: Random country
	# Called: Quarterly
	# Resets all internal trade stockpiles to 0
	# OBSOLETE: Merged into TRADE_reset_internal_pools
}

TRADE_reset_internal_trade_revenue_total = {
	# Scope: internal trade scope
	# Function: set the total revenue tracking vars to 0, so they can be summed up from scratch again
	set_variable = {
		name = $tradegood$_total_revenue_india
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_east_north_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_west_north_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_caribbean
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_west_south_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_east_south_america
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_south_east_asia
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_indo_china
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_yellow_sea
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_southern_africa
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_west_africa
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_east_africa
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_middle_east
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_western_steppe
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_eastern_steppe
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_upper_yangtzi
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_atlantic_seaboard
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_central_europe
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_west_mediterranean
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_baltic
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_east_europe
		value = 0
	}
	set_variable = {
		name = $tradegood$_total_revenue_east_mediterranean
		value = 0
	}
	# WiP - etc...
}

TRADE_update_all_global_base_prices = {
	every_tradegoods_complex = {
		APPLY = TRADE_update_global_base_price
	}
}

TRADE_update_global_base_price = { # DEFUNCT, not used anymore, replaced by PRICE effects in every tradezone
	# Scope: Random country, doesn't matter
	# This effect sets the global base price for a tradegood
	# The formula is:
	# Base price = global units demanded / units produced # For now, anyway
	# This checks the given good

	# Format of arguments:
	# $global_price$ = global_price_grain
	# $global_supply$ = global_supply_grain
	# $global_demand$ = global_demand_grain
	# $demand_good$ = DEMAND_grain, svalue, see DEMAND_svalues
	# $supply_good$ = GOODS_governorship_grain_produced, svalue, see GOODS_svalues

	set_global_variable = {
		name = global_demand_$tradegood$
		value = 1 # Starts 1, gets augmented
	}

	set_global_variable = {
		name = global_supply_$tradegood$
		value = 1 # Starts 1, gets augmented
	}

	# Add the total of all demand and supply for this good around the world
	every_country = {
		every_governorships = {
			change_global_variable = {
				name = global_demand_$tradegood$
				add = DEMAND_$tradegood$
			}
			change_global_variable = {
				name = global_supply_$tradegood$
				add = GOODS_governorship_$tradegood$_produced
			}
		}
	}
	# NOTE: Global supply should probably be the amount offered in all TZs, not produced in every governorship
	# See TRADE_svalues TRADE_global_offered_grain for WiP example

	# Now calculate the price
	set_global_variable = {
		name = global_price_$tradegood$
		value = global_var:global_demand_$tradegood$
	}
	change_global_variable = {
		name = global_price_$tradegood$
		divide = global_var:global_supply_$tradegood$
	}

	change_global_variable = {
		name = global_price_$tradegood$
		multiply = 0.01
	}

}

# DEFUNCT - see SELL_set_TZ_prices_OLD for what this used to do
#TRADE_update_all_TZ_local_prices = {
#	every_trade_center = {
#		every_tradegoods_complex = {
#			APPLY = SELL_set_TZ_prices
#		}
#	}
#}

TRADE_set_all_local_internal_cuts_of_revenue = {
	# Scope: governorship
	# Called: start of game
	# Sets all local internal cuts of revenue for this quarter to 0
	# Needs to exist because the trade effects cannot set variables that don't exist yet
	set_variable = {
		name = local_internal_revenue_cut_grain
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_fish
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_livestock
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_vegetables
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_tropical_fruit
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_mediterranean_fruit
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_temperate_fruit
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_processed_foods
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_clothing
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_furniture
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_pharmaceuticals
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_coal
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_whales
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_alcohol
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_gems
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_opium
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_tobacco
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_chocolate
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_coffee
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_tea
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_spices
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_sugar
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_luxury_clothing
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_luxury_furniture
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_glass
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_motors
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_fur
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_industrial_fibres
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_textile_fibres
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_wool
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_silk
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_wood
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_stone
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_sulphur
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_peat
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_tin
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_inorganic_compounds
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_copper
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_iron
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_gold
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_silver
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_dye
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_lead
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_oil
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_hardwood
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_rubber
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_salt
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_electronics
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_construction_materials
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_steel
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_bronze
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_machine_parts
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_chemicals
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_naval_supplies
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_steel_ships
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_wooden_ships
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_petrochemicals
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_early_munitions
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_late_munitions
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_early_artillery
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_late_artillery
		value = 0
	}
}

TRADE_set_all_internal_stockpile_cut_percentages = {
	# Scope: governorship
	# Called: start of game
	# Sets all local internal revenue cut percentages for this quarter to 0
	# Needs to exist because the trade effects cannot set variables that don't exist yet
	set_variable = {
		name = internal_stockpile_cut_percentage_grain
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_fish
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_livestock
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_tropical_fruit
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_mediterranean_fruit
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_temperate_fruit
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_processed_foods
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_clothing
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_furniture
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_pharmaceuticals
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_coal
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_whales
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_alcohol
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_gems
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_opium
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_tobacco
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_chocolate
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_coffee
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_tea
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_spices
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_sugar
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_luxury_clothing
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_luxury_furniture
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_glass
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_motors
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_fur
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_industrial_fibres
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_textile_fibres
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_wool
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_silk
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_wood
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_stone
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_sulphur
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_peat
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_tin
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_inorganic_compounds
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_copper
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_iron
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_gold
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_silver
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_dye
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_lead
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_oil
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_hardwood
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_rubber
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_salt
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_electronics
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_construction_materials
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_steel
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_bronze
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_machine_parts
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_chemicals
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_naval_supplies
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_steel_ships
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_wooden_ships
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_petrochemicals
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_early_munitions
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_late_munitions
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_early_artillery
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_late_artillery
		value = 0
	}
}

TRADE_setup_internal_trade_cuts = {
	TRADE_set_all_local_internal_cuts_of_revenue = yes
	TRADE_set_all_internal_stockpile_cut_percentages = yes
}

TRADE_resolve_internal_payments = {
	# Scope: random country
	# Function: Resolves the transfer of money between buyers and sellers for all the internally traded goods this quarter
	# Called: At the end of each quarter, once all tradegoods have been transacted
	TRADE_set_spender_shares = yes
	TRADE_set_income_shares = yes
	PURCHASE_split_all_costs = yes
	SELL_split_all_income = yes
}

TRADE_prepare_quarterly_values = {
	# Scope: random country
	# Function: set up and reset all the values that are used in trade
	TRADE_update_all_global_base_prices = yes
	
	TRADE_update_all_TZ_local_prices = yes
	
	TRADE_reset_internal_pools = yes
	
	TRADE_reset_quarterly_trade_scope_values = yes
	
	# TRADE_reset_all_internal_trade_stockpiles = yes # REMOVED - OBSOLETE
	
	TRADE_reset_all_internal_trade_revenue_totals = yes
	
	# TRADE_reset_internal_amounts_sold = yes # REMOVED - OBSOLETE
}

# Taxes

TRADE_setup_tax_rates = {
	TRADE_setup_internal_trade_tax = yes
}

TRADE_setup_internal_trade_tax = {
	# Scope: country
	# Function: Create the variables referenced when taxing internal trade
	# Each tax rate is a percentage, measured from 0 to 1
	# The value of thing being taxed is then multiplied by the tax rate
	set_variable = {
		name = internal_sales_tax_rate
		value = 0.2 #Debug. Default = 0. This should be on a slider or something
	}
}

TRADE_setup_governorship_for_export_internal_vars = {
	set_variable = {
		name = $tradegood$_available_at_start_of_quarter_internal
		value = 0
	}
}

TRADE_reset_quarterly_tax_totals = {
	set_variable = {
		name = national_quarterly_revenue_from_internal_sales_tax_essential_goods
		value = 0
	}
	set_variable = {
		name = national_quarterly_revenue_from_internal_sales_tax_luxury_goods
		value = 0
	}
	set_variable = {
		name = national_quarterly_revenue_from_internal_sales_tax_business_goods
		value = 0
	}
	set_variable = {
		name = national_quarterly_revenue_from_internal_sales_tax_military_goods
		value = 0
	}
}

TRADE_reset_governorship_tax_totals = {
	set_variable = {
		name = governorship_quarterly_revenue_from_internal_sales_tax_essential_goods
		value = 0
	}
	set_variable = {
		name = governorship_quarterly_revenue_from_internal_sales_tax_luxury_goods
		value = 0
	}
	set_variable = {
		name = governorship_quarterly_revenue_from_internal_sales_tax_business_goods
		value = 0
	}
	set_variable = {
		name = governorship_quarterly_revenue_from_internal_sales_tax_military_goods
		value = 0
	}
}

#### Specific to external trade, or where external and internal trade interact.

TRADE_get_average_price_of_tradegood = {
	# UNUSED - but kept for posterity
	# Scope: country
	# Function: get the average price of a tradegood in your nation

	# Single-tradezone countries
	# If the country has governorships in no more than one tradezone, this is a simple task and should skip all of the hard work ahead. This scenario comes first.
	if = {
		limit = {
			num_of_tradezones = 1
		}
		random_governorships = {
			save_scope_as = random_governorship
		}
		set_variable = { # National average price is simply the price in the only TZ
			name = national_average_price_$tradegood$
			value = scope:random_governorship.var:trade_center.local_price_$tradegood$
		}
	}

	else = {
		set_variable = {
			name = national_average_price_$tradegood$
			value = 0
		}
		every_governorships = {
			set_local_variable = {
				name = percentage_of_national_production_$tradegood$
				value = GOODS_governorship_$tradegood$_produced
			}
			change_local_variable = {
				name = percentage_of_national_production_$tradegood$
				divide = GOODS_national_production_$tradegood$
			}
			var:trade_center = {
				#
			}
		}
	}

}

TRADE_create_tag_supply_zones = { 
	# Scope: Country
	# Function: Group together governorships based on their tradezone for the given tag
	# A tag's supply zones act as sellers for purchasing trade partners

	# Clear all previously existing tag supply zones
	# Ideally if the territory of this tag has not changed since last quarter, do not do this
	# A trigger will need to be created for this, following a more advanced script system for recording territory changes (this will be necessary in any case for managing all the data held in governorships)

	save_scope_as = this_country
	
	# Get every governorship's tradezone and create a number of lists in the country based on those
	every_governorships = {
		if = {
			limit = {
				region = {
					capital_scope 
				}
			}
		}
	}
	
}

TRADE_get_tradezone = {
	# Scope: governorship
	# 
}

TRADE_set_preferred_suppliers = {
	# Scope: governorship
	# Function: set the preferred routes targeted by purchase orders within every trade zone.
	# Creates an ordered list of tradezones in each trade center scope for every tradegood.

}

TRADE_get_preferred_supplier = {
	# Scope: governorship
	# Function: sets the order of priority for preferred trade routes for the named tradegood
	# Go out to every trade center and check if it has any stock of the named tradegood available

	# Needs a condition to check what category the goods are.
	# Maybe a scripted trigger to check based on $goods$, returning $category$ somehow.
	# A get_category scripted trigger?


	owner = {
		ordered_in_list = {
			variable = list_of_trade_partners_all_categories
			order_by = var:average_price_of_$tradegood$
		}
	}

	every_trade_center = {
		limit = {
			var:$tradegood$_stockpile_TZ > 0 # Don't bother ranking trade centers with no available stock
		}
		order_by = {
			value = 0
			add = export_attractiveness # The base attractiveness of a tradezone for export.
			add = import_attractiveness # The 
		}
	}
}

# TZ ranking

TRADE_rank_supplier_TZs_all_tradegoods = {
	every_tradegood_complex = {
		APPLY = TRADE_rank_supplier_TZs
	}
}

TRADE_rank_supplier_TZs = {
	# Scope: trade center province
	# Function: For one tradegood, rank all the other tradezones in terms of the best deal for moving X units of the tradegood when accounting for transport costs
	save_scope_as = purchaser_TZ_scope
	every_trade_center = {
		# No limit; foreign tradezones are allowed to be ranked over self.
		if = {
			limit = { has_variable = is_india_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = india
		    }
		}
		else_if = {
			limit = { has_variable = is_east_north_america_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = east_north_america
		    }
		}
		else_if = {
			limit = { has_variable = is_west_north_america_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = west_north_america
		    }
		}
		else_if = {
			limit = { has_variable = is_caribbean_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = caribbean
		    }
		}
		else_if = {
			limit = { has_variable = is_west_south_america_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = west_south_america
		    }
		}
		else_if = {
			limit = { has_variable = is_east_south_america_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = east_south_america
		    }
		}
		else_if = {
			limit = { has_variable = is_south_east_asia_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = south_east_asia
		    }
		}
		else_if = {
			limit = { has_variable = is_indo_china_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = indo_china
		    }
		}
		else_if = {
			limit = { has_variable = is_yellow_sea_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = yellow_sea
		    }
		}
		else_if = {
			limit = { has_variable = is_southern_africa_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = southern_africa
		    }
		}
		else_if = {
			limit = { has_variable = is_west_africa_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = west_africa
		    }
		}
		else_if = {
			limit = { has_variable = is_east_africa_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = east_africa
		    }
		}
		else_if = {
			limit = { has_variable = is_middle_east_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = middle_east
		    }
		}
		else_if = {
			limit = { has_variable = is_western_steppe_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = western_steppe
		    }
		}
		else_if = {
			limit = { has_variable = is_eastern_steppe_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = eastern_steppe
		    }
		}
		else_if = {
			limit = { has_variable = is_upper_yangtzi_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = upper_yangtzi
		    }
		}
		else_if = {
			limit = { has_variable = is_atlantic_seaboard_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = atlantic_seaboard
		    }
		}
		else_if = {
			limit = { has_variable = is_central_europe_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = central_europe
		    }
		}
		else_if = {
			limit = { has_variable = is_west_mediterranean_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = west_mediterranean
		    }
		}
		else_if = {
			limit = { has_variable = is_baltic_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = baltic
		    }
		}
		else_if = {
			limit = { has_variable = is_east_europe_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = east_europe
		    }
		}
		else_if = {
			limit = { has_variable = is_east_mediterranean_tradezone }
			TRADE_rank_supplier_TZ = {
				purchaser_TZ = scope:purchaser_TZ_scope
		        tradegood = $tradegood$
		        supplier_TZ = east_mediterranean
		    }
		}
	}
	every_trade_center = {

	}
}

TRADE_rank_supplier_TZ = {
	# Scope: Trade center province, scoped from a purchaser and being considered to supply tradegoods
	# Scoped to by a loop of the trade zones available in an internal trade scope
	# Function: Give a score to this tradezone for the potential purchaser. This score will then be used to rank the provinces. HIGHER score = WORSE deal
	# Passes the tradezone name as an argument to TRADE_get_TZ_tradegood_score
	# That then returns the name of the preferred stockpile that is referenced when ordering

	if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_india_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = india
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_east_north_america_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = east_north_america
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_west_north_america_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = west_north_america
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_caribbean_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = caribbean
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_west_south_america_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = west_south_america
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_east_south_america_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = east_south_america
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_south_east_asia_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = south_east_asia
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_indo_china_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = indo_china
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_yellow_sea_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = yellow_sea
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_southern_africa_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = southern_africa
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_west_africa_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = west_africa
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_east_africa_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = east_africa
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_middle_east_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = middle_east
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_western_steppe_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = western_steppe
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_eastern_steppe_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = eastern_steppe
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_upper_yangtzi_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = upper_yangtzi
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_atlantic_seaboard_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = atlantic_seaboard
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_central_europe_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = central_europe
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_west_mediterranean_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = west_mediterranean
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_baltic_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = baltic
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_east_europe_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = east_europe
		}
	}
	else_if = {
		limit = {
			$purchaser_TZ$ = {
				has_variable = is_east_mediterranean_tradezone
			}
		}
		TRADE_get_TZ_tradegood_score = {
			supplier_TZ = $supplier_TZ$
			tradegood = $tradegood$
			purchaser_TZ = east_mediterranean
		}
	}
}

TRADE_get_TZ_tradegood_score = {
	# Scope: Trade center province
	# Function: Takes a string substitution from TRADE_rank_supplier_TZ to turn the dynamically passed tradezone of the purchaser into part of the tradezone distance variable name

	# Creates a score variable that is formatted like:
	# grain_supplier_score_here_from_india_tradezone
	# This is then used by the purchaser TZ to rank the best suppliers

	# Total score is the price of the order plus cost of transport

	# Steps:
	# Add the movement cost between tradezones (0 if the same tradezone) - how to find this reasonably? We need to identify the variable for this tradezone to the originator province's tradezone. This would be easier if the movement cost variables were saved in the trade center province scopes so we could grab them right away...
	# distance = var:here_to_$tradezone$
	# Add the price of the tradegood in that tradezone (modified somehow to add up sensibly)
	# (for international trade, we'll want to factor in tariff rates, but that shouldn't matter in customs unions)
	global_var:global_$purchaser_TZ$_tradezone = {
		set_variable = { # Base = cost
			name = $tradegood$_supplier_score_here_from_$supplier_TZ$_tradezone
			value = global_var:global_$supplier_TZ$_tradezone.var:local_price_$tradegood$
		}
		change_variable = {
			name = $tradegood$_supplier_score_here_from_$supplier_TZ$_tradezone
			multiply = 100 # TODO: Arbitrary, needs balancing
		}
		if = {
			limit = {
				global_var:global_$supplier_TZ$_tradezone = {
					has_variable = here_to_$purchaser_TZ$_tradezone
				}
			}
			change_variable = { # Add distance
				name = $tradegood$_supplier_score_here_from_$supplier_TZ$_tradezone
				add = global_var:global_$supplier_TZ$_tradezone.var:here_to_$purchaser_TZ$_tradezone
			}
		}
		change_variable = {
			name = $tradegood$_supplier_score_here_from_$supplier_TZ$_tradezone
			multiply = -1 # order_by goes from highest to lowest
		}
	}


}

## NOTES
PURCHASE_purchase_from_ITS = {
	# When purchasing from internal trade scope, only do so from tradezones within the ITS
	var:internal_trade_scope = {
		ordered_trade_center = {
			order_by = {
				value = 0
				add = var:$tradegood$_supplier_score_here_from_$supplier_TZ$_tradezone # The TZ of the purchaser governorship
			}
			max = 6
		}
	}
}

TRADE_create_global_tradegood_list = {
	# Scope: Random country
	# Function: Create a list of province scopes to hold information about tradegoods and enable them to be 
	# Called: At game start
	every_tradegood_complex = {
		APPLY = TRADE_create_global_tradegood_object
	}
}

TRADE_create_global_tradegood_object = {
	random_province = {
		limit = {
			NOT = {
				has_variable = is_tradegood_object
			}
		}
		set_variable = is_tradegood_object
		save_scope_as = tradegood_object
		set_variable = {
			name = tradegood_name
			value = flag:$tradegood$
		}
		if = {
			limit = {
				OR = {
					var:$tradegood$_name = flag:grain
					var:$tradegood$_name = flag:livestock
					var:$tradegood$_name = flag:vegetables
					var:$tradegood$_name = flag:fish
					var:$tradegood$_name = flag:temperate_fruit
					var:$tradegood$_name = flag:mediterranean_fruit
					var:$tradegood$_name = flag:tropical_fruit
					var:$tradegood$_name = flag:processed_food
					var:$tradegood$_name = flag:clothing
					var:$tradegood$_name = flag:furniture
					var:$tradegood$_name = flag:pharmaceuticals
					var:$tradegood$_name = flag:petrochemicals
				}
			}
			set_variable = {
				name = tradegood_category
				value = flag:essential_goods
			}
		}
		else_if = {
			limit = {
					var:$tradegood$_name = flag:wool
					var:$tradegood$_name = flag:textile_fibres
					var:$tradegood$_name = flag:industrial_fibres
					var:$tradegood$_name = flag:wood
					var:$tradegood$_name = flag:stone
					var:$tradegood$_name = flag:inorganic_compounds
					var:$tradegood$_name = flag:sulphur
					var:$tradegood$_name = flag:whales
					var:$tradegood$_name = flag:tin
					var:$tradegood$_name = flag:copper
					var:$tradegood$_name = flag:iron
					var:$tradegood$_name = flag:gold
					var:$tradegood$_name = flag:silver
					var:$tradegood$_name = flag:lead
					var:$tradegood$_name = flag:coal
					var:$tradegood$_name = flag:oil
					var:$tradegood$_name = flag:rubber
					var:$tradegood$_name = flag:salt
					var:$tradegood$_name = flag:petrochemicals
					var:$tradegood$_name = flag:naval_supplies
					var:$tradegood$_name = flag:motors
					var:$tradegood$_name = flag:rare_alloys
					var:$tradegood$_name = flag:electronics
					var:$tradegood$_name = flag:chemicals
					var:$tradegood$_name = flag:machine_parts
					var:$tradegood$_name = flag:bronze
					var:$tradegood$_name = flag:steel
					var:$tradegood$_name = flag:construction_materials
					var:$tradegood$_name = flag:glass
			}
			set_variable = {
				name = tradegood_category
				value = flag:business_goods
			}
		}
		else_if = {
			limit = {
					var:$tradegood$_name = flag:tobacco
					var:$tradegood$_name = flag:sugar
					var:$tradegood$_name = flag:opium
					var:$tradegood$_name = flag:coffee
					var:$tradegood$_name = flag:tea
					var:$tradegood$_name = flag:gems
					var:$tradegood$_name = flag:hardwood
					var:$tradegood$_name = flag:dye
					var:$tradegood$_name = flag:spices
					var:$tradegood$_name = flag:chocolate
					var:$tradegood$_name = flag:fur
					var:$tradegood$_name = flag:alcohol
					var:$tradegood$_name = flag:luxury_clothing
			}
			set_variable = {
				name = tradegood_category
				value = flag:luxury_goods
			}
		}
		else_if = {
			limit = {
				var:$tradegood$_name = flag:steel_ships
				var:$tradegood$_name = flag:wooden_ships
				var:$tradegood$_name = flag:munitions
				var:$tradegood$_name = flag:late_munitions
				var:$tradegood$_name = flag:early_artillery
				var:$tradegood$_name = flag:late_artillery
			}
			set_variable = {
				name = tradegood_category
				value = flag:military_goods
			}
		}

		if = {
			limit = {
				var:$tradegood$_name = flag:clothing
				var:$tradegood$_name = flag:luxury_clothing
				var:$tradegood$_name = flag:alcohol
				var:$tradegood$_name = flag:pharmaceuticals
				var:$tradegood$_name = flag:furniture
				var:$tradegood$_name = flag:luxury_furniture
				var:$tradegood$_name = flag:glass
				var:$tradegood$_name = flag:processed_foods
				var:$tradegood$_name = flag:chemicals
				var:$tradegood$_name = flag:machine_parts
				var:$tradegood$_name = flag:bronze
				var:$tradegood$_name = flag:steel
				var:$tradegood$_name = flag:construction_materials
				var:$tradegood$_name = flag:rare_alloys
				var:$tradegood$_name = flag:electronics
				var:$tradegood$_name = flag:motors
				var:$tradegood$_name = flag:munitions
				var:$tradegood$_name = flag:late_munitions
				var:$tradegood$_name = flag:naval_supplies
				var:$tradegood$_name = flag:steel_ships
				var:$tradegood$_name = flag:wooden_ships
				var:$tradegood$_name = flag:early_artillery
				var:$tradegood$_name = flag:late_artillery
				var:$tradegood$_name = flag:petrochemicals
			}
			set_variable = {
				name = is_manufactured
				value = 1
			}
		}
		else = {
			set_variable = {
				name = is_manufactured
				value = 0
			}
		}
		add_to_global_variable_list	= {
			name = global_tradegoods_list

			target = scope:tradegood_object
		}
	}
}

TRADE_order_producers = {
	# Scope: country
	# Function: Order the amount of production for every country, for the given tradegood
	clear_variable_list = top_producers_$tradegood$
	ordered_country = {
		limit = {
			GOODS_national_production_$tradegood$ > 0
		}
		order_by = {
			value = GOODS_national_production_$tradegood$
		}
		max = 6
		check_range_bounds = no
		save_scope_as = producer
		ROOT = {
			add_to_variable_list = {
				name = top_producers_$tradegood$
				target = scope:producer
			}
		}
	}
}

TRADE_order_consumers = {
	# Scope: country
	# Function: Order the amount of production for every country, for the given tradegood
	clear_variable_list = top_consumers_$tradegood$
	ordered_country = {
		limit = {
			DEMAND_country_$tradegood$ > 0
		}
		order_by = {
			value = DEMAND_country_$tradegood$
		}
		max = 6
		check_range_bounds = no
		save_scope_as = consumer
		ROOT = {
			add_to_variable_list = {
				name = top_consumers_$tradegood$
				target = scope:consumer
			}
		}
	}
}