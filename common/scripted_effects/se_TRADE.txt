tradezone_setup_effect = {
	#Makes the most populated province in a trade zone a center of trade.
	#REQUIRED INPUT: TRADE_ZONE = XXX (scripted trigger name)
	random_region = {
		limit = {
			$TRADE_ZONE$ = {
				PROVINCE = no
			}
		}
		ordered_region_province = {
			order_by = total_population
			add_permanent_province_modifier = {
				name = regional_center_of_trade_level_1
			}
			add_to_global_variable_list = {
				name = list_of_trade_centers
				target = THIS
			}
			set_variable = $TRADE_ZONE$ # Record the name of the TZ in the province
		}
	}
}

# Function:	Add a variable to every governorship that stores the tradezone scope, so that you can easily scope to the TZ from a governorship with minimal performance overhead whenever necessary. This front-loads the performance overhead to the start of the game and any update periods.
# Scope:	Governorship
# Called:	1) Whenever the governorship change effects are called (e.g. change of territory)
#			2) At the beginning of the game
# NOTE:		Actually calls several other effects that set the variables

TRADE_update_governorship_TZs = {
	if = {
		limit = { NOT = { has_variable = trade_center } }
		capital_scope = {
			if = {
				limit = { india_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { india_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { east_north_america_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { east_north_america_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { west_north_america_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { west_north_america_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { caribbean_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { caribbean_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { west_south_america_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { west_south_america_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { east_south_america_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { east_south_america_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { south_east_asia_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { south_east_asia_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { indo_china_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { indo_china_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { yellow_sea_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { yellow_sea_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { southern_africa_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { southern_africa_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { west_africa_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { west_africa_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { east_africa_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { east_africa_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { middle_east_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { middle_east_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { western_steppe_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { western_steppe_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { eastern_steppe_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { eastern_steppe_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { upper_yangtzi_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { upper_yangtzi_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { atlantic_seaboard_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { atlantic_seaboard_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { central_europe_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { central_europe_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { west_mediterranean_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { west_mediterranean_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { baltic_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { baltic_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { east_europe_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { east_europe_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
			else_if = {
				limit = { east_mediterranean_tradezone = { PROVINCE = yes } }
				random_trade_center = {
					limit = { east_mediterranean_tradezone = { PROVINCE = yes } }
					save_scope_as = trade_center_province
				}
			}
		}
		set_variable = { # Save the reference to the trade center scope in the governorship
			name = trade_center
			value = scope:trade_center_province
		}
	}  
}

# Function:	Set a province as the "trade center" scope for a tradezone (TZ) to act as a scope for that TZ.
# Scope:	any
# Called:	1) At the beginning of the game

TRADE_setup_tradezones = { # Calls the tradezone_setup_effect for every tradezone
	#Populate the world with trade centers - 1 per tradezone.
	set_global_variable = economic_enhancement_setup_done
	tradezone_setup_effect = {
		 TRADE_ZONE = india_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = east_north_america_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = west_north_america_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = caribbean_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = west_south_america_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = east_south_america_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = south_east_asia_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = indo_china_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = yellow_sea_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = southern_africa_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = west_africa_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = east_africa_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = middle_east_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = western_steppe_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = eastern_steppe_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = upper_yangtzi_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = atlantic_seaboard_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = central_europe_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = west_mediterranean_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = baltic_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = east_europe_tradezone
	}
	tradezone_setup_effect = {
		 TRADE_ZONE = east_mediterranean_tradezone
	}
}

# Function:	Get every governorship in a specified trade zone, only used to put goverorship svalues into trade zone svalues
# Scope:	Country

stockpile_every_gov_in_tradezone = {
	every_governorships = {
		random_governorship_state = {
			limit = {
				 any_state_province = {
					$TRADE_ZONE$ = { PROVINCE = yes }
				}
			}
			random_state_province = {
				$TRADE_ZONE$ = { PROVINCE = yes }
			}
		}
		add = $STOCKPILE$
	}
}

# Function:	Store all the necessary values as variables every quarter
# Scope:	Governorship
# Called:	1) Every quarter before doing trade
#			2) At the beginning of the game, to prevent any errors from missing variables referenced in svalues
# NOTE:		Actually calls several other effects that set the variables
TRADE_governorship_set_variables = {
	TRADE_governorships_get_pops_this_quarter = yes
}

# Function:	Store population values for a governorship in variables so that they can be referenced multiple times quickly in one quarter, rather than being re-calculated every time as a svalue
# Scope:	Governorship
# Called:	1) Every quarter before doing trade
#			2) At the beginning of the game, to prevent any errors from missing variables referenced in svalues
# NOTE:		Whenever this is called, the variables are overwritten.

TRADE_governorship_get_pops_this_quarter = {
	set_variable = {
		name = gov_total_pop_this_quarter
		value = governorship_population
	}
	set_variable = {
		name = gov_upper_strata_this_quarter
		value = governorship_upper_strata
	}
	set_variable = {
		name = gov_middle_strata_this_quarter
		value = governorship_middle_strata
	}
	set_variable = {
		name = gov_lower_strata_this_quarter
		value = governorship_lower_strata
	}
	set_variable = {
		name = gov_indentured_this_quarter
		value = governorship_indentured
	}
	set_variable = {
		name = gov_tribesmen_this_quarter
		value = governorship_tribesmen
	}
	set_variable = {
		name = gov_slaves_this_quarter
		value = governorship_slaves
	}
}

# Effects supporting the PURCHASE and SELL effects

TRADE_set_internal_trade_scope = {
	# Function: Tell the governorship whether it's selling to a country or a customs union when doing internal trade
	# Scope: governorship
	# Called: Every quarter before doing trade
	if = {
		limit = {
			AND = {
				NOT = { has_variable = federation_customs_union }
				capital_scope.owner = {
					NOT = { has_variable = overlord_customs_union }
				}
			}
		}
		set_variable = {
			name = internal_trade_scope
			value = capital_scope.owner
		}

	}
	else_if = {
		limit = {
			AND = {
				NOT = { has_variable = federation_customs_union }
				capital_scope.owner = {
					is_subject = yes
					has_variable = overlord_customs_union # Customs unions in dependencies
				}
			}
		}
		set_variable = {
			name = internal_trade_scope
			value = var:overlord_customs_union
		}
	}

	else = {
		set_variable = {
			name = internal_trade_scope
			value = var:federation_customs_union
		}
	}
}

TRADE_set_trade_capacity = {
	# Function: Set a variable derived from the infrastructure in a governorship that informs the system how much a governorship can import and export
	# See TRADE_svalues: TRADE_governorship_infrastructure_capacity_svalue
	# Scope: governorship
	# Called: NOT AT THE MOMENT, BUILDING SETUP NEEDS TO BE REFINED
	# TODO: Factor this in as a max value in all declare availables and purchase orders
	set_variable = {
		name = governorship_trade_capacity
		value = TRADE_governorship_infrastructure_capacity_svalue
	}
}

TRADE_reset_quarterly_governorship_values = {
	# Scope: governorship
	# Trade infrastructure limit variable
	TRADE_set_trade_capacity = yes
	TRADE_reset_governorship_tax_totals = yes
	# Income and spend variables
	set_variable = {
		name = governorship_this_quarter_income_from_essential_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_income_from_luxury_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_income_from_business_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_income_from_military_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_spend_on_luxury_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_spend_on_business_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_spend_on_essential_goods
		value = 0
	}
	set_variable = {
		name = governorship_this_quarter_spend_on_military_goods
		value = 0
	}
	# PURCHASE_reset_quarterly_var = yes # OSBOLETE - unused
	SELL_reset_all_internal_amounts_offered = yes
}

TRADE_set_spender_shares = {
	# Scope: governorship
	# Function: Get all the split of costs between pop groups and the state into variables so they don't have to be re-calculated every time they're called.
	# These come already as percentages
	TRADE_set_spender_share = {
		category = essential_goods
	}
	TRADE_set_spender_share = {
		category = luxury_goods
	}
	TRADE_set_spender_share = {
		category = business_goods
	}
	TRADE_set_spender_share = {
		category = military_goods
	}
	
}

TRADE_set_spender_share = {
	# Scope: governorship
	set_variable = {
		name = spender_share_$category$_upper_strata
		value = TRADE_spender_share_percentage_essential_goods_upper_strata
	}
	set_variable = {
		name = spender_share_$category$_middle_strata
		value = TRADE_spender_share_percentage_essential_goods_middle_strata
	}
	set_variable = {
		name = spender_share_$category$_lower_strata
		value = TRADE_spender_share_percentage_essential_goods_lower_strata
	}
	set_variable = {
		name = spender_share_$category$_proletariat
		value = TRADE_spender_share_percentage_essential_goods_proletariat
	}
	set_variable = {
		name = spender_share_$category$_indentured
		value = TRADE_spender_share_percentage_essential_goods_indentured
	}
	set_variable = {
		name = spender_share_$category$_tribesmen
		value = TRADE_spender_share_percentage_essential_goods_tribesmen
	}
	set_variable = {
		name = spender_share_$category$_slaves
		value = TRADE_spender_share_percentage_essential_goods_slaves
	}
	set_variable = {
		name = spender_share_$category$_the_state
		value = TRADE_spender_share_percentage_essential_goods_the_state
	}
}

TRADE_set_income_shares = {
	# Scope: governorship
	# Function: Get all the split of costs between pop groups and the state into variables so they don't have to be re-calculated every time they're called.
	# These come already as percentages
	TRADE_set_income_share = {
		category = essential_goods
	}
	TRADE_set_income_share = {
		category = luxury_goods
	}
	TRADE_set_income_share = {
		category = business_goods
	}
	TRADE_set_income_share = {
		category = military_goods
	}
	
}

TRADE_set_income_share = {
	# Scope: governorship
	set_variable = {
		name = income_share_$category$_upper_strata
		value = TRADE_income_share_percentage_$category$_upper_strata
	}
	set_variable = {
		name = income_share_$category$_middle_strata
		value = TRADE_income_share_percentage_$category$_middle_strata
	}
	set_variable = {
		name = income_share_$category$_lower_strata
		value = TRADE_income_share_percentage_$category$_lower_strata
	}
	set_variable = {
		name = income_share_$category$_proletariat
		value = TRADE_income_share_percentage_$category$_proletariat
	}
	set_variable = {
		name = income_share_$category$_indentured
		value = TRADE_income_share_percentage_$category$_indentured
	}
	set_variable = {
		name = income_share_$category$_tribesmen
		value = TRADE_income_share_percentage_$category$_tribesmen
	}
	set_variable = {
		name = income_share_$category$_slaves
		value = TRADE_income_share_percentage_$category$_slaves
	}
	set_variable = {
		name = income_share_$category$_the_state
		value = TRADE_income_share_percentage_$category$_the_state
	}
}

TRADE_reset_quarterly_trade_scope_values = {
	# Scope: random country
	TRADE_reset_internal_pools = yes
	# SELL_reset_all_internal_trade_stockpiles = yes # OBSOLETE - REMOVE
}

TRADE_reset_total_ordered_sold_and_bought_pools = {
	set_variable = {
		name = country_internal_total_ordered_$tradegood$
		value = 0
	}
	set_variable = {
		name = country_internal_bought_total_$tradegood$
		value = 0
	}
	set_variable = {
		name = country_internal_total_sold_$tradegood$
		value = 0
	}
}

TRADE_reset_internal_pools = {
	every_country = {
		set_variable = {
			name = internal_income_pool
			value = 0
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_amount_sold
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_stockpile
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_revenue_total
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_total_ordered_sold_and_bought_pools
		}
		TRADE_reset_quarterly_tax_totals = yes
	}
	every_federation = {
		set_variable = {
			name = internal_income_pool
			value = 0
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_amount_sold
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_stockpile
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_revenue_total
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_total_ordered_sold_and_bought_pools
		}
	}
	# TRADE_reset_internal_amounts_sold = yes # Replaced by every_tradegoods_complex + TRADE_reset_internal_amount_sold
}

TRADE_reset_TZ_pools = {
	every_trade_center = {
		set_variable = {
			name = TZ_income_pool
			value = 0
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_TZ_amount_sold
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_TZ_trade_stockpile
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_TZ_trade_revenue_total
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_TZ_total_ordered_sold_and_bought_pools
		}
		# TRADE_reset_quarterly_tax_totals = yes # Tax will have to be dealt with in a different scope for external trade
	}
	# TRADE_reset_internal_amounts_sold = yes # Replaced by every_tradegoods_complex + TRADE_reset_internal_amount_sold
}

TRADE_reset_internal_amount_sold = {
	# Scope: internal trade scope

	# Format of arguments:
	# $internal_sold_total$ = internal_sold_total_grain
	set_variable = {
		name = internal_sold_total_$tradegood$
		value = 0
	}
}

TRADE_reset_TZ_amount_sold = {
	# Scope: trade center province

	# Format of arguments:
	# $internal_sold_total$ = internal_sold_total_grain
	set_variable = {
		name = TZ_sold_total_$tradegood$
		value = 0
	}
}

TRADE_reset_internal_trade_stockpile = {
	set_variable = {
		name = $tradegood$_stockpile_internal
		value = 0 
	}
	set_variable = {
		name = $tradegood$_available_at_start_of_quarter_internal
		value = 0 
	}
}

TRADE_reset_TZ_trade_stockpile = {
	set_variable = {
		name = $tradegood$_stockpile_TZ
		value = 0 
	}
	set_variable = {
		name = $tradegood$_available_at_start_of_quarter_TZ
		value = 0 
	}
}

TRADE_reset_all_internal_trade_revenue_totals = {
	# Scope: Random country
	# Called: Quarterly
	# Resets all internal trade stockpiles to 0
	# OBSOLETE: Merged into TRADE_reset_internal_pools
}

TRADE_reset_internal_trade_revenue_total = {
	set_variable = {
		name = internal_total_revenue_$tradegood$
		value = 0 
	}
}

TRADE_update_all_global_base_prices = {
	TRADE_update_global_base_price = {
		tradegood = grain
	}
	TRADE_update_global_base_price = {
		tradegood = fur
	}
	TRADE_update_global_base_price = {
		tradegood = industrial_fibres
	}
	TRADE_update_global_base_price = {
		tradegood = textile_fibres
	}
	TRADE_update_global_base_price = {
		tradegood = wool
	}
	TRADE_update_global_base_price = {
		tradegood = silk
	}
	TRADE_update_global_base_price = {
		tradegood = wood
	}
	TRADE_update_global_base_price = {
		tradegood = stone
	}
	TRADE_update_global_base_price = {
		tradegood = sulphur
	}
	TRADE_update_global_base_price = {
		tradegood = whales
	}
	TRADE_update_global_base_price = {
		tradegood = gems
	}
	TRADE_update_global_base_price = {
		tradegood = peat
	}
	TRADE_update_global_base_price = {
		tradegood = tin
	}
	TRADE_update_global_base_price = {
		tradegood = inorganic_compounds
	}
	TRADE_update_global_base_price = {
		tradegood = copper
	}
	TRADE_update_global_base_price = {
		tradegood = iron
	}
	TRADE_update_global_base_price = {
		tradegood = gold
	}
	TRADE_update_global_base_price = {
		tradegood = silver
	}
	TRADE_update_global_base_price = {
		tradegood = lead
	}
	TRADE_update_global_base_price = {
		tradegood = coal
	}
	TRADE_update_global_base_price = {
		tradegood = oil
	}
	TRADE_update_global_base_price = {
		tradegood = tea
	}
	TRADE_update_global_base_price = {
		tradegood = coffee
	}
	TRADE_update_global_base_price = {
		tradegood = opium
	}
	TRADE_update_global_base_price = {
		tradegood = tobacco
	}
	TRADE_update_global_base_price = {
		tradegood = sugar
	}
	TRADE_update_global_base_price = {
		tradegood = hardwood
	}
	TRADE_update_global_base_price = {
		tradegood = rubber
	}
	TRADE_update_global_base_price = {
		tradegood = dye
	}
	TRADE_update_global_base_price = {
		tradegood = spices
	}
	TRADE_update_global_base_price = {
		tradegood = temperate_fruit
	}
	TRADE_update_global_base_price = {
		tradegood = tropical_fruit
	}
	TRADE_update_global_base_price = {
		tradegood = mediterranean_fruit
	}
	TRADE_update_global_base_price = {
		tradegood = chocolate
	}
	TRADE_update_global_base_price = {
		tradegood = livestock
	}
	TRADE_update_global_base_price = {
		tradegood = salt
	}
	TRADE_update_global_base_price = {
		tradegood = fish
	}
	TRADE_update_global_base_price = {
		tradegood = clothing
	}
	TRADE_update_global_base_price = {
		tradegood = luxury_clothing
	}
	TRADE_update_global_base_price = {
		tradegood = furniture
	}
	TRADE_update_global_base_price = {
		tradegood = luxury_furniture
	}
	TRADE_update_global_base_price = {
		tradegood = alcohol
	}
	TRADE_update_global_base_price = {
		tradegood = glass
	}
	TRADE_update_global_base_price = {
		tradegood = chemicals
	}
	TRADE_update_global_base_price = {
		tradegood = rare_alloys
	}
	TRADE_update_global_base_price = {
		tradegood = construction_materials
	}
	TRADE_update_global_base_price = {
		tradegood = early_munitions
	}
	TRADE_update_global_base_price = {
		tradegood = late_munitions
	}
	TRADE_update_global_base_price = {
		tradegood = naval_supplies
	}
	TRADE_update_global_base_price = {
		tradegood = steel_ships
	}
	TRADE_update_global_base_price = {
		tradegood = wooden_ships
	}
	TRADE_update_global_base_price = {
		tradegood = steel
	}
	TRADE_update_global_base_price = {
		tradegood = bronze
	}
	TRADE_update_global_base_price = {
		tradegood = machine_parts
	}
	TRADE_update_global_base_price = {
		tradegood = early_artillery
	}
	TRADE_update_global_base_price = {
		tradegood = late_artillery
	}
	TRADE_update_global_base_price = {
		tradegood = electronics
	}
	TRADE_update_global_base_price = {
		tradegood = pharmaceuticals
	}
	TRADE_update_global_base_price = {
		tradegood = motors
	}
	TRADE_update_global_base_price = {
		tradegood = processed_foods
	}
	TRADE_update_global_base_price = {
		tradegood = petrochemicals
	}
}

TRADE_update_global_base_price = {
	# Scope: Random country, doesn't matter
	# This effect sets the global base price for a tradegood
	# The formula is:
	# Base price = global units demanded / units produced # For now, anyway
	# This checks the given good

	# Format of arguments:
	# $global_price$ = global_price_grain
	# $global_supply$ = global_supply_grain
	# $global_demand$ = global_demand_grain
	# $demand_good$ = DEMAND_grain, svalue, see DEMAND_svalues
	# $supply_good$ = GOODS_governorship_grain_produced, svalue, see GOODS_svalues

	set_global_variable = {
		name = global_demand_$tradegood$
		value = 1 # Starts 1, gets augmented
	}

	set_global_variable = {
		name = global_supply_$tradegood$
		value = 1 # Starts 1, gets augmented
	}

	# Add the total of all demand and supply for this good around the world
	every_country = {
		every_governorships = {
			change_global_variable = {
				name = global_demand_$tradegood$
				add = DEMAND_$tradegood$
			}
			change_global_variable = {
				name = global_supply_$tradegood$
				add = GOODS_governorship_$tradegood$_produced
			}
		}
	}
	# NOTE: Global supply should probably be the amount offered in all TZs, not produced in every governorship
	# See TRADE_svalues TRADE_global_offered_grain for WiP example

	# Now calculate the price
	set_global_variable = {
		name = global_price_$tradegood$
		value = global_var:global_demand_$tradegood$
	}
	change_global_variable = {
		name = global_price_$tradegood$
		divide = global_var:global_supply_$tradegood$
	}

	change_global_variable = {
		name = global_price_$tradegood$
		multiply = 0.01
	}

}

TRADE_update_all_TZ_local_prices = {
	every_in_global_list = {
		variable = list_of_trade_centers
		limit = { always = yes } # Debug purposes only, this should contain an actual limit checking if the TZ actually has any stock of the named tradegood
		SELL_set_TZ_prices = {
			tradegood = grain
		}
		SELL_set_TZ_prices = {
			tradegood = fur
		}
		SELL_set_TZ_prices = {
			tradegood = industrial_fibres
		}
		SELL_set_TZ_prices = {
			tradegood = textile_fibres
		}
		SELL_set_TZ_prices = {
			tradegood = wool
		}
		SELL_set_TZ_prices = {
			tradegood = silk
		}
		SELL_set_TZ_prices = {
			tradegood = wood
		}
		SELL_set_TZ_prices = {
			tradegood = stone
		}
		SELL_set_TZ_prices = {
			tradegood = sulphur
		}
		SELL_set_TZ_prices = {
			tradegood = whales
		}
		SELL_set_TZ_prices = {
			tradegood = gems
		}
		SELL_set_TZ_prices = {
			tradegood = peat
		}
		SELL_set_TZ_prices = {
			tradegood = tin
		}
		SELL_set_TZ_prices = {
			tradegood = inorganic_compounds
		}
		SELL_set_TZ_prices = {
			tradegood = copper
		}
		SELL_set_TZ_prices = {
			tradegood = iron
		}
		SELL_set_TZ_prices = {
			tradegood = gold
		}
		SELL_set_TZ_prices = {
			tradegood = silver
		}
		SELL_set_TZ_prices = {
			tradegood = lead
		}
		SELL_set_TZ_prices = {
			tradegood = coal
		}
		SELL_set_TZ_prices = {
			tradegood = oil
		}
		SELL_set_TZ_prices = {
			tradegood = tea
		}
		SELL_set_TZ_prices = {
			tradegood = coffee
		}
		SELL_set_TZ_prices = {
			tradegood = opium
		}
		SELL_set_TZ_prices = {
			tradegood = tobacco
		}
		SELL_set_TZ_prices = {
			tradegood = sugar
		}
		SELL_set_TZ_prices = {
			tradegood = hardwood
		}
		SELL_set_TZ_prices = {
			tradegood = rubber
		}
		SELL_set_TZ_prices = {
			tradegood = dye
		}
		SELL_set_TZ_prices = {
			tradegood = spices
		}
		SELL_set_TZ_prices = {
			tradegood = temperate_fruit
		}
		SELL_set_TZ_prices = {
			tradegood = tropical_fruit
		}
		SELL_set_TZ_prices = {
			tradegood = mediterranean_fruit
		}
		SELL_set_TZ_prices = {
			tradegood = chocolate
		}
		SELL_set_TZ_prices = {
			tradegood = livestock
		}
		SELL_set_TZ_prices = {
			tradegood = salt
		}
		SELL_set_TZ_prices = {
			tradegood = fish
		}
		SELL_set_TZ_prices = {
			tradegood = clothing
		}
		SELL_set_TZ_prices = {
			tradegood = luxury_clothing
		}
		SELL_set_TZ_prices = {
			tradegood = furniture
		}
		SELL_set_TZ_prices = {
			tradegood = luxury_furniture
		}
		SELL_set_TZ_prices = {
			tradegood = alcohol
		}
		SELL_set_TZ_prices = {
			tradegood = glass
		}
		SELL_set_TZ_prices = {
			tradegood = chemicals
		}
		SELL_set_TZ_prices = {
			tradegood = rare_alloys
		}
		SELL_set_TZ_prices = {
			tradegood = construction_materials
		}
		SELL_set_TZ_prices = {
			tradegood = early_munitions
		}
		SELL_set_TZ_prices = {
			tradegood = late_munitions
		}
		SELL_set_TZ_prices = {
			tradegood = naval_supplies
		}
		SELL_set_TZ_prices = {
			tradegood = steel_ships
		}
		SELL_set_TZ_prices = {
			tradegood = wooden_ships
		}
		SELL_set_TZ_prices = {
			tradegood = steel
		}
		SELL_set_TZ_prices = {
			tradegood = bronze
		}
		SELL_set_TZ_prices = {
			tradegood = machine_parts
		}
		SELL_set_TZ_prices = {
			tradegood = early_artillery
		}
		SELL_set_TZ_prices = {
			tradegood = late_artillery
		}
		SELL_set_TZ_prices = {
			tradegood = electronics
		}
		SELL_set_TZ_prices = {
			tradegood = pharmaceuticals
		}
		SELL_set_TZ_prices = {
			tradegood = motors
		}
		SELL_set_TZ_prices = {
			tradegood = processed_foods
		}
		SELL_set_TZ_prices = {
			tradegood = petrochemicals
		}
	}
}

TRADE_set_all_local_internal_cuts_of_revenue = {
	# Scope: governorship
	# Called: start of game
	# Sets all local internal cuts of revenue for this quarter to 0
	# Needs to exist because the trade effects cannot set variables that don't exist yet
	set_variable = {
		name = local_internal_revenue_cut_grain
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_fish
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_livestock
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_tropical_fruit
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_mediterranean_fruit
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_temperate_fruit
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_processed_foods
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_clothing
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_furniture
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_pharmaceuticals
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_coal
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_whales
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_alcohol
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_gems
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_opium
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_tobacco
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_chocolate
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_coffee
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_tea
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_spices
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_sugar
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_luxury_clothing
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_luxury_furniture
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_glass
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_motors
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_fur
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_industrial_fibres
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_textile_fibres
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_wool
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_silk
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_wood
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_stone
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_sulphur
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_peat
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_tin
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_inorganic_compounds
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_copper
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_iron
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_gold
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_silver
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_dye
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_lead
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_oil
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_hardwood
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_rubber
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_salt
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_electronics
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_construction_materials
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_steel
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_bronze
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_machine_parts
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_chemicals
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_naval_supplies
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_steel_ships
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_wooden_ships
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_petrochemicals
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_early_munitions
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_late_munitions
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_early_artillery
		value = 0
	}
	set_variable = {
		name = local_internal_revenue_cut_late_artillery
		value = 0
	}
}

TRADE_set_all_internal_stockpile_cut_percentages = {
	# Scope: governorship
	# Called: start of game
	# Sets all local internal revenue cut percentages for this quarter to 0
	# Needs to exist because the trade effects cannot set variables that don't exist yet
	set_variable = {
		name = internal_stockpile_cut_percentage_grain
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_fish
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_livestock
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_tropical_fruit
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_mediterranean_fruit
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_temperate_fruit
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_processed_foods
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_clothing
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_furniture
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_pharmaceuticals
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_coal
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_whales
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_alcohol
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_gems
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_opium
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_tobacco
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_chocolate
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_coffee
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_tea
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_spices
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_sugar
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_luxury_clothing
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_luxury_furniture
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_glass
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_motors
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_fur
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_industrial_fibres
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_textile_fibres
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_wool
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_silk
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_wood
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_stone
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_sulphur
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_peat
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_tin
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_inorganic_compounds
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_copper
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_iron
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_gold
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_silver
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_dye
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_lead
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_oil
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_hardwood
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_rubber
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_salt
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_electronics
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_construction_materials
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_steel
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_bronze
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_machine_parts
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_chemicals
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_naval_supplies
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_steel_ships
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_wooden_ships
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_petrochemicals
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_early_munitions
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_late_munitions
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_early_artillery
		value = 0
	}
	set_variable = {
		name = internal_stockpile_cut_percentage_late_artillery
		value = 0
	}
}

TRADE_setup_internal_trade_cuts = {
	TRADE_set_all_local_internal_cuts_of_revenue = yes
	TRADE_set_all_internal_stockpile_cut_percentages = yes
}

TRADE_internal_transact_good = {
	# Scope: random country
	# Function: Carries out all the scripted effects required to sell and purchase the specified tradegood
	# Called: At the scheduled time for a certain tradegood
	SELL_declare_internal_available = {
		tradegood = $tradegood$
	}
	PURCHASE_check_shopping_internal = { # Do the shopping
		tradegood = $tradegood$ 
		category = $category$
	}
	SELL_calculate_internal_revenue_cut_percentage = {
		tradegood = $tradegood$
	}
	SELL_get_internal_cut_of_revenue = {
		tradegood = $tradegood$
		category = $category$
	}

}

TRADE_resolve_internal_payments = {
	# Scope: random country
	# Function: Resolves the transfer of money between buyers and sellers for all the internally traded goods this quarter
	# Called: At the end of each quarter, once all tradegoods have been transacted
	TRADE_set_spender_shares = yes
	TRADE_set_income_shares = yes
	PURCHASE_split_all_costs = yes
	SELL_split_all_income = yes
}

TRADE_prepare_quarterly_values = {
	# Scope: random country
	# Function: set up and reset all the values that are used in trade
	TRADE_update_all_global_base_prices = yes
	
	TRADE_update_all_TZ_local_prices = yes
	
	TRADE_reset_internal_pools = yes
	
	TRADE_reset_quarterly_trade_scope_values = yes
	
	TRADE_reset_all_internal_trade_stockpiles = yes
	
	TRADE_reset_all_internal_trade_revenue_totals = yes
	
	TRADE_reset_internal_amounts_sold = yes
}

# Taxes

TRADE_setup_tax_rates = {
	TRADE_setup_internal_trade_tax = yes
}

TRADE_setup_internal_trade_tax = {
	# Scope: country
	# Function: Create the variables referenced when taxing internal trade
	# Each tax rate is a percentage, measured from 0 to 1
	# The value of thing being taxed is then multiplied by the tax rate
	set_variable = {
		name = internal_sales_tax_rate
		value = 0.2 #Debug. Default = 0. This should be on a slider or something
	}
}

TRADE_reset_quarterly_tax_totals = {
	set_variable = {
		name = national_quarterly_revenue_from_internal_sales_tax_essential_goods
		value = 0
	}
	set_variable = {
		name = national_quarterly_revenue_from_internal_sales_tax_luxury_goods
		value = 0
	}
	set_variable = {
		name = national_quarterly_revenue_from_internal_sales_tax_business_goods
		value = 0
	}
	set_variable = {
		name = national_quarterly_revenue_from_internal_sales_tax_military_goods
		value = 0
	}
}

TRADE_reset_governorship_tax_totals = {
	set_variable = {
		name = governorship_quarterly_revenue_from_internal_sales_tax_essential_goods
		value = 0
	}
	set_variable = {
		name = governorship_quarterly_revenue_from_internal_sales_tax_luxury_goods
		value = 0
	}
	set_variable = {
		name = governorship_quarterly_revenue_from_internal_sales_tax_business_goods
		value = 0
	}
	set_variable = {
		name = governorship_quarterly_revenue_from_internal_sales_tax_military_goods
		value = 0
	}
}

#### Specific to external trade