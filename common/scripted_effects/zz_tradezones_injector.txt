
########################################################
#### This file is autogenerated by injectormaker.py ####
################# Last run: 2023-01-26 #################
########################################################
## This file contains "MAIN_KEY_hypercomplex" iterators for unscoped types "MAIN_KEY" over "ITERATION_KEY"
## This is intended for intermediate parsing functions such as those defined as metainjectors, and takes parameters:
# CONTROLLER: switch, random_list, if, etc; some function which allows effects inside it.
# PRESTATEMENT_KEY, PRESTATEMENT_ARG: For example trigger = has_trait or limit = {has_trait = honest}
# PREFIX, SUFFIX: Wrapper for passing case data to random lists or switches
# APPLY: Scripted effect, taking $ITERATION_KEY$. For example, if ITERATION_KEY is "LIFESTYLE" then the APPLY should be of the form some_lifestyle_effect = {LIFESTYLE = my_key}
# EXTRA_KEY, EXTRA_ARG: Potential extra arguments to pass to APPLY. Can be commented out or used to pass extra arguments.

#####################
### Metainjectors ###
#####################
# These handle the basic formats expected to be accessible by any type of injector
# Similar functions may be defined on a case-by-case basis.
# Allows evaluation of simple assign functions in otherwise complex assign injectors
simply_assign = { # APPLY and ARGUMENT
	$APPLY$ = $ARGUMENT$
}
# Switch parses a flag into a string key from TYPE
parse_type_flag_complex = { # parse_type_flag_complex = {TYPE, KEY, APPLY, FLAG}
	$TYPE$_hypercomplex = {
		CONTROLLER = switch
		PRESTATEMENT_KEY = trigger
		PRESTATEMENT_ARG = $FLAG$
		PREFIX = "flag:"
		SUFFIX = ""
		APPLY = $APPLY$
		KEY = $KEY$
		EXTRA_KEY = "#"
		EXTRA_ARG = "#"
	}
}
# Switch with any simple_assign trigger over the keys
switch_type_complex = { # TYPE, KEY, TRIGGER = simple_assign, APPLY = scripted_effect {KEY}
	$TYPE$_hypercomplex = {
		CONTROLLER = switch
		PRESTATEMENT_KEY = trigger
		PRESTATEMENT_ARG = $TRIGGER$
		PREFIX = ""
		SUFFIX = ""
		APPLY = $APPLY$
		KEY = $KEY$
		EXTRA_KEY = "#"
		EXTRA_ARG = "#"
	}
}
# Executes APPLY = {KEY = key} for every key in TYPE
every_type_complex = { # every_type_complex = {TYPE, KEY, APPLY}
	$TYPE$_hypercomplex = {
		CONTROLLER = if
		PRESTATEMENT_KEY = "limit"
		PRESTATEMENT_ARG = "{always = yes}"
		PREFIX = "if = {limit = {always = yes}#"
		SUFFIX = "#"
		APPLY = $APPLY$
		KEY = $KEY$
		EXTRA_KEY = "#"
		EXTRA_ARG = "#"
	}
}
# Executes APPLY = {KEY = key} for a random key in TYPE
random_type_complex = { # random_type_complex = {TYPE, KEY, APPLY}
	$TYPE$_hypercomplex = {
		CONTROLLER = random_list
		PRESTATEMENT_KEY = "#"
		PRESTATEMENT_ARG = "#"
		PREFIX = "1 = {#"
		SUFFIX = "}#"
		APPLY = $APPLY$
		KEY = $KEY$
		EXTRA_KEY = "#"
		EXTRA_ARG = "#"
	}
}
## Metainjectors for APPLY = simple_assign. Same endpoint usage as complex assign.
# Switch parses a flag into a string key from TYPE
parse_type_flag_simple = { # TYPE, FLAG = flag, APPLY = simple_assign
	$TYPE$_hypercomplex = {
		CONTROLLER = switch
		PRESTATEMENT_KEY = trigger
		PRESTATEMENT_ARG = $FLAG$
		PREFIX = "flag:"
		SUFFIX = ""
		APPLY = simply_assign
		KEY = ARGUMENT
		EXTRA_KEY = APPLY
		EXTRA_ARG = $APPLY$
	}
}
# Switch with any simple_assign trigger over the keys in TYPE
switch_type_simple = { # TYPE, TRIGGER = simple_assign, APPLY = simple_assign
	$TYPE$_hypercomplex = {
		CONTROLLER = switch
		PRESTATEMENT_KEY = trigger
		PRESTATEMENT_ARG = $TRIGGER$
		PREFIX = ""
		SUFFIX = ""
		APPLY = simply_assign
		KEY = ARGUMENT
		EXTRA_KEY = APPLY
		EXTRA_ARG = $APPLY$
	}
}
# Executes APPLY = KEY for every KEY in TYPE
every_type_simple = { # {TYPE, APPLY}
	$TYPE$_hypercomplex = {
		CONTROLLER = if
		PRESTATEMENT_KEY = "limit"
		PRESTATEMENT_ARG = "{always = yes}"
		PREFIX = "if = {limit = {always = yes}#"
		SUFFIX = "#"
		APPLY = simply_assign
		KEY = ARGUMENT
		EXTRA_KEY = APPLY
		EXTRA_ARG = $APPLY$
	}
}
# Executes APPLY = KEY for a random KEY in TYPE
random_type_simple = { # TYPE, APPLY = simple_assign
	$TYPE$_hypercomplex = {
		CONTROLLER = random_list
		PRESTATEMENT_KEY = "#"
		PRESTATEMENT_ARG = "#"
		PREFIX = "1 = {#" 
		SUFFIX = "}#"
		APPLY = simply_assign
		KEY = ARGUMENT
		EXTRA_KEY = APPLY
		EXTRA_ARG = $APPLY$
	}
}

##############################################################
#### Main key: tradezone: Iteration key: tradezone
##############################################################
# Execute APPLY for the tradezone key passed as a flag:FLAG.
# parse_tradezone_flag_complex = {tradezone = flag APPLY = scripted_effect}
# parse_tradezone_flag_simple  = {tradezone = flag APPLY = simple_effect}
parse_tradezone_flag_complex   = {parse_type_flag_complex  = {TYPE = tradezone APPLY = $APPLY$ FLAG = $tradezone$  KEY = tradezone}}
parse_tradezone_flag_simple    = {parse_type_flag_simple   = {TYPE = tradezone APPLY = $APPLY$ FLAG = $tradezone$}}
# Execute APPLY in a switch statement for the keys
# switch_tradezone_complex     = {APPLY = scripted_effect TRIGGER = simple_trigger}
# switch_tradezone_simple      = {APPLY = simple_effect   TRIGGER = simple_trigger}
switch_tradezone_complex       = {switch_type_complex      = {TYPE = tradezone APPLY = $APPLY$ TRIGGER = $TRIGGER$  KEY = tradezone}}
switch_tradezone_simple        = {switch_type_simple       = {TYPE = tradezone APPLY = $APPLY$ TRIGGER = $TRIGGER$}}
# Execute APPLY for every tradezone key
# every_tradezone_complex      = {APPLY = scripted_effect}
# every_tradezone_simple       = {APPLY = simple_effect}
every_tradezone_complex        = {every_type_complex       = {TYPE = tradezone APPLY = $APPLY$ KEY = tradezone}}
every_tradezone_simple         = {every_type_simple        = {TYPE = tradezone APPLY = $APPLY$}}
# Execute APPLY for a random tradezone key
# random_tradezone_complex     = {APPLY = scripted_effect}
# random_tradezone_simple      = {APPLY = simple_effect}
random_tradezone_complex       = {random_type_complex      = {TYPE = tradezone APPLY = $APPLY$ KEY = tradezone}}
random_tradezone_simple        = {random_type_simple       = {TYPE = tradezone APPLY = $APPLY$}}
### Hypercomplex iterator for unscoped type "tradezone" over tradezone:
tradezone_hypercomplex = {
	$CONTROLLER$ = {
		$PRESTATEMENT_KEY$ = $PRESTATEMENT_ARG$
		$PREFIX$india$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = india
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$east_north_america$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = east_north_america
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$west_north_america$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = west_north_america
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$caribbean$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = caribbean
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$west_south_america$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = west_south_america
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$east_south_america$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = east_south_america
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$south_east_asia$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = south_east_asia
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$indo_china$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = indo_china
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$yellow_sea$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = yellow_sea
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$southern_africa$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = southern_africa
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$west_africa$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = west_africa
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$east_africa$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = east_africa
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$middle_east$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = middle_east
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$western_steppe$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = western_steppe
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$eastern_steppe$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = eastern_steppe
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$upper_yangtzi$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = upper_yangtzi
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$atlantic_seaboard$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = atlantic_seaboard
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$central_europe$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = central_europe
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$west_mediterranean$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = west_mediterranean
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$baltic$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = baltic
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$east_europe$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = east_europe
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
		$PREFIX$east_mediterranean$SUFFIX$ = {
			$APPLY$ = {
				$KEY$ = east_mediterranean
				$EXTRA_KEY$ = $EXTRA_ARG$
			}
		}
    }
}
