namespace = debug_trade

debug_trade.6 = { # Prices setup
	TRADE_first_time_setup_price_countries_food = yes
}

debug_trade.1 = { # Trade setup
	type = country_event
	title = "TEST"
	desc = "TEST"
	picture = aqueducts

	immediate = {
		#MOVEMENT_get_TZ_distances = yes # Commented out for now - needs fixing, svalues are improperly named.
		every_country = {
			trigger_event = { id = debug_trade.109 } # Update internal trade scope
			trigger_event = { id = debug_trade.110 } # Update TZ vars
			trigger_event = { id = debug_trade.103 } # Set up TZ prices
		}
		# trigger_event = { id = debug_trade.102 } # global base prices - defunct
		# trigger_event = { id = debug_trade.104 } # quarterly values # Split up into sub-events
		trigger_event = { id = debug_trade.1031 } # Update TZ prices
		every_country = {
			trigger_event = { id = debug_trade.101 }
			trigger_event = { id = debug_trade.1041 }
			# trigger_event = { id = debug_trade.1042 }
			# trigger_event = { id = debug_trade.1047 } # Combined 42 and 44
			trigger_event = { id = debug_trade.1043 }
			#trigger_event = { id = debug_trade.1044 }
			trigger_event = { id = debug_trade.1045 }
			trigger_event = { id = debug_trade.1046 }
			TRADE_reset_quarterly_tax_totals = yes
		}
		every_federation = {
			trigger_event = { id = debug_trade.1051 } # Province version
			# trigger_event = { id = debug_trade.10522 } # Province version
			# trigger_event = { id = debug_trade.1057 } # Combined 52 and 54
			trigger_event = { id = debug_trade.1053 } # Province version
			# trigger_event = { id = debug_trade.10544 } # Province version
			trigger_event = { id = debug_trade.1055 } # Province version
			trigger_event = { id = debug_trade.1056 } # Province version
		}
		# trigger_event = { id = debug_trade.105 } # quarterly values - This just repeats debug_trade.104
		trigger_event = { id = debug_trade.106 } # quarterly values
		trigger_event = { id = debug_trade.107 }
		every_country = {
				# trigger_event = { id = debug_trade.108 } # Moved back to beginning to provide vars for debug_trade.102
				# trigger_event = { id = debug_trade.109 } # Repeats an effect run by oa_economy_setup, needs to be run quarterly after that # Moved back to beginning to provide vars for debug_trade.102
				trigger_event = { id = debug_trade.110 }
				trigger_event = { id = debug_trade.111 }
				trigger_event = { id = debug_trade.112 } # Not actually obsolete - this deals with governorship scope, while TRADE_reset_quarterly_values deals with global level
			trigger_event = { id = debug_trade.113 }
		}
	}

	option = {
		name = "TEST"
	}
}

# For speed testing and lag diagnosis:
debug_trade.101 = {
	type = country_event
	hidden = yes

	immediate = {
		every_governorships = {
			TRADE_reset_all_tradegoods_TZ_internal_rankings = yes
		}
	}
}
debug_trade.102 = {
	type = country_event
	hidden = yes

	immediate = {
		TRADE_update_all_global_base_prices = yes
	}
}
debug_trade.103 = {
	type = country_event
	hidden = yes

	immediate = {
		SELL_set_TZ_prices = yes
	}
}
debug_trade.1031 = {
	type = country_event
	hidden = yes

	immediate = {
		SELL_update_TZ_prices = yes
	}
}
debug_trade.104 = {
	type = country_event
	hidden = yes

	immediate = {
		TRADE_reset_internal_pools = yes
	}
}
debug_trade.1041 = {
	type = country_event
	hidden = yes

	immediate = {
		set_variable = {
			name = internal_income_pool
			value = 0
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_tradegood_total_internal_stockpile
		}
		every_tradegoods_complex = {
			APPLY = TRADE_setup_governorship_for_export_internal_vars
		}
	}
}
debug_trade.1042 = {
	type = country_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_amount_sold
		}
	}
}
debug_trade.1047 = {
	type = country_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_trt_ias
		}
	}
}
debug_trade.1043 = {
	type = country_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_stockpiles
		}
	}
}
debug_trade.1044 = {
	type = country_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_revenue_total
		}
	}
}
debug_trade.1045 = {
	type = country_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_total_ordered_sold_and_bought_pools
		}
	}
}
debug_trade.1046 = {
	type = country_event
	hidden = yes

	immediate = {
		TRADE_reset_quarterly_tax_totals = yes
	}
}
debug_trade.1051 = {
	type = province_event
	hidden = yes

	immediate = {
		set_variable = {
			name = internal_income_pool
			value = 0
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_tradegood_total_internal_stockpile
		}
		every_tradegoods_complex = {
			APPLY = TRADE_setup_governorship_for_export_internal_vars
		}
	}
}
debug_trade.1052 = {
	type = province_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_amount_sold
		}
	}
}
debug_trade.1057 = {
	type = province_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_trt_ias
		}
	}
}
debug_trade.1053 = {
	type = province_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_stockpiles
		}
	}
}
debug_trade.1054 = {
	type = province_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_revenue_total
		}
	}
}
debug_trade.1055 = {
	type = province_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_total_ordered_sold_and_bought_pools
		}
	}
}
debug_trade.1056 = {
	type = province_event
	hidden = yes

	immediate = {
		TRADE_reset_quarterly_tax_totals = yes
	}
}
debug_trade.105 = {
	type = country_event
	hidden = yes

	immediate = {
		TRADE_reset_quarterly_trade_scope_values = yes
	}
}
debug_trade.106 = {
	type = country_event
	hidden = yes

	immediate = {
		TRADE_reset_all_internal_trade_revenue_totals = yes
	}
}
debug_trade.107 = {
	type = country_event
	hidden = yes

	immediate = {
		TRADE_save_connection_time_values = yes
	}
}
debug_trade.108 = {
	type = country_event
	hidden = yes

	immediate = {
		every_governorships = {
			TRADE_reset_purchase_order_tender_completions = yes
		}
	}
}
debug_trade.109 = {
	type = country_event
	hidden = yes

	immediate = {
		every_governorships = {
			TRADE_set_internal_trade_scope = yes
		}
	}
}

debug_trade.110 = {
	type = country_event
	hidden = yes

	immediate = {
		every_governorships = {
			TRADE_update_governorship_TZs = yes
		}
	}
}

debug_trade.111 = {
	type = country_event
	hidden = yes

	immediate = {
		every_governorships = {
			TRADE_setup_internal_trade_cuts = yes
		}
	}
}

debug_trade.112 = {
	type = country_event
	hidden = yes

	immediate = {
		every_governorships = {
			TRADE_reset_quarterly_governorship_values = yes
		}
	}
}

debug_trade.113 = {
	type = country_event
	hidden = yes

	immediate = {
		TRADE_setup_tax_rates = yes
		set_global_variable = first_time_generic_price_setup_done
	}
}

## Debug trade 2 breakdown

debug_trade.201 = {
	type = country_event
	hidden = yes
	immediate = {
		TRADE_update_all_global_base_prices = yes
	}
}
debug_trade.202 = {
	type = country_event
	hidden = yes
	immediate = {
		SELL_set_TZ_prices = yes
	}
}
debug_trade.2021 = {
	type = country_event
	hidden = yes

	immediate = {
		SELL_update_TZ_prices = yes
	}
}
debug_trade.203 = {
	type = country_event
	hidden = yes
	immediate = {
		TRADE_reset_internal_pools = yes
	}
}
debug_trade.2031 = {
	type = country_event
	hidden = yes

	immediate = {
		set_variable = {
			name = internal_income_pool
			value = 0
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_tradegood_total_internal_stockpile
		}
	}
}
debug_trade.2032 = {
	type = country_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_amount_sold
		}
	}
}
debug_trade.2033 = {
	type = country_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_stockpiles
		}
	}
}
debug_trade.2034 = {
	type = country_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_revenue_total
		}
	}
}
debug_trade.2035 = {
	type = country_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_total_ordered_sold_and_bought_pools
		}
	}
}
debug_trade.2091 = {
	type = province_event
	hidden = yes

	immediate = {
		set_variable = {
			name = internal_income_pool
			value = 0
		}
		every_tradegoods_complex = {
			APPLY = TRADE_reset_tradegood_total_internal_stockpile
		}
	}
}
debug_trade.2092 = {
	type = province_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_amount_sold
		}
	}
}
debug_trade.2093 = {
	type = province_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_stockpiles
		}
	}
}
debug_trade.2094 = {
	type = province_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_internal_trade_revenue_total
		}
	}
}
debug_trade.2095 = {
	type = province_event
	hidden = yes

	immediate = {
		every_tradegoods_complex = {
			APPLY = TRADE_reset_total_ordered_sold_and_bought_pools
		}
	}
}
debug_trade.204 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = { # Sell offers
			limit = {
				NOT = { has_variable = federation_customs_union }
			}
			SELL_declare_all_internal_available = yes
		}
	}
}
debug_trade.205 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = { # Purchase orders
			limit = {
				NOT = { has_variable = federation_customs_union }
			}
			PURCHASE_make_internal_shopping_list = yes
		}
	}
}
debug_trade.206 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = { # Begin invoices
			limit = {
				NOT = { has_variable = federation_customs_union }
			}
			SELL_calculate_all_internal_revenue_cut_percentages = yes
		}
	}
}
debug_trade.207 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = {
			limit = {
				NOT = { has_variable = federation_customs_union }
			}
			SELL_get_all_internal_cuts_of_revenue = yes
		}
	}
}
debug_trade.208 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = {
			limit = {
				NOT = { has_variable = federation_customs_union }
			}
			TRADE_set_spender_shares = yes
		}
	}
}
debug_trade.209 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = {
			limit = {
				NOT = { has_variable = federation_customs_union }
			}
			TRADE_set_income_shares = yes 
		}
	}
}
debug_trade.210 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = {
			limit = {
				NOT = { has_variable = federation_customs_union }
			}
			PURCHASE_split_all_costs = yes
		}
	}
}
debug_trade.211 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = { 
			limit = {
				NOT = { has_variable = federation_customs_union }
			}
			SELL_split_all_income = yes
		}
	}
}
debug_trade.212 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = { # Sell offers
			limit = {
				has_variable = federation_customs_union
			}
			SELL_declare_all_internal_available = yes
		}
	}
}
debug_trade.213 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = { # Purchase orders
			limit = {
				has_variable = federation_customs_union
			}
			PURCHASE_make_internal_shopping_list = yes
		}
	}
}
debug_trade.214 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = { # Begin invoices
			limit = {
				has_variable = federation_customs_union
			}
			SELL_calculate_all_internal_revenue_cut_percentages = yes
		}
	}
}
debug_trade.215 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = {
			limit = {
				has_variable = federation_customs_union
			}
			SELL_get_all_internal_cuts_of_revenue = yes
		}
	}
}
debug_trade.216 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = {
			limit = {
				has_variable = federation_customs_union
			}
			TRADE_set_spender_shares = yes
		}
	}
}
debug_trade.217 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = {
			limit = {
				has_variable = federation_customs_union
			}
			TRADE_set_income_shares = yes 
		}
	}
}
debug_trade.218 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = {
			limit = {
				has_variable = federation_customs_union
			}
			PURCHASE_split_all_costs = yes
		}
	}
}
debug_trade.219 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = {
			limit = {
				has_variable = federation_customs_union
			}
			SELL_split_all_income = yes
		}
	}
}

debug_trade.220 = {
	type = country_event
	hidden = yes
	immediate = {
		TRADE_clear_total_sold_and_revenue_flag = yes
	}
}

debug_trade.221 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = {
			TRADE_clear_local_revenue_cut_flags = yes
		}
	}
}

debug_trade.223 = {
	type = province_event
	hidden = yes
	immediate = {
		TRADE_clear_total_sold_and_revenue_flag = yes
	}
}

debug_trade.225 = {
	type = country_event
	hidden = yes
	immediate = {
		every_governorships = {
			TRADE_reset_all_tradegoods_TZ_internal_rankings = yes # Clear the rankings so that they can be recalculated next trade phase
		}
	}
}

debug_trade.2 = { # Quarterly internal trade simulation
	type = country_event
	title = "TEST"
	desc = "TEST"
	picture = aqueducts

	immediate = {
		# trigger_event = { id = debug_trade.201 } # Global base prices - defunct
		PURCHASE_reset_shipping_variables = yes
		every_country = {
			trigger_event = { id = debug_trade.202 }
			trigger_event = { id = debug_trade.2031 }
			#trigger_event = { id = debug_trade.2032 }
			trigger_event = { id = debug_trade.2033 }
			#trigger_event = { id = debug_trade.2034 }
			trigger_event = { id = debug_trade.2035 }
		}
		trigger_event = { id = debug_trade.2021 }
		every_federation = {
			trigger_event = { id = debug_trade.2091 }
			#trigger_event = { id = debug_trade.2032 }
			trigger_event = { id = debug_trade.2093 }
			#trigger_event = { id = debug_trade.2034 }
			trigger_event = { id = debug_trade.2095 }
		}
		every_internal_trade_viable_country = {
			trigger_event = { id = debug_trade.204 } # SELL_declare_all_available
		}
		every_internal_trade_viable_country = {
			trigger_event = { id = debug_trade.205 }
			#every_governorships = { # Invoices
			#	limit = {
			#		NOT = { has_variable = federation_customs_union }
			#	}
				trigger_event = { id = debug_trade.206 }
				trigger_event = { id = debug_trade.207 }
				trigger_event = { id = debug_trade.208 }
				trigger_event = { id = debug_trade.209 }
				trigger_event = { id = debug_trade.210 }
				trigger_event = { id = debug_trade.211 }
			#}
		}
		every_federation_country = {
			trigger_event = { id = debug_trade.212 }
		}
		every_federation_country = {
			trigger_event = { id = debug_trade.213 }
			#every_governorships = { # Invoices
			#	limit = {
			#		has_variable = federation_customs_union
			#	}
				trigger_event = { id = debug_trade.214 }
				trigger_event = { id = debug_trade.215 }
				trigger_event = { id = debug_trade.216 }
				trigger_event = { id = debug_trade.217 }
				trigger_event = { id = debug_trade.218 }
				trigger_event = { id = debug_trade.219 }
			#}
		}
		every_country = {
			trigger_event = { id = debug_trade.221 }
			trigger_event = { id = debug_trade.225 }
		}
		every_trade_center = {
			trigger_event = { id = debug_trade.224 }
		}
		PURCHASE_update_all_quarterly_shipping = yes
	}

	option = {
		name = "TEST"
	}
}

#debug_trade.3 = { # Declare external available & update trade prices
#	type = country_event
#	title = "TEST"
#	desc = "TEST"
#	picture = aqueducts

	# Outline:
	# . Reset quarterly governorship values - consider merging with internal trade
	# . Reset quaterly tradezone values
	# . Every governorship declares external available
	# . Update trade prices per TZ, based on the amount available there ot of the global total # The price set at the beginning of this quarter's external trade phase is the starting price for next quarter's internal trade phase
	# Then the external trade effects follow that.
		# External shopping list (including purchase orders)
		# External revenue and spend cuts

#	immediate = {
#		TRADE_reset_TZ_pools = yes
#		TRADE_update_all_global_base_prices = yes # Debug only - should be reworked to follow declaration of supply and demand
#		every_country = {
#			every_governorships = {
#				SELL_declare_all_external_available = yes
#			}
#		}
#		TRADE_set_preferred_routes = yes # Get the order of preferred vendor trade centers for every tradegood in every trade center, now that stock has been declared
		# We don't update price until the end of the trade phase, to add some volatility and to be able to account for both imports and local supply when calculating the supply curve
		# Finish all sell declarations and start to shop
#		every_country = {
			# This needs to be ORDERED in some way
			# The first countries to go will get access to the cheapest deals. Some kind of trade power value by which to order them?
#			every_governorships = {
#				PURCHASE_make_external_shopping_list = yes
#			}
#		}
#		debug_log = "Finished debug_trade.3"
#	}
#
#	option = {
#		name = "TEST"
#	}
	
#}

debug_trade.5 = { # Quarterly internal trade simulation, non test version
	type = country_event
	title = "TEST"
	desc = "TEST"
	picture = aqueducts

	immediate = {
		debug_log = "Starting debug_trade.2"
		TRADE_update_all_global_base_prices = yes # 201
		TRADE_update_all_TZ_local_prices = yes #202
		TRADE_reset_internal_pools = yes #203
		every_internal_trade_viable_country = {
			every_governorships = { # Sell offers
				limit = {
					NOT = { has_variable = federation_customs_union }
				}
				SELL_declare_all_internal_available = yes # 204
			}
		}
		every_internal_trade_viable_country = {
			every_governorships = { # Purchase orders
				limit = {
					NOT = { has_variable = federation_customs_union }
				}
				PURCHASE_make_internal_shopping_list = yes # 205

			}
			every_governorships = { # Invoices
				limit = {
					NOT = { has_variable = federation_customs_union }
				}
				SELL_calculate_all_internal_revenue_cut_percentages = yes # 206
				SELL_get_all_internal_cuts_of_revenue = yes # 207
				TRADE_set_spender_shares = yes # 208
				TRADE_set_income_shares = yes # 209
				PURCHASE_split_all_costs = yes # 210
				SELL_split_all_income = yes # 211
			}
		}
		every_federation_country = {
			every_governorships = { # Sell offers
				limit = {
					has_variable = federation_customs_union
				}
				SELL_declare_all_internal_available = yes # 212
			}
		}
		every_federation_country = {
			every_governorships = { # Purchase orders
				limit = {
					has_variable = federation_customs_union
				}
				PURCHASE_make_internal_shopping_list = yes # 213
			}
			every_governorships = { # Invoices
				limit = {
					has_variable = federation_customs_union
				}
				SELL_calculate_all_internal_revenue_cut_percentages = yes # 214
				SELL_get_all_internal_cuts_of_revenue = yes # 215
				TRADE_set_spender_shares = yes # 216
				TRADE_set_income_shares = yes # 217
				PURCHASE_split_all_costs = yes # 218
				SELL_split_all_income = yes # 219
			}
		}
		debug_log = "Finished debug_trade.2"
	}

	option = {
		name = "TEST"
	}
}

debug_trade.3 = {
	type = country_event
	title = "TEST"
	desc = "TEST"
	picture = aqueducts

	immediate = {
		every_in_list = {
			variable = governorships_in_atlantic_seaboard_tradezone
			add_treasury = 100
		}
	}

	option = {
		name = "TEST"
	}
}

debug_trade.4 = { # Trade setup, non-test version
	type = country_event
	title = "TEST"
	desc = "TEST"
	picture = aqueducts

	immediate = {
		#MOVEMENT_get_TZ_distances = yes # Commented out for now - needs fixing, svalues are improperly named.
		TRADE_reset_all_tradegoods_TZ_internal_rankings = yes
		TRADE_prepare_quarterly_values = yes
		TRADE_save_connection_time_values = yes
		every_country = {
			every_governorships = {
				TRADE_reset_purchase_order_tender_completions = yes
				TRADE_set_internal_trade_scope = yes # Repeats an effect run by oa_economy_setup, needs to be run quarterly after that
				TRADE_update_governorship_TZs = yes
				TRADE_setup_internal_trade_cuts = yes
				TRADE_reset_quarterly_governorship_values = yes # Not actually obsolete - this deals with governorship scope, while TRADE_reset_quarterly_values deals with global level
			}
			TRADE_setup_tax_rates = yes
		}
	}

	option = {
		name = "TEST"
	}
}

debug_trade.555 = { # Test size of list of internal TZs
	type = country_event
	title = "TEST"
	desc = "TEST"
	picture = aqueducts

	immediate = {
		every_in_list = {
			variable = list_of_trade_partners_all_categories
			add_treasury = 100
		}
	}

	option = {
		name = "TEST"
	}
}