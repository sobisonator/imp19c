@window_margin_left = 20
@window_margin_right = 20
@window_margin_top = 0
@window_margin_bottom = 0

base_window = {
	name = "diplomatic_view"
	size = { 640 900 }
	allow_outside = yes
	#using = FadeStates
	state = {
		name = _show
		
		on_start = "[PdxGuiTriggerAllAnimations('instantiate_then_hide_subwindow')]"
		on_start = "[GetVariableSystem.Set( 'diplomatic_tabs', 'diplomatic' )]"
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_tab_close"
		}
	}
	
	using = main_window_template
	state = {
		name = _hide
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_tab_close"
		}
		on_start = "[GetVariableSystem.Set( 'diplomatic_tabs', 'diplomatic' )]"
		on_start = "[GetScriptedGui('remove_player_subjects_variables_button').Execute( GuiScope.SetRoot( Player.MakeScope ).End )]"
	}

	vbox = {
		using = MainWindowHeaderBox

		blockoverride "FlagOrIcon"
		{
			icon = {
				texture = "gfx/interface/base_parts/yellow_button_color_200fs.dds"
				framesize = { 100 100 }
				frame = 6
				position = { -2 -2 }
				size = { 32 32 }
				modify_texture = {
					texture = "gfx/interface/icons/menu_buttons/menu_diplomacy.dds"
					blend_mode = alphamultiply
				}
			}
		}

		blockoverride "Title_text"
		{
			text = "DIPLOMACY_MENU_HEADER"
		}
		blockoverride "White_buttons" 
		{
			button_back = { 
				shortcut = "previous_window"
				onclick = "[DiplomaticView.OnPrevious]"
				tooltip = "PREVIOUS_DIPLOMATIC_VIEW"
			}
			
			button_close = {
				onclick = "[DiplomaticView.OnClose]"
				onclick = "[GetVariableSystem.Set( 'diplomatic_tabs', 'diplomatic' )]"
				onclick = "[GetScriptedGui('remove_player_subjects_variables_button').Execute( GuiScope.SetRoot( Player.MakeScope ).End )]"
				tooltip = "CLOSE"
				shortcut = "close_window"
			}
		}
		margin_widget = {
			size = { 0 140 }
			layoutpolicy_horizontal = expanding
			hbox = {
				margin_left = -2
				margin_top = 5
				icon = {
					size = { 635 182 }
					using = flat_background_white
					#texture = "gfx/interface/base_parts/background_red.dds"
					spriteType = corneredstretched
					position = { 0 0 }
					modify_texture = {
						name = "Alpha"
						size = { 630 160 }
						blend_mode = alphamultiply
						texture = "gfx/interface/base_parts/horizontal_gradient_stretch_sides_black.dds"
					}
				}
			}
		
			hbox = {
				layoutpolicy_horizontal = expanding
				flowcontainer = {
					direction = vertical
					ignoreinvisible = yes
					widget = {
						size = { 3 3 }	
					}
					panelka_left = { #religion
						size = { 200 32 }
						blockoverride "Icon" { texture = "gfx/interface/icons/powers/religious.dds" }
						blockoverride "TextBox" { text = "[DiplomaticView.GetTargetCountry.GetReligion.GetName]" }
						blockoverride "Tooltip" { tooltip = "[DiplomaticView.GetTargetCountry.GetReligion.GetTooltip]" }
					}
					widget = { size = { 0 10 } }
					panelka_left = { #culture
						size = { 160 32 }
						blockoverride "Icon" { texture = "gfx/interface/icons/governor_policies/cultural_assimilation.dds" }
						blockoverride "TextBox" { text = "[DiplomaticView.GetTargetCountry.GetPrimaryCulture.GetName]" }
						blockoverride "Tooltip" { tooltip = "[DiplomaticView.GetTargetCountry.GetPrimaryCulture.GetTooltip]" }
					}
					widget = { size = { 0 10 } }
					panelka_left = { #manpower
						size = { 120 32 }
						blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/manpower.dds" }
						blockoverride "TextBox" { text = "[DiplomaticView.GetTargetCountry.GetManpower]" }
						blockoverride "Tooltip" { tooltip = "[DiplomaticView.GetTargetCountry.GetManpowerTooltip]" }
					}
				}
				flowcontainer = {
					direction = vertical
					ignoreinvisible = yes
					size = { 220 100 }
					icon = { #flag
						parentanchor = center
						size = { 120 100 }
						banner_migrant_horde = {
							datacontext = "[DiplomaticView.GetTargetCountry]"
							scale = 0.9 
							visible = "[DiplomaticView.GetTargetCountry.HasRank('(int32)0')]"
							tooltip = "[DiplomaticView.GetTargetCountry.GetRankInformation]"
						}
						banner_city_state = {
							datacontext = "[DiplomaticView.GetTargetCountry]"
							visible = "[DiplomaticView.GetTargetCountry.HasRank('(int32)1')]"
							tooltip = "[DiplomaticView.GetTargetCountry.GetRankInformation]"
						}
						
						banner_local_power = {
							datacontext = "[DiplomaticView.GetTargetCountry]"
							visible = "[DiplomaticView.GetTargetCountry.HasRank('(int32)2')]"
							tooltip = "[DiplomaticView.GetTargetCountry.GetRankInformation]"
						}
						
						banner_regional_power = {
							datacontext = "[DiplomaticView.GetTargetCountry]"
							visible = "[DiplomaticView.GetTargetCountry.HasRank('(int32)3')]"
							tooltip = "[DiplomaticView.GetTargetCountry.GetRankInformation]"
						}
						banner_major_power = {
							datacontext = "[DiplomaticView.GetTargetCountry]"
							visible = "[DiplomaticView.GetTargetCountry.HasRank('(int32)4')]"
							tooltip = "[DiplomaticView.GetTargetCountry.GetRankInformation]"
						}
						
						banner_great_power = {
							datacontext = "[DiplomaticView.GetTargetCountry]"
							visible = "[DiplomaticView.GetTargetCountry.HasRank('(int32)5')]"
							tooltip = "[DiplomaticView.GetTargetCountry.GetRankInformation]"
						}
					}
					icon = { #country name
						parentanchor = center
						size = { 220 20 }
						icon_and_text = {
							size = { 220 }
							position = { 0 -6 }
							tooltip = "[DiplomaticView.GetTargetCountry.GetName]"
							blockoverride "LineSize"
							{
								size = { 220 4 }
							} 
							blockoverride "Icon"
							{
								visible = no
							}
							blockoverride "Text"
							{
								position = { 0 0 }
								text = "[DiplomaticView.GetTargetCountry.GetNameWithNoTooltip]"
								align = center|center
								multiline = no
								fontsize = 20
							}
						}
					}
				}
				flowcontainer = {
					direction = vertical
					ignoreinvisible = yes
					widget = {
						size = { 3 3 }	
					}
					panelka_right = { #treasury
						size = { 200 32 }
						blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/treasury.dds" }
						blockoverride "TextBox" { text = "[DiplomaticView.GetTargetCountry.GetTreasury|0]" }
						blockoverride "Tooltip" { tooltip = "[DiplomaticView.GetTargetCountry.GetTreasuryTooltip]" }
					}
					widget = { size = { 0 10 } }
					panelka_right = { #pop
						size = { 160 32 }
						blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/pop_type.dds" }
						blockoverride "TextBox" { text = "[DiplomaticView.GetTargetCountry.GetTotalPopulation]" }
						blockoverride "Tooltip" { tooltip = "[DiplomaticView.GetTargetCountry.BuildTotalPopulationToolTip]" }
					}
					widget = { size = { 0 10 } }
					panelka_right = { #stability
						size = { 120 32 }
						blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/stability.dds" }
						blockoverride "TextBox" { text = "[DiplomaticView.GetTargetCountry.GetStability|2]" }
						blockoverride "Tooltip" { tooltip = "[DiplomaticView.GetTargetCountry.GetStabilityTooltip]" }
					}
				}
			} 
			icon = {
				size = { 100% 100% }
				parentanchor = center
				cpt_button = {
					parentanchor = center
					size = { 50 77 }
					position = { -90 12 }
					block "Context" 
					{
						datacontext = "[DiplomaticView.GetTargetCountry.GetRuler]"
						visible = "[Not(DiplomaticView.GetTargetCountry.IsBarbarian)]"
					}
				}
				cpt_button = {
					parentanchor = center
					size = { 50 77 }
					position = { -90 12 }
					block "Context" 
					{
						visible = "[DiplomaticView.GetTargetCountry.IsBarbarian]"
						datacontext = "[DiplomaticView.GetHorde.GetLeader]"
					}
				}
				cpt_button = {
					parentanchor = center
					size = { 50 77 }
					position = { 90 12 }
					block "Context" 
					{
						visible = "[DiplomaticView.GetTargetCountry.IsBarbarian]"
						datacontext = "[DiplomaticView.GetTargetCountry.GetLeader]"
					}
				}
				cpt_button = {
					parentanchor = center
					size = { 50 77 }
					position = { 90 12 }
					block "Context" 
					{
						datacontext = "[DiplomaticView.GetTargetCountry.MakeScope.Var('monarch_character').GetCharacter]"
						#visible = "[DiplomaticView.GetTargetCountry.MakeScope.Var('monarch_character').IsSet]"
						visible = "[And(DiplomaticView.GetTargetCountry.MakeScope.Var('monarch_character').IsSet,Not(And(DiplomaticView.GetTargetCountry.MakeScope.Var('monarch_character').GetCharacter.IsRuler,EqualTo_string(DiplomaticView.GetTargetCountry.MakeScope.Var('monarch_character').GetCharacter.GetEmployer.GetTag,DiplomaticView.GetTargetCountry.GetTag))))]"
					}
					#tooltip = "[DiplomaticView.GetTargetCountry.GetRuler.IsRuler]"
				}
			}
		}

		margin_widget = {
			size = { 0 50 }
			layoutpolicy_horizontal = expanding
			sub_header_v = {
				size = { 378 0 }
				position = { 8 12 }
				blockoverride "Title_text" 
				{
					text = "Government"
				}	
				blockoverride "Max_text_width"
				{
					max_width = 230
				}
			}
			icon = {
				position = { 2 46 }
				using = beige_medium_background
				spriteType = Corneredtiled
				size = { 386 2 }
			}
			icon = {
				position = { 628 46 }
				using = beige_medium_background
				spriteType = Corneredtiled
				size = { 9 2 }
			}
			hbox = {
				spacing = 2
				margin_top = 10
				margin_right = 10
				@mincategorybuttonwidth = 120
				@maxcategorybuttonwidth = 120
				@mincategorybuttonheight = 28 
				@maxcategorybuttonheight = 34

				hbox = { layoutpolicy_horizontal = expanding }
				category_tab = {
					blockoverride "MinSize" { size = { @mincategorybuttonwidth @mincategorybuttonheight } }
					blockoverride "MaxSize" { size = { @maxcategorybuttonwidth @maxcategorybuttonheight } }
					blockoverride "MinVisible" { visible = "[And( Not( GetVariableSystem.HasValue('diplomatic_tabs', 'diplomatic')), GetVariableSystem.Exists('diplomatic_tabs'))]" }
					blockoverride "MaxVisible" { visible = "[Or( GetVariableSystem.HasValue( 'diplomatic_tabs', 'diplomatic'), Not( GetVariableSystem.Exists('diplomatic_tabs') ) )]" }
					######## Shared Overrides
					blockoverride "Center_text" { text = "DIPLOMATIC" }
					blockoverride "Icon" { visible = no }
					######## Small Button Overrides
					blockoverride "ClickFunction"
					{
						onclick = "[GetVariableSystem.Set('diplomatic_tabs', 'diplomatic')]"
					}
				}  

				category_tab = {
					enabled = "[Not(And( Not( EqualTo_int32( DiplomaticView.GetTargetCountry.GetId, Player.GetId ) ), Not(DiplomaticView.GetTargetCountry.IsBarbarian) ))]"
					blockoverride "MinSize" { size = { @mincategorybuttonwidth @mincategorybuttonheight } }
					blockoverride "MaxSize" { size = { @maxcategorybuttonwidth @maxcategorybuttonheight } }
					blockoverride "MinVisible" { visible = "[Not( GetVariableSystem.HasValue('diplomatic_tabs', 'subjects'))]" }
					blockoverride "MaxVisible" { visible = "[GetVariableSystem.HasValue('diplomatic_tabs', 'subjects')]" }
					######## Shared Overrides
					blockoverride "Center_text" { text = "SUBJECTS" }
					blockoverride "Icon" { visible = no }
					######## Small Button Overrides
					blockoverride "ClickFunction"
					{
						onclick = "[GetVariableSystem.Set('diplomatic_tabs', 'subjects')]"
						onclick = "[GetScriptedGui('show_player_subjects_button').Execute( GuiScope.SetRoot( Player.MakeScope ).End )]"
					}
				}
			}
			icon = {
				visible = "[Not( GetVariableSystem.HasValue('diplomatic_tabs', 'subjects'))]"
				position = { 506 46 }
				using = beige_medium_background
				spriteType = Corneredtiled
				size = { 126 2 }
			}
		}

		################################################################
		########Subjects view#########################################
		################################################################
		vbox = {
			flowcontainer = {
				visible = "[Not(IsDataModelEmpty(Player.MakeScope.GetList('player_subjects')))]"
				flowcontainer = {
					parentanchor = bottom
					text_button_square_highlighted = {
						size = { 230 28 }
						layoutpolicy_horizontal = expanding
						blockoverride "On_click" {
							onclick = "[ExecuteConsoleCommand('gui.ClearWidgets subject_focus_window')]"
							onclick = "[ExecuteConsoleCommand('gui.createwidget gui/subject_focus.gui subject_focus_window')]"
						}
						blockoverride "Center_text"
						{
							text = "Show National Interactions"
						}
					}
				}
			}
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_top = 5
			margin_bottom = @window_margin_bottom
			margin_right = 0
			margin_left = @window_margin_left
			visible = "[GetVariableSystem.HasValue( 'diplomatic_tabs', 'subjects' )]"
			vbox = {
				margin_bottom = 4
				margin_right = 24
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				widget = {
					size = { 0 10 }
				}

				scrollarea = {
					visible = "[Not(IsDataModelEmpty(Player.MakeScope.GetList('player_subjects')))]"
					layoutpolicy_vertical = expanding
					using = VerticalScrollAreaCutOff

					scrollbar_vertical = {
						using = VerticalScrollBar
					}

					scrollbarpolicy_horizontal = always_off
				
					scrollwidget = {
						ignoreinvisible = yes # Added so we can put conditional buttons in for different subject types
						vbox = {
							vbox = {
								layoutpolicy_horizontal = expanding 
								layoutpolicy_vertical = shrinking
								datamodel = "[Player.MakeScope.GetList('player_subjects')]"
								item = {
									hbox = {
										hbox = {
											layoutpolicy_vertical = expanding
											layoutpolicy_horizontal = shrinking
											datacontext = "[Scope.GetCountry]"
											widget = {
												size = { 0 54 }
											}											
											country_flag = {
												tooltip = "COUNTRY_SHORTHAND_INFO"
												parentanchor = vcenter
								
												blockoverride "flag"
												{
													texture = "[Country.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
													frame = "[Country.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
													framesize = { 56 56 }
												}

												blockoverride "size"
												{
													size = { 48 48 }
												}

												blockoverride "click"
												{
													onclick = "[OpenDiplomacy(Country.GetCountry)]"
												}
									
												blockoverride "hover_leave"
												{
													onmousehierarchyleave = "[DiplomaticView.ResetHighlight]"
												}

											}
											widget = {
												size = { 55 30 }
												tag_dark = {
													text = "[Country.Custom('subject_interaction_name')]"
													tooltip = "[Country.GetDescriptiveName]"
													max_width = 135
													fontsize_min = 17
													elide = right
												}
											}
											widget = {
												size = { 95 0 }
											}
											icon_button_square = {
												datacontext = "[GetScriptedGui('subject_interaction_individual_focus_change_button')]"
												size = { 40 40 }
												visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
												blockoverride "On_click"
												{
													enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
													onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
												}
												tooltip = "CHANGE_INDIVIDUAL_SUBJECTS_FOCUS_TT"
												blockoverride "ClickSound" { clicksound = "event:/SFX/UI/Actions/sfx_ui_action_goverment_interactions" }
												blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/roman_eagle.dds" size = { 35 35 } }
											}
											widget = {
												size = { 30 0 }
											}
											icon_button_square = {
												datacontext = "[GetScriptedGui('subject_interaction_add_to_customs_union_button')]"
												size = { 40 40 }
													visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
												blockoverride "On_click"
												{
													enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
													onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
												}
												tooltip = "SUBJECT_ADD_TO_CUSTOMS_UNION_TT"
												#tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( SelectTargetCountryView.Player.MakeScope ).AddScope('player', SelectTargetCountryView.GetCountry.MakeScope ).End )]"
												blockoverride "ClickSound" { clicksound = "event:/SFX/UI/Actions/sfx_ui_action_goverment_interactions" }
												blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/war_on_subject_cost_modifier.dds" size = { 35 35 } }
											}
											widget = {
												size = { 30 0 }
											}
											icon_button_square = {
												datacontext = "[GetScriptedGui('subject_interaction_individual_quota_button')]"
												size = { 40 40 }
												visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
												blockoverride "On_click"
												{
													enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
													onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
												}
												tooltip = "SUBJECT_EXPORT_QUOTA_TT"
												#tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( SelectTargetCountryView.Player.MakeScope ).AddScope('player', SelectTargetCountryView.GetCountry.MakeScope ).End )]"
												blockoverride "ClickSound" { clicksound = "event:/SFX/UI/Actions/sfx_ui_action_goverment_interactions" }
												blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/global_import_commerce_modifier.dds" size = { 35 35 } }
											}
											widget = {
												datacontext = "[GetScriptedGui('subject_interaction_individual_quota_button')]"
												size = { 40 40 }
												visible = "[Not(ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End ))]"
											}
											widget = {
												size = { 30 0 }
											}
											icon_button_square = {
												datacontext = "[GetScriptedGui('subject_interaction_individual_war_button')]"
												size = { 40 40 }
												visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
												blockoverride "On_click"
												{
													enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
													onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
												}
												tooltip = "SUBJECT_FORCE_CULTURE_TT"
												#tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( SelectTargetCountryView.Player.MakeScope ).AddScope('player', SelectTargetCountryView.GetCountry.MakeScope ).End )]"
												blockoverride "ClickSound" { clicksound = "event:/SFX/UI/Actions/sfx_ui_action_goverment_interactions" }
												blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/war_score_cost.dds" size = { 35 35 } }
											}
											widget = {
												size = { 30 0 }
											}
											icon_button_square = {
												datacontext = "[GetScriptedGui('subject_interaction_individual_take_pops_button')]"
												size = { 40 40 }
												visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
												blockoverride "On_click"
												{
													enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
													onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
												}
												tooltip = "CONTRIBUTE_TO_CAPITAL_TT"
												#tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( SelectTargetCountryView.Player.MakeScope ).AddScope('player', SelectTargetCountryView.GetCountry.MakeScope ).End )]"
												blockoverride "ClickSound" { clicksound = "event:/SFX/UI/Actions/sfx_ui_action_goverment_interactions" }
												blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/pop_type.dds" size = { 35 35 } }
											}
											widget = {
												size = { 30 0 }
											}
											icon_button_square = {
												datacontext = "[GetScriptedGui('subject_interaction_individual_manpower_button')]"
												size = { 40 40 }
												visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
												blockoverride "On_click"
												{
													enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
													onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
													onclick = "[PdxGuiTriggerAllAnimations('on_details_hidden')]"
												}
												tooltip = "TAKE_SUBJECTS_MANPOWER_TT"
												#tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( SelectTargetCountryView.Player.MakeScope ).AddScope('player', SelectTargetCountryView.GetCountry.MakeScope ).End )]"
												blockoverride "ClickSound" { clicksound = "event:/SFX/UI/Actions/sfx_ui_action_goverment_interactions" }
												blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/manpower.dds" size = { 35 35 } }

											}
											#expanding element to make the row pretty
											textbox = {
												size = { 200 }
											}
										}													
									}
								}
							}
							vbox = {
								name = "expander"
								layoutpolicy_vertical = growing 
							}
							
						}
						
					}
				}
			}
			margin_widget = {
				size = { 0 16 }
				layoutpolicy_horizontal = expanding
				margin = { -8 0 } 
			}
		}

		################################################################
		########Diplomatic view#########################################
		################################################################
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			visible = "[GetVariableSystem.HasValue( 'diplomatic_tabs', 'diplomatic' )]"
			hbox = {
				name = "diplo_view_second_row"
				layoutpolicy_horizontal = expanding
				margin_left = @window_margin_left
				margin_right = @window_margin_right
			
				hbox = {
					layoutpolicy_horizontal = expanding
					#layoutpolicy_vertical = expanding
				
					flowcontainer = {
						direction = vertical
						visible = "[DiplomaticView.GetTargetCountry.IsBarbarian]"

						margin_left = 12
						sub_header = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = fixed
							widgetanchor = top 
							size = { 100% 30 }
							blockoverride "Title_text"
							{
								datacontext = "[DiplomaticView.GetHorde]"
								text = "HORDE_UI_STRING"
							}
						}
						icon = {
							texture = "gfx/interface/event_window/Event_revolt.dds"
							size = { 260 105 }
						}
					}
				
					margin_widget = {
						size = { 105 131 }
						margin = { 4 4 }
						visible = "[Not(DiplomaticView.GetTargetCountry.IsBarbarian)]"
						icon = { 
							position = { 0 6 }
							panelka_center = { #ships
								size = { 105 32 }
								position = { 0 0 }
								datacontext = "[DiplomaticView.GetTargetCountry]"
								blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/naval_combat.dds" }
								blockoverride "TextBox" { text = "[DiplomaticView.GetTargetCountry.GetTotalNumOfShips]" }
								blockoverride "Tooltip" { tooltip = "DIPLOMATIC_VIEW_TOTAL_SHIPS" }
							}
							panelka_center = { #none
								size = { 105 32 }
								position = { 0 40 }
								blockoverride "Icon" { texture = "" }
								blockoverride "TextBox" { text = "" }
								blockoverride "Tooltip" { tooltip = "" }
							}
							panelka_center = { #none
								size = { 105 32 }
								position = { 0 80 }
								blockoverride "Icon" { texture = "" }
								blockoverride "TextBox" { text = "" }
								blockoverride "Tooltip" { tooltip = "" }
							}
						}
					}
					margin_widget = {
						size = { 300 131 }
						margin = { 4 4 }
						visible = "[Not(DiplomaticView.GetTargetCountry.IsBarbarian)]"
						icon = {
							position = { 0 6 }
							panelka = { #capital
								size = { 180 32 }
								position = { 0 0 }
								blockoverride "TextBox" { text = "Capital: [DiplomaticView.GetTargetCountry.GetCapital.GetName]" }
							}
							panelka = { #population
								size = { 180 32 }
								position = { 0 40 }
								blockoverride "TextBox" { text = "NATIONAL_POPULATION" }
							}
							panelka = { #cities
								size = { 180 32 }
								position = { 0 80 }
								blockoverride "TextBox" { text = "Provinces: [DiplomaticView.GetTargetCountry.GetOwnedProvinceCount]" }
							}
						}
						textbox = {
							position = { 0 15 }
							parentanchor = top|right
							maximumsize = { 100 -1 }
							text = "FEDERATION_MEMBERSHIP"
							fontsize = 16
							autoresize = yes
							using = BaseFontM
							using = Black_FontColor
							visible = "[DiplomaticView.GetTargetCountry.MakeScope.Var('member_of_federation').IsSet]"
						} 
					}
					margin_widget = {
						size = { 150 134 }
						allow_outside = yes
						datacontext = "[DiplomaticView.GetTargetCountry]"
						icon = {
							position = { 28 67 }
							alpha = 0.4
							#icon = {
							#	texture = "gfx/interface/gov_view/laws_republic.dds"
							#	spriteType = corneredtiled
							#	size = { 250 60 }
							#	position = { 0 6 }
							#	parentanchor = bottom|hcenter
							#	visible = "[DiplomaticView.GetTargetCountry.GetGovernment.IsRepublic]"
							#	datacontext = "[DiplomaticView]"
							#	tooltip = "TARGET_GOVTYPE_DIPLO_TT"
							#	modify_texture = {
							#		name = "Alpha"
							#		texture = "gfx/interface/base_parts/horizontal_gradient_stretch_sides_black_invert_terrain.dds"
							#		blend_mode = alphamultiply
							#		spriteType = Corneredtiled
							#		spriteborder = { 60 2 }
							#	}
							#	modify_texture = {
							#		name = "Alpha"
							#		texture = "gfx/interface/base_parts/gradient_black_short.dds"
							#		blend_mode = alphamultiply
							#		spriteType = Corneredtiled
							#		spriteborder = { 60 2 }
							#	}
							#} 
							
							#icon = {
							#	texture = "gfx/interface/gov_view/laws_monarchy.dds"
							#	spriteType = corneredtiled
							#	size = { 250 60 }
							#	position = { 0 6 }
							#	parentanchor = bottom|hcenter
							#	visible = "[DiplomaticView.GetTargetCountry.GetGovernment.IsMonarchy]"
							#	datacontext = "[DiplomaticView]"
							#	tooltip = "TARGET_GOVTYPE_DIPLO_TT"
							#	modify_texture = {
							#		name = "Alpha"
							#		texture = "gfx/interface/base_parts/horizontal_gradient_stretch_sides_black_invert_terrain.dds"
							#		blend_mode = alphamultiply
							#		spriteType = Corneredtiled
							#		spriteborder = { 60 2 }
							#	}
							#	modify_texture = {
							#		name = "Alpha"
							#		texture = "gfx/interface/base_parts/gradient_black_short.dds"
							#		blend_mode = alphamultiply
							#		spriteType = Corneredtiled
							#		spriteborder = { 60 2 }
							#	}
							#} 
							
							#icon = {
							#	texture = "gfx/interface/gov_view/laws_tribal.dds"
							#	spriteType = corneredtiled
							#	size = { 250 60 }
							#	position = { 0 6 }
							#	parentanchor = bottom|hcenter
							#	visible = "[DiplomaticView.GetTargetCountry.GetGovernment.IsTribal]"
							#	datacontext = "[DiplomaticView]"
							#	tooltip = "TARGET_GOVTYPE_DIPLO_TT" 
							#	modify_texture = {
							#		name = "Alpha"
							#		texture = "gfx/interface/base_parts/horizontal_gradient_stretch_sides_black_invert_terrain.dds"
							#		blend_mode = alphamultiply
							#		spriteType = Corneredtiled
							#		spriteborder = { 60 2 }
							#	}
							#	modify_texture = {
							#		name = "Alpha"
							#		texture = "gfx/interface/base_parts/gradient_black_short.dds"
							#		blend_mode = alphamultiply
							#		spriteType = Corneredtiled
							#		spriteborder = { 60 2 }
							#	}
							#}
						}
						container = {
							visible = "[Not(DiplomaticView.GetTargetCountry.IsBarbarian)]"
							position = { -80 72 }
							textbox = {
								position = { 0 -30 }
								parentanchor = hcenter
								text = "[DiplomaticView.GetTargetCountry.GetGovernment.GetName]"
								autoresize = yes
								using = BaseFontM
								using = Black_FontColor
							}
							container = {
								flowcontainer = {
									position = { 0 3 }
									spacing = 16
									name = "dummy_ideas_grid" 
											
									container = {
										button = {
											name = "space1"
											using = idea_slot_not_available
											size = { 42 42 }
										}
									}
									container = {
										button = {
											name = "space2"
											using = idea_slot_not_available
											size = { 42 42 }
										}
									}
									container = {
										button = {
											name = "space3"
											using = idea_slot_not_available
											size = { 42 42 }
										}
									}
									container = {
										button = {
											name = "space4"
											using = idea_slot_not_available
											size = { 42 42 }
											
										}
									}
								} 
									
								fixedgridbox = {
									position = { 0 -1 }
									name = "ideas_grid"
									flipdirection = yes
									addcolumn = 58
									addrow = 50
									maxhorizontalslots = 4
									maxverticalslots = 1
									item = {
										widget = { 
											datacontext = "[IdeaItem.GetIdea]" 
											size = { 50 50 }

											icon = {
												name = "Idea Button"
												position = { -4 0 }
												tooltipwidget = idea_item_desc_tooltip
												visible = "[IdeaItem.IsValid]"
												alwaystransparent = no
												size = { 48 48 }
												widgetanchor = center
												parentanchor = center	
												enabled = yes
												texture = "[IdeaItem.GetIcon]"
											}
											 
											button = {
												name = "Idea Button Invalid"
								
												position = { -5 0 }
												# tooltip = "NO_IDEA_FOREIGN"
												tooltipwidget = no_idea_tooltip
												visible = "[Not(IdeaItem.IsValid)]"
												alwaystransparent = no
												size = { 50 50 }
												gfxtype = framedbuttongfx
												widgetanchor = center
												parentanchor = center	
												enabled = no
												framesize = { 200 200 }
												upframe = 1
												overframe = 1
												downframe = 1
												disableframe = 1
												using = button_tiled_texture
												
												modify_texture = {
													name = "Alpha"
													texture = "gfx/interface/base_parts/button2_inner_x8y8bd_alpha.dds"
													blend_mode = alphamultiply
													spriteType = Corneredtiled
													spriteborder = { 6 6 }
												}
												
												icon = {
													name = "Pattern"
													texture = "gfx/interface/base_parts/square_button_corner_pattern_x22y22bd.dds"
													spriteType = Corneredtiled
													spriteborder = { 11 11 }
													size = { 100% 100% }
												}
												
												icon = {
													name = "Idea Mark"
													widgetanchor = center
													parentanchor = center	
													texture = "gfx/interface/base_parts/idea_mark.dds"
													size = { 36 36 }
												}
											}
										}
									}
								}
							}
						}

					}
				}
			}
			hbox = {
				name = "diplo_view_third_row"
				margin_bottom = @window_margin_bottom
				margin_right = @window_margin_right
				margin_left = @window_margin_left
			
				margin_widget = {
					size = { 250 540 }
					margin_bottom = 14
					sub_header_v = {   
						size = { 100% 506 }

						blockoverride "Title_text" 
						{
							text = "FOREIGN_INTERACTIONS_DIPLO_VIEW"
						}
					
						blockoverride "Max_text_width"
						{
							max_width = 230
						}
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							margin_top = 40
							margin_right = 6
							scrollarea = {
								layoutpolicy_horizontal = expanding 
								layoutpolicy_vertical = expanding
								using = VerticalScrollAreaCutOff
								scrollbar_vertical = {
									using = VerticalScrollBar
								}
								scrollbarpolicy_horizontal = always_off
							
								scrollwidget = {
								
									vbox = {
										vbox = {
											layoutpolicy_horizontal = expanding 
											layoutpolicy_vertical = shrinking
											datamodel = "[DiplomaticView.GetDiplomaticRelations]"
											margin_right = 4
											item = { 
												overlappingitembox = {
													#using = NoninteractableBG
													#blockoverride "Margins"
													#{
													#	margin_right = -8
													#	margin_bottom = -4
													#}
													margin_right = 14
													datamodel = "[RelationTypeItem.GetRelations]"
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = fixed
													size = { 0 36 }
													spacing = 2
													margin_left = 38
													icon = {
														texture = "[RelationTypeItem.AccessIcon]"
														tooltip = "[RelationTypeItem.GetToolTip]"
														position = { 0 -1 }
														size = { 34 34 }
													}
													item = {
														country_flag = {
															tooltip = "[RelationDescItem.GetToolTip]"
															datacontext = "[RelationDescItem.GetCountry]"
														
															blockoverride "flag"
															{
																texture = "[RelationDescItem.AccessFlagIcon]"
																frame = "[RelationDescItem.GetFlagFrame]"
																framesize = { 56 56 }
															}
														
															blockoverride "size"
															{
																size = { 30 30 }
															}
														
															blockoverride "click"
															{
																onclick = "[RelationDescItem.OnClick]"
															}
														
															blockoverride "hover_leave"
															{
																onmousehierarchyleave = "[DiplomaticView.ResetHighlight]"
															}
														}
													}
												}
											}
										}
										vbox = {
											name = "expander"
											layoutpolicy_vertical = growing 
										}
									}
								}
							}
							margin_widget = {
								size = { 0 210 }
								layoutpolicy_horizontal = expanding
								sub_header_v = {
									position = { 0 5 }
									size = { 100% 0 }
									blockoverride "Title_text" 
									{ 
										text = "OUR_DETAILS"
									}
								}
								flowcontainer = {
									position = { -2 40 }
									name = "diplo_view_our_details"
									spacing = 18
									@icon_width_our_details = 105

									flowcontainer = { 
										direction = vertical 
										spacing = 12
										parentanchor = vcenter

										panelka_center = { #agressive expansion
											size = { @icon_width_our_details 32 }
											blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/agressive_expansion_monthly_decay.dds" }
											blockoverride "TextBox" { text = "[DiplomaticView.GetAEChange |2]" }
											blockoverride "Tooltip" { tooltip = "[DiplomaticView.GetAEChangeInfo]" }
										}
										panelka_center = { #agressive expansion impact
											size = { @icon_width_our_details 32 }
											blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/agressive_expansion_impact.dds" }
											blockoverride "TextBox" { text = "[DiplomaticView.GetPlayer.GetModifierValue('agressive_expansion_impact')]" }
											blockoverride "Tooltip" { tooltip = "[DiplomaticView.GetPlayer.GetModifierTooltip('agressive_expansion_impact')]" }
										}
										panelka_center = { #agressive expansion
											size = { @icon_width_our_details 32 }
											blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/diplomatic_range.dds" }
											blockoverride "TextBox" { text = "[DiplomaticView.GetDiplomaticRange]" }
											blockoverride "Tooltip" { tooltip = "[DiplomaticView.GetDiplomaticRangeTooltip]" }
										}
										panelka_center = { #diplomatic stance change cost
											size = { @icon_width_our_details 32 }
											blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/diplomacy.dds" }
											blockoverride "TextBox" { text = "[DiplomaticView.GetPlayer.GetModifierValue('change_diplomatic_stance_cost_modifier')]" }
											blockoverride "Tooltip" { tooltip = "[DiplomaticView.GetPlayer.GetNumStanceChangesInfo]" }
										}
									}

									flowcontainer = { 
										direction = vertical
										spacing = 12
										parentanchor = vcenter

										panelka_center = { #diplomatic relations
											size = { @icon_width_our_details 32 }
											blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/diplomatic_relations.dds" tooltip = "[DiplomaticView.GetPlayer.GetActiveRelationsInfo]" }
											blockoverride "TextBox" { text = "[DiplomaticView.GetPlayer.GetNumActiveRelations]/[DiplomaticView.GetPlayer.GetNumActiveRelationsLimit]" }
											blockoverride "Tooltip" { tooltip = "[DiplomaticView.GetPlayer.GetModifierTooltip( 'diplomatic_relations' )]"  }
										}
										panelka_center = { #diplomatic reputation
											size = { @icon_width_our_details 32 }
											blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/diplomatic_reputation.dds" }
											blockoverride "TextBox" { text = "[DiplomaticView.GetPlayer.GetModifierValue('diplomatic_reputation')]" }
											blockoverride "Tooltip" { tooltip = "DIP_VIEW_REPUTATION_TOOLTIP" }
										}
										panelka_center = { #agressive expansion impact
											size = { @icon_width_our_details 32 }
											blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/improve_relation.dds" }
											blockoverride "TextBox" { text = "[DiplomaticView.GetPlayer.GetModifierValue('improve_relation_impact')]" }
											blockoverride "Tooltip" { tooltip = "[DiplomaticView.GetPlayer.GetModifierTooltip('improve_relation_impact')]" }
										}
										icon = {
											size = { 110 32 }
											flowcontainer = {
												ignoreinvisible = yes
												parentanchor = vcenter
												position = { 10 0 }
												icon_button_square = {
													size = { 42 42 }
													visible = "[Not(DiplomaticView.IsShowStances)]"
													blockoverride "Icon"
													{
														texture = "[GetDiplomaticStanceIcon(DiplomaticView.GetPlayer.GetDiplomaticStance)]"
														size = { 80% 80% }
													}
													blockoverride "On_click"
													{
														onclick = "[DiplomaticView.ShowStances]"
													}
												} 

												icon_button_square = {
													size = { 42 42 }
													visible = "[DiplomaticView.IsShowStances]"
													blockoverride "Icon"
													{
														texture = "[GetDiplomaticStanceIcon(DiplomaticView.GetPlayer.GetDiplomaticStance)]"
														size = { 80% 80% }
													}
													blockoverride "On_click"
													{
														onclick = "[DiplomaticView.HideStances]" 
													}
												}
												widget = {
													size = { 10 0 }
												}
												icon_button_square = {
													size = { 42 42 }
													blockoverride "Icon"
													{
														texture = "gfx/interface/icons/diplomatic_status/truce.dds"
														size = { 80% 80% }
													}
													blockoverride "On_click"
													{
														onclick = "[PdxGuiTriggerAllAnimations('on_details_shown')]"
													}
													tooltip = "Opinions"
													state = {
														name = instantiate_then_hide_subwindow
														on_finish = "[PdxGuiWidget.Show]"
													}
													state = {
														name = "on_details_shown"
														on_start = "[PdxGuiWidget.Hide]"
													}
													state = {
														name = "on_details_hidden"
														on_start = "[PdxGuiWidget.Show]"
													}
												} 
												icon_button_square = {
													size = { 42 42 }
													visible = no
													blockoverride "Icon"
													{
														texture = "gfx/interface/icons/diplomatic_status/truce.dds"
														size = { 80% 80% }
													}
													blockoverride "On_click"
													{
														onclick = "[PdxGuiTriggerAllAnimations('on_details_hidden')]"
													}
													tooltip = "Opinions"
													state = {
														name = instantiate_then_hide_subwindow
														on_finish = "[PdxGuiWidget.Hide]"
													}
													state = {
														name = "on_details_shown"
														on_start = "[PdxGuiWidget.Show]"
													}
													state = {
														name = "on_details_hidden"
														on_start = "[PdxGuiWidget.Hide]"
													}
												}
											}
										}
									}
								} 
							}		
						}
					}
				}

				margin_widget = {
					size = { 350 540 }
					margin_left = 4
					sub_header_v = { 
						size = { 100% 505 }
						blockoverride "Title_text" 
						{
							text = "DIPLOMATIC_INTERACTIONS_DIPLO_VIEW"
						}
					
						blockoverride "Max_text_width"
						{
							max_width = 320
						}
						margin_widget = {
							size = { 100% 48 }
							position = { 0 30 }
							blockoverride "Margins" { margin = { 2 4 } }
							#using = NoninteractableBG
							visible = "[Not(DiplomaticView.GetTargetCountry.IsBarbarian)]"
						
							hbox = {
								margin = { 4 0 }
								layoutpolicy_horizontal = expanding
								spacing = 0
							
								icon_card = {
									name = "their_stance"
									visible = "[Not(DiplomaticView.GetTargetCountry.IsBarbarian)]"
									blockoverride "Size" { size = { 36 36 } }
									blockoverride "Icon"
									{
										texture = "[GetDiplomaticStanceIcon(DiplomaticView.GetTargetCountry.GetDiplomaticStance)]"
									}

									datacontext = "[DiplomaticView.GetTargetCountry.GetDiplomaticStance]"
									tooltipwidget = { using = diplomatic_stance_tooltip }
								
									blockoverride "Text"
									{
										text ""
									}
								}
								icon_and_text = {
									size = { 86 0 }
									visible = "[Not(DiplomaticView.GetTargetCountry.IsBarbarian)]"
									tooltip = "[DiplomaticView.GetTargetCountry.GetOpinionDescription(DiplomaticView.GetPlayer)]"
									blockoverride "Icon"
									{
										texture = "gfx/interface/icons/diplomatic_status/opinion_improvement_active.dds"
									}
									blockoverride "Text"
									{
										text = "[DiplomaticView.GetTargetCountry.GetOpinionOf(DiplomaticView.GetPlayer)|+=]"
									}
								}
								icon_and_text = {
									size = { 86 0 }
									visible = "[Not(DiplomaticView.GetTargetCountry.IsBarbarian)]"
									tooltip = "[DiplomaticView.GetPlayer.GetOpinionDescription(DiplomaticView.GetTargetCountry)]"
									blockoverride "Icon"
									{
										texture = "gfx/interface/icons/diplomatic_status/opinion_improvement_passive.dds"
									}
									blockoverride "Text"
									{
										text = "[DiplomaticView.GetPlayer.GetOpinionOf(DiplomaticView.GetTargetCountry)|+=]"
									}
								}
								icon_and_text = {
									size = { 70 0 }
									visible = "[And(Not( DiplomaticView.GetTargetCountry.IsBarbarian), DiplomaticView.GetTargetCountry.IsSubject )]"
									tooltip = "[DiplomaticView.GetTargetCountry.GetSubjectLoyaltyInfo]"
									blockoverride "Icon"
									{
										texture = "gfx/interface/icons/shared_icons/loyalty.dds"
									}
									blockoverride "Text"
									{
										text = "[DiplomaticView.GetTargetCountry.GetSubjectLoyalty|0]"
										visible = "[DiplomaticView.GetTargetCountry.IsSubject]"
									}
									textbox = {
										visible = "[Not(DiplomaticView.GetTargetCountry.IsSubject)]"
										name = "Text"
										position = { 0 3 }
										size = { 100% 24 }					
										align = right 
										elide = right
										using = BaseFontM
										using = Black_FontColor
										margin_right = 6
										text = "NOT_A_SUBJECT_MATE" 
									}
								}
							}
						}

						scrollarea = {
							size = { 342 428 }
							position = { 0 80 }
							scrollbarpolicy_horizontal = always_off
							using = VerticalScrollAreaCutOff
							scrollbar_vertical = {
								using = VerticalScrollBar
							}

							scrollwidget = {

								vbox = {

									vbox = {
										visible = "[DiplomaticView.HasDiplomaticPending]"
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = fixed
										using = NoninteractableBG
										blockoverride "Margins" 
										{
											margin = { 2 8 }
										}
									
										textbox = {
											autoresize = yes
											multiline = yes
											maximumsize = { 368 -1 }
											using = BaseFontS
											using = Black_FontColor
											text = "[DiplomaticView.GetDiplomaticPendingText]"
										}
										tooltip = "[DiplomaticView.GetDiplomaticPendingTooltip]"
									}
									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = preferred
										margin_left = 8
										margin_right = 10
										#margin_top = -35
										datacontext = "[DiplomaticView.GetDefaultActionCategory]"
										using = diplomatic_actions_v2
									}

									vbox = {
										name = "actions_grid"
										layoutpolicy_vertical = shrinking
										datamodel = "[DiplomaticView.GetActions]"
										layoutpolicy_horizontal = expanding
										margin_left = 8
										margin_right = 10
			
										item = {
											vbox = {	
												layoutpolicy_horizontal = expanding
												vbox = {
													visible = "[Not(IsDataModelEmpty(DiplomaticView.GetActions))]"
													margin_left = 0
													margin_right = 4
													layoutpolicy_horizontal = expanding

													category_drop = {
														layoutpolicy_horizontal = expanding
														size = { 0 32 }
														blockoverride "Text_alignment" 
														{ 
															parentanchor = left|vcenter 
															align = left
															position = { 16 -2 }
															max_width = 310
														}
														blockoverride "Text" 
														{
															text = "[DiplomaticActionCategory.GetName]" 
														}
														blockoverride "On_click" { onclick = "[DiplomaticActionCategory.OnClick]" }
														blockoverride "Down" { visible = yes }
														blockoverride "Right" { visible = no }
														blockoverride "RightArrowVisible" { visible = no }
														visible = "[DiplomaticActionCategory.IsExpanded]"
													}

													category_drop = {
														name = "close_button_dip"
														layoutpolicy_horizontal = expanding
														size = { 0 32 }
														blockoverride "Text_alignment" 
														{ 
															parentanchor = left|vcenter 
															align = left
															position = { 16 -2 }
															max_width = 310
														}
														blockoverride "Text" { text = "[DiplomaticActionCategory.GetName]" }
														blockoverride "On_click" { onclick = "[DiplomaticActionCategory.OnClick]" }
														blockoverride "Down" { visible = no }
														blockoverride "Right" { visible = yes }
														blockoverride "RightArrowVisible" { visible = yes }
													
														visible = "[Not(DiplomaticActionCategory.IsExpanded)]" 
													}
												}
											
												vbox = {
													using = diplomatic_actions_v2
													layoutpolicy_horizontal = expanding
												}
											}
										}
									}
									margin_widget = {
										size = { 0 28 }
										layoutpolicy_horizontal = expanding
										margin = { 7 0 }
										margin_right = 0


										vbox = {
											visible = "[Not(IsDataModelEmpty(DiplomaticView.GetActions))]"
											margin_left = 0
											margin_right = 22
											layoutpolicy_horizontal = expanding

											category_drop = {
												name = "close_button_trade_dip"
												layoutpolicy_horizontal = expanding
												size = { 0 32 }
												blockoverride "Text_alignment" 
												{ 
													parentanchor = left|vcenter 
													align = left
													position = { 16 -2 }
													max_width = 300
												}
												blockoverride "Text" 
												{
													text = "Trade Actions" 
												}
												blockoverride "On_click" { onclick = "[GetVariableSystem.Set( 'trade_actions_open', 'no' )]" }
												blockoverride "Down" { visible = yes }
												blockoverride "Right" { visible = no }
												blockoverride "RightArrowVisible" { visible = no }

												visible = "[GetVariableSystem.HasValue( 'trade_actions_open', 'yes' )]"
											}

											category_drop = {
												name = "open_button_trade_dip"
												layoutpolicy_horizontal = expanding
												size = { 0 32 }
												blockoverride "Text_alignment" 
												{ 
													parentanchor = left|vcenter 
													align = left
													position = { 16 -2 }
													max_width = 300
												}
												blockoverride "Text" { text = "Trade Actions" }
												blockoverride "On_click" { onclick = "[GetVariableSystem.Set( 'trade_actions_open', 'yes' )]" }
												blockoverride "Down" { visible = no }
												blockoverride "Right" { visible = yes }
												blockoverride "RightArrowVisible" { visible = yes }
											
												visible = "[Not( GetVariableSystem.HasValue( 'trade_actions_open', 'yes' ) )]"
											}
										}

									}

									vbox = {
										visible = "[And(GetVariableSystem.HasValue( 'trade_actions_open', 'yes' ), And(Not(DiplomaticView.GetTargetCountry.IsBarbarian), Not(EqualTo_int32( DiplomaticView.GetTargetCountry.GetId, Player.GetId ))))]"
										margin_left = 4
										margin_right = 16
										margin_top = 10
										layoutpolicy_horizontal = expanding

										# Trade agreement - all
										diplomacy_action_button = {
											size = { 0 22 }
											layoutpolicy_horizontal = expanding
											margin = { 14 0 }
											margin_right = 0

											datacontext = "[GetScriptedGui('trade_agreement_all_button')]"
											size = { 100% 100% }
											parentanchor = hcenter
											layoutpolicy_horizontal = expanding

											enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"

											blockoverride "On_click"
											{
												enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
												onclick = "[ScriptedGui.Execute(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
											}

											blockoverride "Left_text" 
											{ 
												margin_left = 24
												text = "[Select_CString( ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope).End ), 'Cancel Trade Agreement: #T All', 'Trade Agreement: #T All' )]"
											}
											
											blockoverride "Right_text"
											{
												text = "Test"
												using = Negative_FontColor
												# Make fontcolor conditional
												tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
											}	
											
											blockoverride "Icon" 
											{
												framesize = { 46 46 }
												#visible = "[DiplomaticActionItem.RequireAcceptance]"
												texture = "gfx/interface/diplomacy/ai_accept_decline_icon.dds"
												frame = "[Select_int32(ScriptedGui.IsValid(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End),'(int32)2','(int32)1')]"
												tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
											}	

											tooltip =  "[SelectLocalization( ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope).End ), 'cancel_trade_agreement_all_tt_title', 'offer_trade_agreement_all_tt_title' )]#T [DiplomaticView.GetTargetCountry.GetName] #! [SelectLocalization( ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope).End ), 'cancel_trade_agreement_all_tt_body', 'offer_trade_agreement_all_tt_body' )]"
										}

										widget = { size = { 0 4 } } # Adds spacing between diplo buttons

										diplomacy_action_button = {
											size = { 0 22 }
											layoutpolicy_horizontal = expanding
											margin = { 14 0 }
											margin_right = 0

											datacontext = "[GetScriptedGui('trade_agreement_food_goods_button')]"
											parentanchor = hcenter

											enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"

											blockoverride "On_click"
											{
												enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( Player.MakeScope ).AddScope('recipient', Country.MakeScope).End )]"
												onclick = "[ScriptedGui.Execute(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
											}

											blockoverride "Left_text" 
											{ 
												margin_left = 24
												text = "[Select_CString( ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope).End ), 'Cancel Trade Agreement: #T Food', 'Trade Agreement: #T Food' )]"
											}
											
											blockoverride "Right_text"
											{
												text = "Test"
												using = Negative_FontColor 
												tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
											}	
											
											blockoverride "Icon" 
											{
												framesize = { 46 46 }
												#visible = "[DiplomaticActionItem.RequireAcceptance]"
												texture = "gfx/interface/diplomacy/ai_accept_decline_icon.dds"
												frame = "[Select_int32(ScriptedGui.IsValid(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End),'(int32)2','(int32)1')]"
												tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
											}	

											tooltip =  "[SelectLocalization( ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope).End ), 'cancel_trade_agreement_all_tt_title', 'offer_trade_agreement_all_tt_title' )]#T [DiplomaticView.GetTargetCountry.GetName] #! [SelectLocalization( ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope).End ), 'cancel_trade_agreement_food_tt_body', 'offer_trade_agreement_food_tt_body' )]"
										}

										widget = { size = { 0 4 } } # Adds spacing between diplo buttons
									}

									margin_widget = {
										size = { 0 28 }
										layoutpolicy_horizontal = expanding
										margin = { 14 0 }
										margin_right = 7

										text_button_square = {
											size = { 100% 28 }
											layoutpolicy_horizontal = expanding
											datacontext = "[GetScriptedGui('sell_provinces')]"
											enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
											visible = "[And(Not(DiplomaticView.GetTargetCountry.IsBarbarian), Not(EqualTo_int32( DiplomaticView.GetTargetCountry.GetId, Player.GetId )))]"
											blockoverride "On_click" {
												onclick = "[ScriptedGui.Execute(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
												onclick = "[ExecuteConsoleCommand('gui.ClearWidgets sell_provinces_window')]"
												onclick = "[ExecuteConsoleCommand('gui.createwidget gui/sell_provinces.gui sell_provinces_window')]"
											}
											blockoverride "Center_text"
											{
												text = "sell_province"
											}
										}
									}

									margin_widget = {
										size = { 0 28 }
										layoutpolicy_horizontal = expanding
										margin = { 14 0 }
										margin_right = 7


										text_button_square = {
											size = { 100% 28 }
											layoutpolicy_horizontal = expanding
											datacontext = "[GetScriptedGui('give_up_claims')]"
											enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
											visible = "[And(Not(DiplomaticView.GetTargetCountry.IsBarbarian), Not(EqualTo_int32( DiplomaticView.GetTargetCountry.GetId, Player.GetId )))]"
											blockoverride "On_click" {
												onclick = "[ScriptedGui.Execute(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
											}
											blockoverride "Center_text"
											{
												text = "give_up_claims"
											}
										}
									}
									vbox = {
										layoutpolicy_vertical = expanding
									}
								}
							}
						}
					}
				}		
			}
		}
	}
	widgetid = "right_attach"
	widgetanchor = top
	
	base_sub_window = {
		gfxtype = windowgfx
		name = "diplo_view_inherited"
		size = { 380 892 }
		#visible = "[Not( GetVariableSystem.HasValue('diplomatic_tabs', 'subjects'))]"
		visible = no
		movable = no
		allow_outside = yes
		minimumsize = { 380 540 } 
		position = { 0 8 }

		blockoverride "Title_text"
		{
			text = "FOREIGN_POWERS_LIST"
		}
		blockoverride "White_buttons" 
		{
		
			button_close = {
				onclick = "[PdxGuiTriggerAllAnimations('on_details_hidden')]"
				tooltip = "CLOSE"
			}
		}
	
		attachto = { 
			widgetid = "right_attach" 
			parentanchor = right
		} 
	
		state = {
			name = diplo_reset_size
		
			animation = {
				size = { 340 740 }
			}
		
		}
	
		state = {
			name = instantiate_then_hide_subwindow
		
			on_finish = "[PdxGuiWidget.Hide]"
		}
	
		state = {
			name = "on_details_shown"
		
			on_start = "[PdxGuiWidget.Show]"
		
		}
	
		state = {
			name = "on_details_hidden"
		
			on_start = "[PdxGuiWidget.Hide]"
		
		}
	
		vbox = {
			margin_top = 30
			margin_widget = {
				size = { 342 900 }

				margin_widget = {
					size = { 100% 100% }
					position = { 0 0 }
					#using = NoninteractableBG
					name = "foreign_powers_list"
					margin_widget = { 
						size = { 100% 40 }
						position = { 0 8 }
						name = "tickboxes"
					
						flowcontainer = {
							spacing = 12
							icon_and_text = {
								size = { 160 0 }
								tooltip = "SHOW_NEIGHBOR_TT"
								blockoverride "Icon"
								{
									check_box_button = {
										position = { 4 4 }
										blockoverride "Frame"
										{
											frame = "[DiplomaticView.GetNeighborIconFrame]"
										} 
										blockoverride "On_click"
										{
											onclick = "[DiplomaticView.ToggleNeighbor]"
										}
									}
								}
								blockoverride "Text" 
								{
									text = "SHOW_NEIGHBOR"
									align = left
								}
							}
						
							icon_and_text = {
								size = { 160 0 }
								tooltip = "SHOW_REGION_TT"
								blockoverride "Icon"
								{
									check_box_button = {
										position = { 4 4 }
										blockoverride "Frame"
										{
											frame = "[DiplomaticView.GetRegionIconFrame]"
										} 
										blockoverride "On_click"
										{
											onclick = "[DiplomaticView.ToggleRegion]"
										}
									}
								}
								blockoverride "Text" 
								{
									text = "SHOW_REGION"
									align = left
								}
							}
						}
					}
					margin_widget = {
						size = { 100% 46 }
						position = { 0 44 }
						flowcontainer = {
							position = { 0 8 }
							spacing = 4
							text_button_sort = {
								size = { 238 0 }
								tooltip = SORT_NAME_TT
							
								blockoverride "Button_text"
								{
									text = "A_Z"
								}
							
								blockoverride "Icon"
								{
									visible = no
								}
							
								blockoverride "On_click"
								{
									onclick = "[DiplomaticView.Sort('name')]"
								}
								blockoverride "DownState" { down = "[DiplomaticView.IsSorted('name')]" }
							} 
							text_button_sort = {
								size = { 46 0 }
								tooltip = SORT_OPINION_TT
							
								blockoverride "Button_text"
								{
									text = ""
								}
							
								blockoverride "Icon"
								{
									visible = yes
									texture = "gfx/interface/icons/diplomatic_status/opinion_improvement_active.dds"
								}
							
								blockoverride "On_click"
								{
									onclick = "[DiplomaticView.Sort('opinion')]"
								}
								blockoverride "DownState" { down = "[DiplomaticView.IsSorted('opinion')]" }
							}
							text_button_sort = {
								size = { 44 0 }
								tooltip = SORT_RANK_TT
							
								blockoverride "Button_text"
								{
									text = ""
								}
							
								blockoverride "Icon"
								{
									visible = yes
									texture = "gfx/interface/diplomacy/country_rank.dds"
									framesize = { 54 54 }
									frame = 4
								}
							
								blockoverride "On_click"
								{
									onclick = "[DiplomaticView.Sort('rank')]"
								
								}
								blockoverride "DownState" { down = "[DiplomaticView.IsSorted('rank')]" }
							}
						}
					}
					margin_widget = { 
						size = { 100% 741 }
						position = { 0 91 }
						name = "relations_list"
						scrollarea = {
							size = { 100% 100% }
							scrollbarpolicy_horizontal = always_off
							using = VerticalScrollAreaCutOff
							scrollbar_vertical = {
								using = VerticalScrollBar
							}
						
							scrollwidget = {
								fixedgridbox = {
									name = "relations_grid"
									datamodel = "[DiplomaticView.GetCountries]"
									addcolumn = 312
									addrow = 38
								
									item = {
										widget = {
											size = { 328 36 }
											list_button = {
												parentanchor = vcenter
												size = { 240 100% }
												onclick = "[CountryDiplomaticItem.OnSelect]"
												down = "[EqualTo_int32( CountryDiplomaticItem.GetCountry.GetId, DiplomaticView.GetTargetCountry.GetId )]"
												onmousehierarchyenter = "[SetHighlightCountry( CountryDiplomaticItem.GetCountry )]"
												onmousehierarchyleave = "[DiplomaticView.ResetHighlight]"
											}
										
											country_flag = {
												datacontext = "[CountryDiplomaticItem.GetCountry]"
												tooltip = "COUNTRY_SHORTHAND_INFO"
												position = { 0 0 }
												parentanchor = vcenter
												blockoverride "flag"
												{
													texture = "[CountryDiplomaticItem.GetCountry.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
													frame = "[CountryDiplomaticItem.GetCountry.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
													framesize = { 56 56 }
												}
												blockoverride "size"
												{
													size = { 34 34 }
												}
											
												blockoverride "click"
												{
													onclick = "[OpenDiplomacy(CountryDiplomaticItem.GetCountry)]"
												}
											
												blockoverride "hover_leave"
												{
													onmousehierarchyleave = "[DiplomaticView.ResetHighlight]"
												}
											
											}
										
											textbox = {
												position = { 40 -2 }
												parentanchor = vcenter
												autoresize = yes
												using = BaseFontM
												using = Black_FontColor
												text = "[CountryDiplomaticItem.GetName]"
											}
											icon = {
												size = { 110 6 }
												position = { 222 -1 }
												texture = "gfx/interface/base_parts/brown_underline_x60bd.dds"
												spriteType = Corneredtiled
												spriteborder = { 30 0 }
											}						

											textbox = {
												position = { 240 -2 }
												minimumsize = { 50 28 }
												parentanchor = vcenter
												align = center
												using = BaseFontM
												text = "[CountryDiplomaticItem.GetValue|+=]" 
												tooltip = "[CountryDiplomaticItem.GetTooltip]"
											}
										
											icon = {
												parentanchor = right|vcenter
												framesize = { 54 54 }
												size = { 36 36 }
												position = { 0 -1 }
												texture = "gfx/interface/diplomacy/country_rank.dds"
												frame = "[CountryDiplomaticItem.GetCountry.GetRankFrame]"
												tooltip = "[CountryDiplomaticItem.GetCountry.GetRankInformation]"
											}
											icon = {
												size = { 110 6 }
												position = { 222 1 }
												parentanchor = bottom
												texture = "gfx/interface/base_parts/brown_underline_x60bd.dds"
												spriteType = Corneredtiled
												spriteborder = { 30 0 }
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	base_sub_window = {
			layer = top
			visible = "[DiplomaticView.IsShowStances]"
			size = { 420 324 } 
			position = { 640 566 }
			name = "stance_selector"

			blockoverride "Title_text"
			{
				text = SELECT_STANCE
				using = Sub_Header_FontColor
			}
		
			blockoverride "White_buttons"
			{
				button_close = {
					onclick = "[DiplomaticView.HideStances]"
					tooltip = "CLOSE"
				}
			}

			scrollarea = {
				position = { 0 40 }
				parentanchor = hcenter
				size = { 388 274 }

				scrollbarpolicy_horizontal = always_off
							
				scrollbar_vertical = {
					using = VerticalScrollBar
				}
			
				using = VerticalScrollAreaCutOff
			
				scrollwidget = {
					dynamicgridbox = {
						datamodel = "[DiplomaticView.GetStances]"
						item = {

						margin_widget = {
							margin_top = 5
							size = { 388 34 }
							parentanchor = hcenter
							layoutpolicy_horizontal = expanding
						
							flowcontainer = {
								direction = horizontal
								spacing = 8

								icon = {
									parentanchor = vcenter
									size = { 32 32 }
									texture = "[GetDiplomaticStanceIcon(DiplomaticStanceItem.GetStance)]"
								}

								text_button_square = {
									size = { 280 28 }
									parentanchor = vcenter
									datacontext = "[DiplomaticStanceItem.GetStance]"
									blockoverride "Center_text" 
									{
										text = "[DiplomaticStanceItem.GetStance.GetName]"
									}
									blockoverride "On_click" 
									{
										onclick = "[DiplomaticStanceItem.OnClick]"
									}

									tooltip = "[DiplomaticStanceItem.GetClickTooltip]"
									enabled = "[DiplomaticStanceItem.CanClick]"
								}

							
								textbox = { 
									size = { 70 36 }
									autoresize = yes
									parentanchor = vcenter
									text = "[Player.GetPrice('change_diplomatic_stance')]"
									using = BaseFontS
									using = Negative_FontColor
								}
							}
						}
					}
				}
			} 
		}
	}
}

template diplomatic_actions_v2
{
	vbox = {
		name = "actions_grid"
		datamodel = "[DiplomaticActionCategory.GetActions]"
		spacing = 4
		margin_top = 4
		margin_bottom = 4
		alpha = 1
		layoutpolicy_horizontal = expanding	
		item = {
			margin_widget = {
				name = "child_actions_category"
				size = { 0 28 }
				layoutpolicy_horizontal = expanding
				margin_right = 6
				margin_left = 6

				diplomacy_action_button = { 
					size = { 100% 100% }
					parentanchor = hcenter
					visible = "[Or( DiplomaticActionItem.RequireAcceptance, DiplomaticActionItem.HasPrice )]"
					layoutpolicy_horizontal = expanding
					blockoverride "On_click" { onclick = "[DiplomaticActionItem.OnClick]" }
					blockoverride "Button_text" 
					{ 
						text = "[DiplomaticActionItem.GetTitle]"
					}

					blockoverride "Left_text"
					{
						margin_left = 28
						text = "[DiplomaticActionItem.GetTitle]"
					}
					
					blockoverride "Right_text"
					{
						text = "[DiplomaticActionItem.GetPrice]"
						using = Negative_FontColor 
						tooltip = "[DiplomaticActionItem.GetPriceInfo]"
						visible = "[DiplomaticActionItem.HasPrice]"
					}	
					
					blockoverride "Icon" 
					{
						framesize = { 46 46 }
						visible = "[DiplomaticActionItem.RequireAcceptance]"
						texture = "gfx/interface/diplomacy/ai_accept_decline_icon.dds"
						frame = "[DiplomaticActionItem.GetAcceptanceFrame]"
						tooltip = "[DiplomaticActionItem.GetAcceptanceTooltip]"
					}	
					
					enabled = "[DiplomaticActionItem.IsEnabled]"
					tooltip = "[DiplomaticActionItem.GetTooltip]"
				}
				text_button_square = {
					size = { 100% 100% }
					visible = "[Not( Or( DiplomaticActionItem.RequireAcceptance, DiplomaticActionItem.HasPrice) )]"
					parentanchor = hcenter
					layoutpolicy_horizontal = expanding
					blockoverride "On_click" { onclick = "[DiplomaticActionItem.OnClick]" }
					blockoverride "Center_text" 
					{ 
						text = "[DiplomaticActionItem.GetTitle]"
					}
					
					enabled = "[DiplomaticActionItem.IsEnabled]"
					tooltip = "[DiplomaticActionItem.GetTooltip]"
				}
			}
		}
	}
}

template testy 
{
	widget = {}
}

template "button_invalid_dummy"
{
	button = {
		tooltip = "SLOT_NOT_UNLOCKED"
		visible = yes
		enabled = no
		block "Size" { size = { 50 50 } }
		position = { 0 0 }
		gfxtype = framedbuttongfx
		widgetanchor = center
		parentanchor = center	
		framesize = { 200 200 }
		using = button_tiled_texture
		upframe = 4
		overframe = 4
		downframe = 4
		disableframe = 4
		modify_texture = {
			name = "Alpha"
			texture = "gfx/interface/base_parts/button2_inner_x8y8bd_alpha.dds"
			blend_mode = alphamultiply
			spriteType = Corneredtiled
			spriteborder = { 6 6 }
		}
		
		icon = {
			name = "Pattern"
			texture = "gfx/interface/base_parts/square_button_corner_pattern_x22y22bd.dds"
			spriteType = Corneredtiled
			spriteborder = { 11 11 }
			size = { 100% 100% }
			tooltip = ""
		}
	}
}

template "idea_slot_not_available"
{
	icon = {
		tooltip = "SLOT_NOT_UNLOCKED"
		block "Size" { size = { 50 50 } }
		parentanchor = center	
		using = beige_background
		alpha = 1
		modify_texture = {
			name = "Alpha"
			texture = "gfx/interface/base_parts/button2_inner_x8y8bd_alpha.dds"
			blend_mode = alphamultiply
			spriteType = Corneredtiled
			spriteborder = { 6 6 }
		}
		
		icon = {
			size = { 100% 100% }
			parentanchor = center
			using = flat_background_white
			modify_texture = {
				name = "Pattern"
				texture = "gfx/interface/base_parts/square_button_corner_pattern_x22y22bd.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 11 11 }
			}
		}

		icon = {
			name = "Idea Mark"
			parentanchor = center
			using = flat_background_white	
			size = { 70% 70% }
			alpha = 0.75
			modify_texture = {
				name = "Pattern"
				texture = "gfx/interface/base_parts/idea_mark.dds"
				blend_mode = alphamultiply
			}
		}
	}
}