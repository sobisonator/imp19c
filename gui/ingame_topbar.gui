@SideBarButtonSize = 36

@PauseVignetteAnimationSpeed = 0.15
@PauseVignetteAlpha = 0.5

@cred = 0.24
@cblue = 0.012
@cgreen = 0.05
@calpha = 0.8



types IngameTopbar
{
	type topbar_tab_button = container {
		
		button = {
			name = "button"
			position = { 0 0 }
			gfxtype = updownframedbuttongfx
			effectname = "NoHighlight"
			upframe = 1
			downframe = 2
			overframe = 3
			framesize = { 32 32 }
			parentanchor = top|left
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		
		# Set these:
		# texture
		# onclick
		# shortcut
		# down
		# tooltip
		
		}
		
		widget = {
			state = {
				name = _show
				start_sound = {soundeffect = "event:/SFX/Ambience/2DMapEmitters/Nature/sfx_amb_base_wind"}
			}
		}
	}
	type graphic_settings_button = widget {
		size = { 28 28 }
		
		background = {
			name = "Shadow"
			texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
			shaderfile = "gfx/FX/pdxgui_default.shader"
			spriteType = corneredtiled
			spriteborder = { 8 8 }
			margin_left = 4
			margin_bottom = 4
			alpha = 0.5
			
			block "Drop_shadow" 
			{
				# If this is not a button/unclickable, set this visible to no.
				visible = yes
			}
		}
		
		background = {
			name = "Base"
			shaderfile = "gfx/FX/pdxgui_default.shader"
			using = flat_background_white
			spriteType = Corneredtiled
		}
		
		button = {
			using = button_tiled_texture
			spriteType = Corneredtiled
			spriteborder = { 200 200 }
			gfxtype = framedbuttongfx
			size = { 100% 100% }
			framesize = { 200 200 }
			upframe = 1
			overframe = 2
			downframe = 3
			disableframe = 4
			
			# ToDo: Add Sound.//?
			#clicksound = " ToDo "
			# oversound = " ToDo "
			
			modify_texture = {
				name = "Alpha"
				texture = "gfx/interface/base_parts/button2_outer_x8y8bd_alpha.dds"
				blend_mode = alphamultiply
				spriteType = corneredtiled
				spriteborder = { 6 6 }
			}
			
			modify_texture = {
				name = "Decay"
				texture = "gfx/interface/base_parts/demanded_rot.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
			}
			
			button = {
				size = { 26 26 }
				using = button_tiled_texture
				spriteType = corneredtiled
				gfxtype = framedbuttongfx
				widgetanchor = center
				parentanchor = center
				
				framesize = { 200 200 }
				upframe = 1
				overframe = 2
				downframe = 3
				disableframe = 4   
				
				block "On_click" { }
				
				#clicksound ledger?
				clicksound = "event:/SFX/UI/Generic/2.0/sfx_ui_button_secondary"

				modify_texture = {
					name = "Alpha"
					texture = "gfx/icons/button_alpha_setting.dds"
					blend_mode = alphamultiply                  
				}
				
				using = ButtonBorderTear
				
			}
		}
	}
}



types Mapmodestuff
{
	type mapmodebutton = button {
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		gfxtype = togglepushbuttongfx
		effectname = "NoHighlight"
		
		upframe = 1
		uphoverframe = 2
		uppressedframe = 3
		downframe = 4
		downhoverframe = 5
		downpressedframe = 6
		
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		
		block "visibility"
		{
			visible = "[CanChangeMapMode]"
			enabled = "[CanChangeMapMode]"
		}
	}
}

template minimap_view
{
	### MAP ACTIONS ROW 1
	container = {
		name = "minimap_view_1"
		container = {
			name = "actual_map"
			
			mini_map = {
				position = { -11 -8 }
				name = "mini_map"
				parentanchor = bottom|right
				widgetanchor = bottom|right
				texture = "gfx/interface/minimap/minimap.dds"
				size = { 359 175 }
			}
			container = {
				position = { 0 -50 }
					
				icon = {
					texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
					spriteType = Corneredtiled
					shaderfile = "gfx/FX/pdxgui_default.shader"
					size = { 100% 54 }
					spriteborder = { 10 20 }
					position = { 1 -42 }
				}
				
				icon = {
					texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
					spriteType = Corneredtiled
					shaderfile = "gfx/FX/pdxgui_default.shader"
					size = { 100% 54 }
					spriteborder = { 10 20 }
					position = { 1 0 }
				}
				
				#icon = {
				#	texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
				#	spriteType = Corneredtiled
				#	shaderfile = "gfx/FX/pdxgui_default.shader"
				#	size = { 100% 42 }
				#	spriteborder = { 10 20 }
				#	position = { 1 10 }
				#}
			}
		}
	}
}

template toolbar
{
	### MAP ACTIONS ROW 1
	
	@mmi_width = 37
	@mmi_height = 31
	
	flowcontainer = {
		name = "Mapmode_empty_slots"
		direction = horizontal
		position = { 0 2 }
		spacing = 3
		
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
	}
	
	
	
	
	flowcontainer = {
		name = "mapactions_row_1"
		position = { 0 2 }
		spacing = 3
		
		dragdroptarget = {
			using = droptarget
			dragdropargs = "0"
			button = {
				name = "quick_action_1"
				shortcut = map_mode_1
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('0')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('0')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('0')]"
				using = tooltip_ws_mm
				onrightclick = "[GetQuickAccessBar.DropSlot('0')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('0')]"
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "1"
			button = {
				name = "quick_action_2"
				shortcut = map_mode_2
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('1')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('1')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('1')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('1')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('1')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "2"
			button = {
				name = "quick_action_3"
				shortcut = map_mode_3
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('2')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('2')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('2')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('2')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('2')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "3"
			button = {
				name = "quick_action_4"
				shortcut = map_mode_4
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('3')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('3')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('3')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('3')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('3')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "4"
			button = {
				name = "quick_action_5"
				shortcut = map_mode_5
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('4')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('4')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('4')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('4')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('4')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "5"
			button = {
				name = "quick_action_6"
				shortcut = map_mode_6
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('5')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('5')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('5')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('5')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('5')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "6"
			button = {
				name = "quick_action_7"
				shortcut = map_mode_7
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('6')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('6')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('6')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('6')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('6')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "7"
			button = {
				name = "quick_action_8"
				shortcut = map_mode_8
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('7')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('7')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('7')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('7')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('7')]"
				using = tooltip_ws_mm
			}
		}
		
		dragdroptarget = {
			using = droptarget
			dragdropargs = "8"
			button = {
				name = "quick_action_9"
				shortcut = map_mode_9
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('8')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('8')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('8')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('8')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('8')]"
				using = tooltip_ws_mm
				tooltip_offset = { 0 10 }
			}
		}
	}

}

template toolbar2
{
	### MAP ACTIONS ROW 2
	
	
	
	flowcontainer = {
		name = "Mapmode_empty_slots2"
		direction = horizontal
		position = { 0 2 }
		spacing = 3
		
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
	}
	
	
	
	
	flowcontainer = {
		name = "mapactions_row_2"
		position = { 0 2 }
		spacing = 3
		
		dragdroptarget = {
			using = droptarget
			dragdropargs = "11"
			button = {
				name = "quick_action_12"
				shortcut = map_mode_12
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('11')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('11')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('11')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('11')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('11')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "12"
			button = {
				name = "quick_action_13"
				shortcut = map_mode_13
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('12')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('12')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('12')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('12')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('12')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "13"
			button = {
				name = "quick_action_14"
				shortcut = map_mode_14
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('13')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('13')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('13')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('13')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('13')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "14"
			button = {
				name = "quick_action_15"
				shortcut = map_mode_15
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('14')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('14')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('14')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('14')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('14')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "15"
			button = {
				name = "quick_action_16"
				shortcut = map_mode_16
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('15')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('15')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('15')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('15')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('15')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "16"
			button = {
				name = "quick_action_17"
				shortcut = map_mode_17
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('16')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('16')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('16')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('16')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('16')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "17"
			button = {
				name = "quick_action_18"
				shortcut = map_mode_18
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('17')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('17')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('17')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('17')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('17')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "18"
			button = {
				name = "quick_action_19"
				shortcut = map_mode_19
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('18')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('18')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('18')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('18')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('18')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "19"
			button = {
				name = "quick_action_20"
				shortcut = map_mode_20
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('19')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('19')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('19')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('19')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('19')]"
				using = tooltip_ws_mm
			}
		}
	}
}



vbox = {
	name = "ingame_topbar"
	layer = middle
	window = {
		layer = top
		#layoutpolicy_horizontal = Expanding
		layoutpolicy_vertical = Expanding
		#layoutstretchfactor_vertical = 20
		alwaystransparent = yes
		allow_outside = yes
		
		window = {
			name = "pause visuals"
			size = { 100% 100% }
			alwaystransparent = yes
			layer = pause_vignette
			icon = { 
				texture = "gfx/interface/base_parts/pause_vignette.dds"
				alwaystransparent = yes
				visible = "[IsGamePaused]"
				size = { 100% 100% }
				layer = pause_vignette
				alpha = 0.5
				state = { 
					name = _show
					
					on_start = "[PdxGuiWidget.TriggerAnimation('pausedown')]"
				}
				
				state = {
					name = pausedown
					
					animation = {
						alpha = @PauseVignetteAlpha
					}
					
					duration = @PauseVignetteAnimationSpeed
					next = pauseback
				}
				
				state = {
					name = _hide
					
					animation = {
						alpha = 0
					}
					
					duration = @PauseVignetteAnimationSpeed
				}
			
			}
			
			flowcontainer = {
				name = "pause text"
				parentanchor = hcenter|top
				position = { 0 66 }
				visible = "[IsGamePaused]"
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					alpha = 0.55
					spriteType = Corneredtiled
					spriteborder = { 40 0 }
					texture = "gfx/interface/base_parts/pause_banner.dds"		
				}
				
				widget = {
					size = { 56 30 }
				}
				
				textbox = {
					autoresize = yes
					using = HeaderFont
					using = White_FontColor
					text = "Game_Paused"
					align = top
					parentanchor = bottom
				}
				
				widget = {
					size = { 54 30 }
				}	
			}
		}
		
		# GUI REWORK
		icon = {
			name = "SideBar"
			position = { -10 160 }
			size = { 70 600 }
			using = flat_background_black 
			
			spriteType = Corneredtiled
			alwaystransparent = no
			modify_texture = {
				name = "Alpha"
				blend_mode = alphamultiply
				texture = "gfx/interface/base_parts/side_bar_alpha_y200bd.dds"
				spriteType = Corneredtiled
				spriteborder = { 0 148 }
			}
			
			icon = {
				name = "Top Gradient"
				size = { 70 140 }
				texture = "gfx/interface/base_parts/gradient_black.dds"
				spriteType = corneredstretched
				spriteborder = { 0 6 }
				position = { 0 -20 }
				
				modify_texture = {
					name = "Alpha"
					blend_mode = alphamultiply
					texture = "gfx/interface/base_parts/side_bar_alpha_y200bd.dds"
					spriteType = Corneredtiled
					#spriteborder = { 0 148 }
				}
			}
			
			icon = {
				name = "Bottom Color"
				size = { 70 300 }
				using = flat_background_black
				spriteType = corneredstretched
				spriteborder = { 0 6 }
				color = { 0 0 0 0.2 }
				
				widgetanchor = bottom|hcenter
				parentanchor = bottom|hcenter
				
				modify_texture = {
					name = "Alpha1"
					blend_mode = alphamultiply
					texture = "gfx/interface/base_parts/side_bar_bottom_decore_y300bd.dds"
					spriteType = Corneredtiled
					spriteborder = { 0 150 }
				}	
				
				modify_texture = {
					name = "Alpha2"
					blend_mode = alphamultiply
					texture = "gfx/interface/base_parts/side_bar_alpha_y200bd.dds"
					spriteType = Corneredtiled
					spriteborder = { 0 150 }
				}
			}
			icon = {
				using = flat_background
				color = { 0 0 0 0.2 }
				position = { 1 -24 }
				alpha = 1
				size = { 68 192 }
				modify_texture = {
					name = "Alpha2"
					blend_mode = alphamultiply
					texture = "gfx/interface/base_parts/side_bar_alpha_macro.dds"
					spriteType = Corneredtiled
					spriteborder = { 0 10 }
				}
			}
			icon = {
				using = flat_background_white
				position = { 2 -44 }
				alpha = 1
				size = { 68 192 }
				modify_texture = {
					name = "Alpha2"
					blend_mode = alphamultiply
					texture = "gfx/interface/base_parts/side_bar_alpha_macro.dds"
					spriteType = Corneredtiled
					spriteborder = { 0 10 }
				}
			}
			widget = {
				size = { 70 @SideBarButtonSize }
				position = { 0 39 }
				TopBarWindowButton = {
					name = "sdfsfs"
					position = { 4 0 }
					blockoverride "ButtonColor" 
					{ 
						texture = "gfx/interface/base_parts/white_button_color_200fs.dds"
						alpha = 1
					}
					blockoverride "Details"
					{
						visible = "[Not(IsGameViewOpen('macro_builder'))]"
						onclick = "[InGameTopbar.OpenView('macro_builder')]"
						tooltip = "MACRO_BUILDER_MENU"
						shortcut = macro_builder
					
						# ToDo: Add Sound.
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
					} 
					
					blockoverride "Details_toggled"
					{
						visible = "[IsGameViewOpen('macro_builder')]"
					}
					
					blockoverride "Icon"
					{ 
						texture = "gfx/interface/icons/menu_buttons/macrobuilder.dds"
					}
				}
			}
			
			flowcontainer = {
				name = "Buttons_Container"
				direction = vertical
				spacing = 11
				resizeparent = yes
				#parentanchor = top|hcenter
				
				widget = {
					size = { 70 106 }
				}

				widget = {
					size = { 70 @SideBarButtonSize }
					
					TopBarWindowButton = {
						position = { 2 0 }
						blockoverride "Details"
						{
							visible = "[Not(IsGameViewOpen('overview'))]"
							onclick = "[ToggleGameView('overview')]"
							tooltip = "NATION_OVERVIEW_MENU"
							shortcut = "top_bar_1"
							
							# ToDo: Add Sound.
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						} 
						
						blockoverride "Details_toggled"
						{
							visible = "[IsGameViewOpen('overview')]"
						}
						
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/menu_buttons/menu_overview.dds"
						}
					}
				}

				widget = {
					size = { 70 @SideBarButtonSize }
					
					TopBarWindowButton = {
						position = { 4 0 }
						blockoverride "Details"
						{
							visible = "[Not(IsGameViewOpen('government'))]"
							onclick = "[ToggleGameView('government')]"
							tooltip = "GOVERNMENT_MENU"
							shortcut = "top_bar_2"
						
							# ToDo: Add Sound.
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						} 
						
						blockoverride "Details_toggled"
						{
							visible = "[IsGameViewOpen('government')]"
						}
						
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/menu_buttons/menu_government.dds"
						}
					}
				}

				widget = {
					size = { 70 @SideBarButtonSize }
					
					TopBarWindowButton = {
						position = { 4 0 }
						blockoverride "Details"
						{
							visible = "[Not(IsGameViewOpen('economy'))]"
							onclick = "[ToggleGameView('economy')]"
							tooltip = "ECONOMY_MENU"
							shortcut = "top_bar_3"
						
							# ToDo: Add Sound.
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						} 
						
						blockoverride "Details_toggled"
						{
							visible = "[IsGameViewOpen('economy')]"
						}
						
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/menu_buttons/menu_economy.dds"
						}
					}
				}

				icon = {
					#position = { 4 0 }
					size = { 43 2 }
					texture = "gfx/interface/base_parts/macro_divider.dds"
					parentanchor = hcenter
				}

				widget = {
					size = { 70 @SideBarButtonSize }
					
					TopBarWindowButton = {
						position = { 4 0 }
						blockoverride "Details"
						{
							visible = "[Not(IsGameViewOpen('religion'))]"
							onclick = "[ToggleGameView('religion')]"
							tooltip = "RELIGION_MENU"
							shortcut = "top_bar_4"
							
							# ToDo: Add Sound.
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						} 
						
						blockoverride "Details_toggled"
						{
							visible = "[IsGameViewOpen('religion')]"
						}
						
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/menu_buttons/menu_religion.dds"
						}
					}
				}
				
				widget = {
					size = { 70 @SideBarButtonSize }
					
					TopBarWindowButton = {
						position = { 4 0 }
						blockoverride "Details"
						{
							visible = "[Not(IsGameViewOpen('culture'))]"
							onclick = "[ToggleGameView('culture')]"
							tooltip = "CULTURE_MENU"
							shortcut = "top_bar_5"
							
							# ToDo: Add Sound.
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						} 
						
						blockoverride "Details_toggled"
						{
							visible = "[IsGameViewOpen('culture')]"
						}
						
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/menu_buttons/menu_culture.dds"
						}
					}
				}
				
				widget = {
					size = { 70 @SideBarButtonSize }
					
					TopBarWindowButton = {
						position = { 4 0 }
						blockoverride "Details"
						{
							visible = "[Not(IsGameViewOpen('trade'))]"
							onclick = "[ToggleGameView('trade')]"
							tooltip = "TRADE_MENU"
							shortcut = "top_bar_6"
							
							# ToDo: Add Sound.
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						} 
						
						blockoverride "Details_toggled"
						{
							visible = "[IsGameViewOpen('trade')]"
						}
						
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/menu_buttons/menu_trade.dds"
						}
					}
				}

				widget = {
					size = { 70 @SideBarButtonSize }
					
					TopBarWindowButton = {
						position = { 4 0 }
						blockoverride "Details"
						{
							visible = "[Not(IsGameViewOpen('military'))]"
							onclick = "[ToggleGameView('military')]"
							tooltip = "MILITARY_MENU"
							shortcut = "top_bar_7"
						
							# ToDo: Add Sound.
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						} 
						
						blockoverride "Details_toggled"
						{
							visible = "[IsGameViewOpen('military')]"
						}
						
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/menu_buttons/menu_military.dds"
						}
					}
				}

				widget = {
					size = { 70 @SideBarButtonSize }
					
					TopBarWindowButton = {
						position = { 4 0 }
						blockoverride "Details"
						{
							visible = "[Not(IsGameViewOpen('mercenary'))]"
							onclick = "[ToggleGameView('mercenary')]"
							tooltip = "MERCENARY_MENU"
							shortcut = "top_bar_8"
							
							# ToDo: Add Sound.
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						} 
						
						blockoverride "Details_toggled"
						{
							visible = "[IsGameViewOpen('mercenary')]"
						}
						
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/menu_buttons/menu_mercenary.dds"
						}
					}
				}

				icon = {
					size = { 43 2 }
					texture = "gfx/interface/base_parts/macro_divider.dds"
					parentanchor = hcenter
				}

				widget = {
					size = { 70 @SideBarButtonSize }
					
					TopBarWindowButton = {
						position = { 4 0 }
						blockoverride "Details"
						{
							visible = "[Not(IsGameViewOpen('diplomacy'))]"
							onclick = "[ToggleGameView('diplomacy')]"
							tooltip = "DIPLOMACY_MENU"
							shortcut = "top_bar_9"
							
							# ToDo: Add Sound.
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						} 
						
						blockoverride "Details_toggled"
						{
							visible = "[IsGameViewOpen('diplomacy')]"
						}
						
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/menu_buttons/menu_diplomacy.dds"
						}
					}
				}

				widget = {
					size = { 70 @SideBarButtonSize }
					
					TopBarWindowButton = {
						position = { 4 0 }
						blockoverride "Details"
						{
							visible = "[Not(IsGameViewOpen('technology'))]"
							onclick = "[ToggleGameView('technology')]"
							tooltip = "TECHNOLOGY_MENU"
							shortcut = "top_bar_10"
						
							# ToDo: Add Sound.
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						} 
						
						blockoverride "Details_toggled"
						{
							visible = "[IsGameViewOpen('technology')]"
						}
						
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/menu_buttons/menu_technology.dds"
						}
					}
				}

				widget = {
					size = { 70 @SideBarButtonSize }
					
					TopBarWindowButton = {
						position = { 4 0 }
						blockoverride "Details"
						{
							visible = "[Not(IsGameViewOpen('characters'))]"
							onclick = "[ToggleGameView('characters')]"
							tooltip = "CHARACTERS_MENU"
							shortcut = "top_bar_11"
							
							# ToDo: Add Sound.
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						} 
						
						blockoverride "Details_toggled"
						{
							visible = "[IsGameViewOpen('characters')]"
						}
						
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/menu_buttons/menu_character.dds"
						}
					}
				}

				widget = {
					size = { 70 @SideBarButtonSize }
					
					TopBarWindowButton = {
						position = { 4 2 }
						
						
						
						blockoverride "Details"
						{
							visible = "[Not(IsGameViewOpen('mission'))]"
							onclick = "[ToggleGameView('mission')]"
							tooltip = "[SelectLocalization( InGameTopbar.IsTutorialActive, 'TUTORIAL_MISSION_MENU', 'MISSION_MENU' )]"
							shortcut = "top_bar_12"
							enabled = "[Not( InGameTopbar.IsTutorialActive )]"
							# ToDo: Add Sound.
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						} 
						
						blockoverride "Details_toggled"
						{
							visible = "[IsGameViewOpen('mission')]"
						}
						
						blockoverride "Icon"
						{
							texture = "gfx/interface/icons/menu_buttons/menu_mission.dds"
						}
					}
				}

				widget = {
					size = { 70 120 }
				}
			}
		}
		
		# GUI REWORK
		
		icon = {
			name = "TopBarLeft"
			position = { 0 -2 }
			size = { 800 46 }
			using = flat_background_white
			spriteType = Corneredtiled
			alpha = 0.95
			alwaystransparent = no
			
			modify_texture = {
				name = "Alpha"
				texture = "gfx/interface/base_parts/top_bar_alpha_x120bd.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 60 0 }
			}

			flowcontainer = {
				spacing = 4
				resizeparent = yes
				ignoreinvisible = yes
				
				widget = {
					name = "Spacing_widget_behind_flag"
					size= { 140 46 }
				}
				
				container = {
					name = "Treasury"
					
					icon_and_text_with_change = {
						position = { 0 6 }
						size = { 110 36 }
						tooltip = "[InGameTopbar.GetPlayer.GetTreasuryTooltip]"
						using = tooltip_se
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/treasury.dds"
							
							#icon = {
							#	name = "plus"
							#	position = { -1 3 }
							#	size = { 36 36 }
							#	using = icon_plus
							#	visible = "[InGameTopbar.GetPlayer.HasPositiveBalance]"
							#}
							
							#icon = {
							#	name = "minus"
							#	position = { -1 3 }
							#	size = { 36 36 }
							#	using = icon_minus
							#	visible = "[Not(InGameTopbar.GetPlayer.HasPositiveBalance)]"
							#}
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetTreasury|0]"
						}		
						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetTreasuryChange|2+=]"
						}
					}
				}
				
				container = {
					name = "Manpower"
					
					icon_and_text_with_change = {
						position = { 0 6 }
						size = { 110 36 }
						tooltip = "[InGameTopbar.GetPlayer.GetManpowerTooltip]"
						using = tooltip_se
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/manpower.dds"
							
							#icon = {
							#	name = "plus"
							#	position = { -1 3 }
							#	size = { 36 36 }
							#	using = icon_plus
							#	visible = "[InGameTopbar.GetPlayer.HasPositiveManpower]"
							#}
							#
							#icon = {
							#	name = "minus"
							#	position = { -1 3 }
							#	size = { 36 36 }
							#	using = icon_minus
							#	visible = "[Not(InGameTopbar.GetPlayer.HasPositiveManpower)]"
							#}
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetManpower]"
						}		

						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetManpowerChange]"
						}
						
					}
				}
				widget = {
					size = { 10 46 }
				}
				container = {
					name = "Political_Influence"
					
					icon_and_text_with_change = {
						position = { 0 6 }
						size = { 110 36 }
						tooltip = "[InGameTopbar.GetPlayer.GetPoliticalInfluenceDescription]"
						using = tooltip_se
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead.					
						
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/political_influence.dds"
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetPoliticalInfluence|0]"
						}	
						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetPoliticalInfluenceChange|2+=]"
						}
					}
				}

				container = {
					name = "Military_Experience"
					
					icon_and_text_with_change = {
						position = { 0 6 }
						size = { 110 36 }
						tooltip = "[InGameTopbar.GetPlayer.GetMilitaryExperienceDescription]"
						
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead when relevant.
						using = tooltip_se
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/military_experience.dds"
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetMilitaryExperience|2]"
						}

						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetMilitaryExperienceChange|2+=]"
						}
						
					}
				}

				widget = {
					size = { 10 46 }
				}
				
				container = {
					name = "Stability"
					
					icon_and_text_with_change = {
						position = { 0 6 }
						size = { 110 36 }
						tooltip = "[InGameTopbar.GetPlayer.GetStabilityTooltipPlayer]"
						using = tooltip_se
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead when relevant.
						
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/stability.dds"
							
							icon = {
								name = "plus"
								size = { 36 36 }
								using = icon_plus
								visible = "[GreaterThan_CFixedPoint(InGameTopbar.GetPlayer.GetMonthlyStabilityChange, '(CFixedPoint)0')]"
							}
							
							icon = {
								name = "minus"
								size = { 36 36 }
								using = icon_minus
								visible = "[LessThan_CFixedPoint(InGameTopbar.GetPlayer.GetMonthlyStabilityChange, '(CFixedPoint)0')]"
							}							
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetStability|2]"
						}	

						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetMonthlyStabilityChange|2+=]"
						}
						
					}
				}
				
				container = {
					name = "Aggressive_expansion"
					
					icon_and_text_with_change = {
						position = { 0 6 }
						size = { 110 36 }
						tooltip = "[InGameTopbar.GetPlayer.GetCurrentAgressiveExpansionInfo]"
						using = tooltip_se
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead when relevant.
						
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/aggressive_expansion.dds"
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetCurrentAgressiveExpansion|2]"
						}	

						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetAggressiveExpansionChange|2-=]"
						}
						
					}
				}
				
				container = {
					name = "War_exhaustion"
					icon_and_text_with_change = {
						position = { 0 6 }
						name = "WE Value"
						size = { 110 36 }
						using = tooltip_se
						tooltip = "[InGameTopbar.GetPlayer.GetWarExhaustionTooltipPlayer]"
						blockoverride "Text" { text = "[InGameTopbar.GetPlayer.GetWarExhaustion|2]" }
						blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/war_exhaustion.dds" }
						parentanchor = vcenter
						
						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetWarExhaustionChange|2-=]"
						}
						
					}
				}
				
				container = {
					name = "Tyranny"
					
					icon_and_text_with_change = {
						position = { 0 6 }
						size = { 110 36 }
						tooltip = "[InGameTopbar.GetPlayer.GetTyrannyTooltip]"
						using = tooltip_se
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead when relevant.
						
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/tyranny.dds"
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetTyranny|2]"
						}	

						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetTyrannyChange|2-=]"
						}
						
					}
				}	

				container = {
					name = "Senate_Approval"
					tooltip = "[InGameTopbar.GetPlayer.GetSenateApprovalTooltip]"
					visible = "[InGameTopbar.GetPlayer.GetGovernment.IsRepublic]"
					using = tooltip_se
					icon_and_text = { 
						visible = "[GreaterThanOrEqualTo_CFixedPoint( InGameTopbar.GetPlayer.GetSenateApproval, '(CFixedPoint)50' )]"
						size = { 110 0 }
						position = { 0 8 }
						blockoverride "Icon" 
						{ 
							texture = "gfx/interface/diplomacy/icon_senate_approval.dds" 
							framesize = { 42 42 }
							frame = 1
						}
						blockoverride "Text" 
						{
							text = "[InGameTopbar.GetPlayer.GetSenateApproval|2]" 
						}
					}
					
					icon_and_text = { 
						visible = "[LessThan_CFixedPoint( InGameTopbar.GetPlayer.GetSenateApproval, '(CFixedPoint)50' )]"
						size = { 110 0 }
						position = { 0 8 }
						blockoverride "Icon" 
						{ 
							texture = "gfx/interface/diplomacy/icon_senate_approval.dds" 
							framesize = { 42 42 }
							frame = 2
						}
						blockoverride "Text" 
						{
							text = "[InGameTopbar.GetPlayer.GetSenateApproval|2]" 
						}
					}
				}
				
				container = {
					name = "Legitimacy"
					visible = "[InGameTopbar.GetPlayer.GetGovernment.IsMonarchy]"
					
					icon_and_text = {
						position = { 0 8 }
						size = { 110 36 }
						tooltip = "[InGameTopbar.GetPlayer.GetLegitimacyTooltip]"
						using = tooltip_se
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead when relevant.
						
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/legitimacy.dds"
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetLegitimacy|2]"
						}
					}
				}
				
				container = {
					name = "Centralization"
					visible = "[InGameTopbar.GetPlayer.GetGovernment.IsTribal]"
					
					icon_and_text = {
						position = { 0 8 }
						size = { 110 36 }
						tooltip = "[InGameTopbar.GetPlayer.GetCentralizationTooltip]"
						using = tooltip_se
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead when relevant.
						
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/centralization.dds"
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetCentralization|2]%"
						}
					}
				}
				
				overlappingitembox = {
					size = { 180 42 }
					parentanchor = vcenter
					
					visible = "[Not(IsDataModelEmpty( InGameTopbar.GetPlayer.MakeScope.GetList('captured_eagles') ))]" 
					
					datamodel = "[InGameTopbar.GetPlayer.MakeScope.GetList('captured_eagles')]"
					
					item = {
						button = {
							texture = "gfx/interface/icons/shared_icons/roman_eagle.dds"
							size = { 40 40 }
							datacontext = "[Scope.Province]"
							parentanchor = top|left
							tooltip = "eagle_capture_banner_tooltip"
							using = tooltip_se
							onclick = "[OnClickOnProvince( Scope.Province )]" 
						}
					}
				}				
				
				widget = { 
					name = "Spacing_widget_right"
					size = { 60 46 }
				}
			}
		}
		
		icon = {
			texture = "gfx/interface/topbar/flag_shadow.dds"
			position = { -4 -5}
			#tooltip = "[InGameTopbar.GetFlagDesc]"
		}
		
		button = {
            name = "Nation Flag"
            size = { 150 244 }
            entity_instance = "[InGameTopbar.GetFlagEntity]"
            #color = "[InGameTopbar.AccessCoatOfArms.GetColor('(int32)1')]"
            #texture = "[InGameTopbar.AccessCoatOfArms.GetTexture('(int32)155','(int32)355')]"
            frame = "[InGameTopbar.AccessCoatOfArms.GetFrame('(int32)155','(int32)355')]"
            framesize = { 155 355 }
            position = { -14 -118 }
            onrightclick = "[ExecuteConsoleCommand('shader_debug FLAG_WAVES_DISABLED')]"
            onclick = "[ToggleGameView('overview')]"
            #tooltip = "NATION_OVERVIEW_MENU"
            tooltip = "[InGameTopbar.GetFlagDesc]"
            
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
            oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
            #gfxtype = buttongfx

            banner_widget = {
                size = { 155 355 }
                entity_instance = "[InGameTopbar.GetFlagEntity]"
                color = "[InGameTopbar.AccessCoatOfArms.GetColor('(int32)1')]"
                texture = "[InGameTopbar.AccessCoatOfArms.GetTexture('(int32)155','(int32)355')]"
                frame = "[InGameTopbar.AccessCoatOfArms.GetFrame('(int32)155','(int32)355')]"
                framesize = { 155 355 }
                realtime = yes
            }
        }
		
		#widget = {
		#	position = { 56 132 }
		#	size = { 60 68 }
		#	tooltip = "MACRO_BUILDER_MENU"
		#	shortcut = macro_builder
		#}

		base_window = {
			position = { 1 1 }
			name = "minimap_and_buttons"
			parentanchor = bottom|right
			widgetanchor = bottom|right
			size = { 374 288 }
			movable = no
			
			secondary_header = {
				size = { 100% 0 }
				position = { 0 1 }
				
				blockoverride "Title_text" { text = "MAPMODES_HEADER" }
			}
			state = {
				name = hide_minimap_anim
				
				animation = {
					position = { 1 184 }
					bezier = { 0.1 0.25 0.4 1 }
				}
				
				duration = 0.2
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_queued_events_close"
				}
			}
			
			state = {
				name = show_minimap_anim
				
				animation = {
					position = { 1 1 }
					bezier = { 0.1 0.25 0.4 1 }
				}
				
				duration = 0.2 
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_queued_events_open"
				}
			}
			
			container = {
				name = "minimap_view"
				position = { 3 0 }
				parentanchor = bottom|right
				widgetanchor = bottom|right
				using = minimap_view
			}
			container = {
				position = { 8 34 }
				container = {
					name = "toolbar"
					position = { 0 0 }
					#parentanchor = bottom|right
					#widgetanchor = bottom|right
					using = toolbar
				}
				
				container = {
					name = "toolbar2"
					position = { 0 33 }
					#parentanchor = bottom|right
					#widgetanchor = bottom|right
					using = toolbar2
				}
			}
			
			
			
			icon = {
				name = "Stanley"
				texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
				spriteType = Corneredtiled
				shaderfile = "gfx/FX/pdxgui_default.shader"
				size = { 420 23 }
				spriteborder = { 10 20 }
				position = { 6 -145 }
				parentanchor = bottom|right
				widgetanchor = bottom|right
				visible = no
				
				state = {
					name = embiggen_stanley
					
					animation = { 
						position = { 6 -175 } 
					}
					
					duration = 0
					
					on_start = "[PdxGuiWidget.Show]"
					
				} 
				
				state = {
					name = ensmallen_stanley 
					
					animation = { 
						position = { 6 -115 }
					}
					
					duration = 0
					
					on_finish = "[PdxGuiWidget.Hide]"
					
				}
			}

			flowcontainer = {
				position = { -8 4 } 
				parentanchor = right
				white_button_round = {
					size = { 26 26 }
					name = "find_province"
					blockoverride "Icon" { texture = "gfx/interface/base_parts/find.dds" }
					blockoverride "On_click" 
					{
						shortcut = "find_province"
						onclick = "[OnFindProvince]"
					}
					tooltip = "MAPACTION_FIND_PROVINCE"
				}
				white_button_round = {
					name = "go_to_capital"
					size = { 26 26 }
					blockoverride "Icon" { texture = "gfx/interface/base_parts/home.dds" }
					blockoverride "On_click"
					{ 
						onclick = "[GoToCapital]"
						shortcut = "go_to_capital"
					}
					tooltip = "MAPACTION_GO_TO_CAPITAL"
				}
				white_button_round = {
					name = "select map modes"
					blockoverride "Icon" { texture = "gfx/interface/base_parts/settings.dds" }
					size = { 26 26 }
					blockoverride "On_click" { onclick = "[OnSelectMapModes]" }
					tooltip = "CONFIGURE_MAP_MODES"
				}
				flowcontainer = {
					ignoreinvisible = yes
					white_button_round = {
						name = "hideminimap"
						size = { 26 26 }
						blockoverride "Icon" { texture = "gfx/interface/base_parts/down_arrow.dds" }
						blockoverride "On_click"
						{
							onclick = "[PdxGuiTriggerAllAnimations('hide_minimap_anim')]"
							onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('showminimap').Show]"
							onclick = "[PdxGuiWidget.AccessParent.AccessParent.Hide]"
							clicksound = "event:/SFX/UI/Generic/2.0/sfx_ui_button_secondary"
						}
					}
					white_button_round = {
						name = "showminimap"
						size = { 26 26 }
						visible = no
						blockoverride "Icon" { texture = "gfx/interface/base_parts/up_arrow.dds" }
						blockoverride "On_click"
						{
							onclick = "[PdxGuiTriggerAllAnimations('show_minimap_anim')]"
							onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('hideminimap').Show]"
							onclick = "[PdxGuiWidget.AccessParent.AccessParent.Hide]"
							clicksound = "event:/SFX/UI/Generic/2.0/sfx_ui_button_secondary"
						} 
					}

				}
			}
		}
		
		### DATE
		container = {
			position = { -370 -2 }
			parentanchor = top|right
			visible = "[InGameTopbar.IsTutorialActive]"
			tooltip = "TUTORIAL_MENU"
			button = {
				size = { 220 46 }
				position = { 0 0 }
				#frame = "[InGameTopbar.GetTutorialFrame]"
				onclick = "[InGameTopbar.OpenView('tutorial_objectives')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
				forcedown = "[IsGameViewOpen('tutorial_objectives')]"
				gfxtype = buttongfx
				using = button_tiled_texture
				framesize = { 200 200 }
				frame = 2
				spriteType = Corneredtiled
				alwaystransparent = no
				
				modify_texture = {
					name = "Alpha"
					texture = "gfx/interface/base_parts/top_bar_alpha_invertedtbd.dds"
					blend_mode = alphamultiply
					spriteType = Corneredtiled
					spriteborder = { 60 0 }
				}
				icon = {
					using = flat_background_white
					size = { 32 32 }
					position = { 52 2 }
					alwaystransparent = yes
					parentanchor = left|vcenter
					modify_texture = {
						name = "shape_tutorial_icon"
						texture =  "gfx/interface/icons/icon_alpha/tutorial.dds" 
						blend_mode = alphamultiply
					}
				}
			}	
		}

		window = {
			name = "date"
			size = { 490 46 }
			parentanchor = top|right
			position = { 0 0 }
			movable = no 
			
			icon = {
				name = "TopBarLeft2"
				position = { 58 -2 }
				size = { 580 46 }
				using = flat_background_white
				spriteType = Corneredtiled
				alpha = 0.95
				alwaystransparent = no
				parentanchor = top|right
				
				modify_texture = {
					name = "Alpha"
					texture = "gfx/interface/base_parts/top_bar_alpha_invertedtbd.dds"
					blend_mode = alphamultiply
					spriteType = Corneredtiled
					spriteborder = { 60 0 }
				}
				
				hbox = {
					margin_left = 64
					margin_right = 68
					layoutpolicy_horizontal = expanding
					spacing = 6
 
					container = {
						name = "score"
						tooltip = "TOPBAR_SCORE_TOOLTIP"
						using = tooltip_se
						icon_and_text = {
							size = { 86 36 }					
							
							blockoverride "Icon" 
							{
								#using = score_button
							}
							
							blockoverride "Text"
							{
								align = center
								text = "[InGameTopbar.GetPlayer.GetScore|0]"
								max_width = 38
								fontsize_min = 14 
							}			
						}

						score_button = { 
							position = { 0 5 }
							blockoverride "On_click"
							{
								onclick = "[InGameTopbar.OpenView('view_score')]"
							}
						}
					}
					graphic_settings_button = {
						enabled = "[Not(GetVariableSystem.Exists('graphic_settings'))]"
						blockoverride "On_click" 
						{ 
							onclick = "[ExecuteConsoleCommand('gui.createwidget gui/settings_window.gui settings')]"
							onclick = "[GetVariableSystem.Toggle('graphic_settings')]"
						}
						tooltip = "#T Graphical Settings#!"
						using = tooltip_se
					}

					ledger_button = {
						blockoverride "On_click" 
						{ 
							onclick = "[InGameTopbar.OpenView('ledger')]"
						}
						tooltip = "LEDGER"
						using = tooltip_se
					}
						
					log_button = {
						blockoverride "On_click"
						{
							onclick = "[ToggleMessageLog]"
						}
						tooltip = "MESSAGE_LOG_TT"
						using = tooltip_se
					}
					
					widget = { 
						name = "speed_control_and_date"
						size = { 200 32 }
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								minimumsize = { 0 26 }
								spacing = 2
								
								button_minus = {
									blockoverride "On_click"
									{
										onclick = "[OnDecreaseGameSpeed]"
										shortcut = "decrease_speed"
									}
									tooltip = "DECREASE_GAME_SPEED"
									using = tooltip_se
									enabled = "[CanChangeGameSpeed]" 
								}
								
								### TODO Art needs unique button
								text_button_square_hollow = {
									name = "hollow"
									layoutpolicy_horizontal = expanding
									blockoverride "MinimumSize" 
									{
										minimumsize = { 140 28 }
										maximumsize = { 140 28 }
									}
									tooltip = "CURRENT_DATE_TOOLTIP"
									using = tooltip_se
									blockoverride "Center_text"
									{
										text = "CURRENT_DATE"
										using = Teal_FontColor
									}
									
									blockoverride "On_click"
									{
										onclick = "[OnPause]"
									} 
									
									visible = "[Not(IsGamePaused)]"
									
								}

								### TODO Art needs unique button

								text_button_square = {
									name = "filled"
									layoutpolicy_horizontal = expanding
									blockoverride "MinimumSize" 
									{
										minimumsize = { 140 28 }
										maximumsize = { 140 28 }
									}
									tooltip = "CURRENT_DATE_TOOLTIP"
									using = tooltip_se
									blockoverride "Center_text"
									{
										text = "CURRENT_DATE"
									}
									
									blockoverride "On_click"
									{
										onclick = "[OnPause]"
									}
									
									visible = "[IsGamePaused]"
									
								}
								
								button_plus = { 
									
									blockoverride "On_click"
									{
										onclick = "[OnIncreaseGameSpeed]"
										shortcut = "increase_speed"
									} 
									tooltip = "INCREASE_GAME_SPEED"
									enabled = "[CanChangeGameSpeed]" 
									using = tooltip_se
								}
							}
						}
					}
					
					ingame_menu_button = {
						name = "ingame_menu_button"
						
						blockoverride "On_click"
						{
							onclick = "[OnPauseMenu]"
							shortcut = "close_window"
						}
						blockoverride "Icon"
						{
							
						}
						
						tooltip = "SHOW_MENU" 
						using = tooltip_se
					}
					
					#hbox = {
					#	layoutpolicy_horizontal = expanding	
					#}
				}

				hbox = {
					position = { 76 16 }
					
					### TODO Art update asset, empty parts should look empty. 
					container = {
						icon_time_indicator = { 
							#position = { 0 0 }
							frame = "[GetCurrentGameSpeed]" 
						} 
					}
				}	
			}
		}
		
		###
		textbox = { #TODO Rework
			position = { 0 400 }
			using = FontHeading1
			parentanchor = top|hcenter
			autoresize = yes
			text = "AUTOSAVE_IN_PROGRESS"
			align = center|nobaseline
			visible = "[IsAutoSaving]"
		}
		
		textbox = { #TODO Rework
			position = { 0 190 }
			using = FontHeading1
			parentanchor = top|hcenter
			autoresize = yes
			text = "SAVE_IN_PROGRESS"
			align = center|nobaseline
			visible = "[IsSaving]"
		}
		
		base_window_black = {
			name = "event_window"
			size = { 278 166 }
			position = { 0 632 }
			parentanchor = right
			movable = no
			allow_outside = yes

			button = { 
				position = { -50 3 }	
				size = { 58 48 }
				
				icon = {
					using = flat_background
					size = { 96 204 }
					scale = 0.66
					position = { 0 -18 }
					
					modify_texture = {
						name = "Alpha"
						texture = "gfx/interface/header_decorations/outliner_ornament_test.dds"
						blend_mode = alphamultiply
					}				
				}
			}	

			secondary_header = {
				size = { 100% 32 }
				position = { 0 3 }
				blockoverride "Title_text" { text = "event_queue_title" }
			}
			
			vbox = {	
				vbox = {
					layoutpolicy_vertical = expanding
					margin_top = 38
					fixedgridbox = {
						size = { 260 200 }
						addcolumn = 260
						addrow = 30
						maxhorizontalslots = 1
						maxverticalslots = 4
						datamodel = "[InGameTopbar.GetMinorEventItems]"
						
						item = {
							outliner_highlight_button = {
								size = { 100% 24 }
								datacontext = "[MinorEventItem]"
								blockoverride "Text" { text = "[MinorEventItem.GetTitle]" }
								blockoverride "On_click" 
								{ 
									onclick = "[MinorEventItem.OnClick]"
									onrightclick = "[MinorEventItem.OnRightClick]"
								}
								blockoverride "UpAlpha" { alpha = 0.4 }
								textbox = {
									parentanchor = right
									using = BaseFontS
									autoresize = yes
									position = { -4 -1 }
									text = "[MinorEventItem.GetDaysRemaining]"
								}
								tooltip = "interface_option_default_minor_event_window_why_is_this_key_so_long"
							}
						}
					}
					vbox = {
						layoutpolicy_vertical = expanding
					}
				}
				
			}
			
			
			button_slide_out = {
				name = "hide_event_queue_button"
				position = { -19 8 }
				alwaystransparent = no
				inherit_visual_state = yes
				onclick = "[PdxGuiTriggerAllAnimations('hide_event_queue')]"
				onclick = "[PdxGuiWidget.Hide]"
				onclick = "[PdxGuiWidget.AccessParent.FindChild('show_event_queue_button').Show]"
				### Audio ###
				state = {
					name = _show
					start_sound = {
						soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_queued_events_open"
					}
				}
			}
			
			button_slide_in = {
				name = "show_event_queue_button" 
				position = { -19 8 }
				visible = no
				alwaystransparent = no
				inherit_visual_state = yes
				onclick = "[PdxGuiTriggerAllAnimations('show_event_queue')]"
				onclick = "[PdxGuiWidget.Hide]"
				onclick = "[PdxGuiWidget.AccessParent.FindChild('hide_event_queue_button').Show]"
				### Audio ###
				state = {
					name = _show
					start_sound = {
						soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_queued_events_close"
					}
				}
			}
			
			state = {
				name = "hide_event_queue"
				
				animation = {
					position = { 270 632 }
				}
				
				duration = 0.15
				
				on_finish = "[PdxGuiWidget.FindChild('event_queue_hide').Hide]"
				on_finish = "[PdxGuiWidget.FindChild('event_queue_show').Show]"
			
			}
			
			state = {
				name = "show_event_queue"
				
				animation = {
					position = { 1 632 }
				}
				
				duration = 0.15
				
				on_finish = "[PdxGuiWidget.FindChild('event_queue_hide').Show]"
				on_finish = "[PdxGuiWidget.FindChild('event_queue_show').Hide]"
			
			}
		}
		### LAGGING PLAYER NOTIFICATION
		widget = {
			#using = ScrollMessageBackground
			using = NoninteractableBGWhite 
			using = clickthrough_blocker
			size = { 274 70 }
			position = { -324 32 }
			layer = top
			parentanchor = top|right
			visible = "[GetPlayerIsLagging]"
			
			textbox = {
				size = { 274 70 }
				using = BaseFontM
				using = Black_FontColor
				#autoresize = yes
				multiline = yes
				resizeparent = yes
				elide = right
				text = "[GetLaggingPlayerString]"
				align = center|nobaseline
				parentanchor = center
			}
		}
	}
}
	

