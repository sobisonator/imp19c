@SideBarButtonSize = 36

@PauseVignetteAnimationSpeed = 0.15
@PauseVignetteAlpha = 0.5

@cred = 0.24
@cblue = 0.012
@cgreen = 0.05
@calpha = 0.8



types IngameTopbar
{
	type topbar_tab_button = container {
		
		button = {
			name = "button"
			position = { 0 0 }
			gfxtype = updownframedbuttongfx
			effectname = "NoHighlight"
			upframe = 1
			downframe = 2
			overframe = 3
			framesize = { 32 32 }
			parentanchor = top|left
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		
		# Set these:
		# texture
		# onclick
		# shortcut
		# down
		# tooltip
		
		}
		
		widget = {
			state = {
				name = _show
				start_sound = {soundeffect = "event:/SFX/Ambience/2DMapEmitters/Nature/sfx_amb_base_wind"}
			}
		}
	}
}



types Mapmodestuff
{
	type mapmodebutton = button {
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		gfxtype = togglepushbuttongfx
		effectname = "NoHighlight"
		
		upframe = 1
		uphoverframe = 2
		uppressedframe = 3
		downframe = 4
		downhoverframe = 5
		downpressedframe = 6
		
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		
		block "visibility"
		{
			visible = "[CanChangeMapMode]"
			enabled = "[CanChangeMapMode]"
		}
	}
}

template minimap_view
{
	### MAP ACTIONS ROW 1
	container = {
		name = "minimap_view_1"
		container = {
			name = "actual_map"
			
			mini_map = {
				position = { -11 -8 }
				name = "mini_map"
				parentanchor = bottom|right
				widgetanchor = bottom|right
				texture = "gfx/interface/minimap/minimap.dds"
				size = { 359 175 }
				modify_texture = {
					name = "Alpha"
					texture = "gfx/interface/base_parts/background_x60bd_alpha_hard.dds"
					blend_mode = alphamultiply
					spriteType = Corneredtiled
					spriteborder = { 60 60 }
				}
			}
			container = {
				position = { 0 -50 }
					
				icon = {
					texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
					spriteType = Corneredtiled
					shaderfile = "gfx/FX/pdxgui_default.shader"
					size = { 100% 54 }
					spriteborder = { 10 20 }
					position = { 1 -42 }
				}
				
				icon = {
					texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
					spriteType = Corneredtiled
					shaderfile = "gfx/FX/pdxgui_default.shader"
					size = { 100% 54 }
					spriteborder = { 10 20 }
					position = { 1 0 }
				}
				
				#icon = {
				#	texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
				#	spriteType = Corneredtiled
				#	shaderfile = "gfx/FX/pdxgui_default.shader"
				#	size = { 100% 42 }
				#	spriteborder = { 10 20 }
				#	position = { 1 10 }
				#}
			}
		}
	}
}

template toolbar
{
	### MAP ACTIONS ROW 1
	
	@mmi_width = 37
	@mmi_height = 31
	
	flowcontainer = {
		name = "Mapmode_empty_slots"
		direction = horizontal
		position = { 0 2 }
		spacing = 3
		
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
	}
	
	
	
	
	flowcontainer = {
		name = "mapactions_row_1"
		position = { 0 2 }
		spacing = 3
		
		dragdroptarget = {
			using = droptarget
			dragdropargs = "0"
			button = {
				name = "quick_action_1"
				shortcut = map_mode_1
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('0')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('0')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('0')]"
				using = tooltip_ws_mm
				onrightclick = "[GetQuickAccessBar.DropSlot('0')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('0')]"
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "1"
			button = {
				name = "quick_action_2"
				shortcut = map_mode_2
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('1')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('1')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('1')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('1')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('1')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "2"
			button = {
				name = "quick_action_3"
				shortcut = map_mode_3
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('2')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('2')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('2')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('2')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('2')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "3"
			button = {
				name = "quick_action_4"
				shortcut = map_mode_4
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('3')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('3')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('3')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('3')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('3')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "4"
			button = {
				name = "quick_action_5"
				shortcut = map_mode_5
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('4')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('4')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('4')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('4')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('4')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "5"
			button = {
				name = "quick_action_6"
				shortcut = map_mode_6
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('5')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('5')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('5')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('5')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('5')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "6"
			button = {
				name = "quick_action_7"
				shortcut = map_mode_7
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('6')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('6')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('6')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('6')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('6')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "7"
			button = {
				name = "quick_action_8"
				shortcut = map_mode_8
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('7')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('7')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('7')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('7')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('7')]"
				using = tooltip_ws_mm
			}
		}
		
		dragdroptarget = {
			using = droptarget
			dragdropargs = "8"
			button = {
				name = "quick_action_9"
				shortcut = map_mode_9
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('8')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('8')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('8')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('8')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('8')]"
				using = tooltip_ws_mm
				tooltip_offset = { 0 10 }
			}
		}
	}

}

template toolbar2
{
	### MAP ACTIONS ROW 2
	
	
	
	flowcontainer = {
		name = "Mapmode_empty_slots2"
		direction = horizontal
		position = { 0 2 }
		spacing = 3
		
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { @mmi_width @mmi_height }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
	}
	
	
	
	
	flowcontainer = {
		name = "mapactions_row_2"
		position = { 0 2 }
		spacing = 3
		
		dragdroptarget = {
			using = droptarget
			dragdropargs = "11"
			button = {
				name = "quick_action_12"
				shortcut = map_mode_12
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('11')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('11')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('11')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('11')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('11')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "12"
			button = {
				name = "quick_action_13"
				shortcut = map_mode_13
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('12')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('12')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('12')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('12')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('12')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "13"
			button = {
				name = "quick_action_14"
				shortcut = map_mode_14
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('13')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('13')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('13')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('13')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('13')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "14"
			button = {
				name = "quick_action_15"
				shortcut = map_mode_15
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('14')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('14')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('14')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('14')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('14')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "15"
			button = {
				name = "quick_action_16"
				shortcut = map_mode_16
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('15')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('15')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('15')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('15')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('15')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "16"
			button = {
				name = "quick_action_17"
				shortcut = map_mode_17
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('16')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('16')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('16')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('16')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('16')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "17"
			button = {
				name = "quick_action_18"
				shortcut = map_mode_18
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('17')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('17')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('17')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('17')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('17')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "18"
			button = {
				name = "quick_action_19"
				shortcut = map_mode_19
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('18')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('18')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('18')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('18')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('18')]"
				using = tooltip_ws_mm
			}
		}
		dragdroptarget = {
			using = droptarget
			dragdropargs = "19"
			button = {
				name = "quick_action_20"
				shortcut = map_mode_20
				using = droptargetbutton
				blockoverride "IconTexture" { texture = "[GetQuickAccessBar.QuickActionIcon('19')]" } 
				onclick = "[GetQuickAccessBar.QuickActionApply('19')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('19')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('19')]"
				enabled = "[GetQuickAccessBar.QuickActionEnabled('19')]"
				using = tooltip_ws_mm
			}
		}
	}
}



vbox = {
	name = "ingame_topbar"
	layer = middle
	window = {
		#layoutpolicy_horizontal = Expanding
		layoutpolicy_vertical = Expanding
		#layoutstretchfactor_vertical = 20
		alwaystransparent = yes
		allow_outside = yes
		window = {
			name = "pause visuals"
			size = { 100% 100% }
			alwaystransparent = yes
			layer = pause_vignette
			icon = { 
				texture = "gfx/interface/base_parts/pause_vignette.dds"
				alwaystransparent = yes
				visible = "[IsGamePaused]"
				size = { 100% 100% }
				layer = pause_vignette
				alpha = 0.5
				state = { 
					name = _show
					
					on_start = "[PdxGuiWidget.TriggerAnimation('pausedown')]"
				}
				
				state = {
					name = pausedown
					
					animation = {
						alpha = @PauseVignetteAlpha
					}
					
					duration = @PauseVignetteAnimationSpeed
					next = pauseback
				}
				
				state = {
					name = _hide
					
					animation = {
						alpha = 0
					}
					
					duration = @PauseVignetteAnimationSpeed
				}
			
			}
			
			flowcontainer = {
				name = "pause text"
				parentanchor = hcenter|top
				position = { 0 130 }
				visible = "[IsGamePaused]"
				background = {
					shaderfile = "gfx/FX/pdxgui_default.shader"
					alpha = 0.55
					spriteType = Corneredtiled
					spriteborder = { 40 0 }
					texture = "gfx/interface/base_parts/top_bar_alpha.dds"		
				}
				
				widget = {
					size = { 60 30 }
				}
				
				textbox = {
					autoresize = yes
					using = HeaderFont
					using = White_FontColor
					text = "Game_Paused"
					align = top
					parentanchor = bottom
				}
				
				widget = {
					size = { 60 30 }
				}	
			}
		}
		
		#widget = {
		#	allow_outside = yes
		#}

		# GUI REWORK
		widget = {
			name = "SideBar"
			position = { 0 35 }
			size = { 70 600 }
			alwaystransparent = no
			allow_outside = yes
			#visible = no
			background = {
				name = "Shadow"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				texture = "gfx/interface/base_parts/shadows/side_bar_shadow.dds"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 70 75 }
				alpha = 0.5
			}
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = red_background
				alpha = 0.95
				modify_texture = {
					texture = "gfx/interface/base_parts/side_bar_alpha.dds"
					blend_mode = alphamultiply
					spriteType = Corneredtiled
					spriteborder = { 70 75 }
				}
			}
			icon = {
				size = { 100% 100% }
				using = darken_red_background
				modify_texture = {
					texture = "gfx/interface/base_parts/background_pattern.dds"
					blend_mode = alphamultiply
					spriteType = Corneredtiled
				}
				modify_texture = {
					texture = "gfx/interface/base_parts/demanded_filth.dds"
					blend_mode = alphamultiply
					spriteType = Corneredtiled
				}
				modify_texture = {
					texture = "gfx/interface/base_parts/side_bar_alpha.dds"
					blend_mode = alphamultiply
					spriteType = Corneredtiled
					spriteborder = { 70 75 }
				}
			}
			icon = {
				name = "Top Gradient"
				size = { 70 210 }
				texture = "gfx/interface/base_parts/gradient_black.dds"
				modify_texture = {
					texture = "gfx/interface/base_parts/side_bar_alpha_2.dds"
					blend_mode = alphamultiply
					spriteType = Corneredtiled
					spriteborder = { 70 75 }
				}
			}
			#icon = {
			#	using = black_background
			#	size = { 70 176 }
			#	modify_texture = {
			#		texture = "gfx/interface/base_parts/side_bar_alpha.dds"
			#		blend_mode = alphamultiply
			#		spriteType = Corneredtiled
			#		spriteborder = { 70 75 }
			#	}
			#}
			topbar_left_button = {
				name = "macro_builder"
				position = { -4 100 }
				blockoverride "Text" { text = "MACRO_BUILDER" }
				blockoverride "On_click" {
					onclick = "[ToggleGameView('macro_builder')]"
					shortcut = "macro_builder"
				}
				blockoverride "On_click_Sound" {
					clicksound = "event:/SFX/UI/Province/sfx_ui_province_build_building"
				}
				blockoverride "Details"
				{
					visible = "[Not(IsGameViewOpen('macro_builder'))]"
					tooltip = "MACRO_BUILDER_MENU"
				} 
				
				blockoverride "Details_toggled"
				{
					visible = "[IsGameViewOpen('macro_builder')]"
				}
				
				blockoverride "Icon"
				{
					texture = "gfx/interface/icons/menu_buttons/macrobuilder.dds"
				}
			}
			
			flowcontainer = {
				name = "Buttons_Container"
				direction = vertical
				position = { -4 0 }
				#spacing = 6
				resizeparent = yes
				ignoreinvisible = yes
				allow_outside = yes
				#parentanchor = top|hcenter
				widget = {
					size = { 70 180 }
				}

				topbar_left_button = {
					blockoverride "Text" { text = "OVERVIEW" }
					blockoverride "On_click" {
						onclick = "[ToggleGameView('overview')]"
						shortcut = "top_bar_1"
					}
					blockoverride "On_click_Sound" {
						
					}
					blockoverride "Details"
					{
						visible = "[Not(IsGameViewOpen('overview'))]"
						tooltip = "NATION_OVERVIEW_MENU"
					} 
					
					blockoverride "Details_toggled"
					{
						visible = "[IsGameViewOpen('overview')]"
					}
					
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/menu_buttons/menu_overview.dds"
					}
				}

				topbar_left_button = {
					blockoverride "Text" { text = "GOVERNMENT" }
					blockoverride "On_click" {
						onclick = "[ToggleGameView('government')]"
						shortcut = "top_bar_2"
					}
					blockoverride "On_click_Sound" {
						
					}
					blockoverride "Details"
					{
						visible = "[Not(IsGameViewOpen('government'))]"
						tooltip = "GOVERNMENT_MENU"
					} 
					
					blockoverride "Details_toggled"
					{
						visible = "[IsGameViewOpen('government')]"
					}
					
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/menu_buttons/menu_government.dds"
					}
				}


				topbar_left_button = {
					blockoverride "Text" { text = "ECONOMY" }
					blockoverride "On_click" {
						onclick = "[ToggleGameView('economy')]"
						shortcut = "top_bar_3"
					}
					blockoverride "On_click_Sound" {
						clicksound = "event:/SFX/UI/Diplomacy/sfx_ui_diplomacy_trade_minor"
					}
					blockoverride "Details"
					{
						visible = "[Not(IsGameViewOpen('economy'))]"
						tooltip = "ECONOMY_MENU"
					} 
					
					blockoverride "Details_toggled"
					{
						visible = "[IsGameViewOpen('economy')]"
					}
					
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/menu_buttons/menu_economy.dds"
					}
				}
				widget = {
					size = { 43 10 }
					parentanchor = hcenter
					icon = {
						size = { 100% 2 }
						using = macro_divider
						parentanchor = center
					}
				}

				topbar_left_button = {
					blockoverride "Text" { text = "RELIGION" }
					blockoverride "On_click" {
						onclick = "[ToggleGameView('religion')]"
						shortcut = "top_bar_4"
					}
					blockoverride "On_click_Sound" {
						clicksound = "event:/SFX/UI/Religion/sfx_ui_religion_generic_sacrifice"
					}
					blockoverride "Details"
					{
						visible = "[Not(IsGameViewOpen('religion'))]"
						tooltip = "RELIGION_MENU"
					} 
					
					blockoverride "Details_toggled"
					{
						visible = "[IsGameViewOpen('religion')]"
					}
					
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/menu_buttons/menu_religion.dds"
					}
				}
				
				topbar_left_button = {
					blockoverride "Text" { text = "CULTURE" }
					blockoverride "On_click" {
						onclick = "[ToggleGameView('culture')]"
						shortcut = "top_bar_5"
					}
					blockoverride "On_click_Sound" {
						clicksound = "event:/SFX/UI/Province/sfx_ui_province_pop_promote"
					}
					blockoverride "Details"
					{
						visible = "[Not(IsGameViewOpen('culture'))]"
						tooltip = "CULTURE_MENU"
					} 
					
					blockoverride "Details_toggled"
					{
						visible = "[IsGameViewOpen('culture')]"
					}
					
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/menu_buttons/menu_culture.dds"
					}
				}
				
				topbar_left_button = {
					blockoverride "Text" { text = "TRADE" }
					blockoverride "On_click" {
						onclick = "[ToggleGameView('trade')]"
						shortcut = "top_bar_6"
					}
					blockoverride "On_click_Sound" {
						clicksound = "event:/SFX/UI/Diplomacy/sfx_ui_diplomacy_trade"
					}
					blockoverride "Details"
					{
						visible = "[Not(IsGameViewOpen('trade'))]"
						tooltip = "TRADE_MENU"
					} 
					
					blockoverride "Details_toggled"
					{
						visible = "[IsGameViewOpen('trade')]"
					}
					
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/menu_buttons/menu_trade.dds"
					}
				}

				topbar_left_button = {
					blockoverride "Text" { text = "MILITARY" }
					blockoverride "On_click" {
						onclick = "[ToggleGameView('military')]"
						shortcut = "top_bar_7"
					}
					blockoverride "On_click_Sound" {
						clicksound = "event:/SFX/UI/Unit/sfx_ui_unit_new_unit"
					}
					blockoverride "Details"
					{
						visible = "[Not(IsGameViewOpen('military'))]"
						tooltip = "MILITARY_MENU"
					} 
					
					blockoverride "Details_toggled"
					{
						visible = "[IsGameViewOpen('military')]"
					}
					
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/menu_buttons/menu_military.dds"
					}
				}

				topbar_left_button = {
					blockoverride "Text" { text = "MERCENARY" }
					blockoverride "On_click" {
						onclick = "[ToggleGameView('mercenary')]"
						shortcut = "top_bar_8"
					}
					blockoverride "On_click_Sound" {
						clicksound = "event:/SFX/UI/Unit/sfx_ui_unit_force_march"
					}
					blockoverride "Details"
					{
						visible = "[Not(IsGameViewOpen('mercenary'))]"
						tooltip = "MERCENARY_MENU"
					} 
					
					blockoverride "Details_toggled"
					{
						visible = "[IsGameViewOpen('mercenary')]"
					}
					
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/menu_buttons/menu_mercenary.dds"
					}
				}

				widget = {
					size = { 43 10 }
					parentanchor = hcenter
					icon = {
						size = { 100% 2 }
						using = macro_divider
						parentanchor = center
					}
				}

				topbar_left_button = {
					blockoverride "Text" { text = "DIPLOMACY" }
					blockoverride "On_click" {
						onclick = "[ToggleGameView('diplomacy')]"
						shortcut = "top_bar_9"
					}
					blockoverride "On_click_Sound" {
						clicksound = "event:/SFX/UI/Diplomacy/sfx_ui_diplomacy_fabricate_claim"
					}
					blockoverride "Details"
					{
						visible = "[Not(IsGameViewOpen('diplomacy'))]"
						tooltip = "DIPLOMACY_MENU"
					} 
					
					blockoverride "Details_toggled"
					{
						visible = "[IsGameViewOpen('diplomacy')]"
					}
					
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/menu_buttons/menu_diplomacy.dds"
					}
				}

				topbar_left_button = {
					blockoverride "Text" { text = "TECHNOLOGY" }
					blockoverride "On_click" {
						onclick = "[ToggleGameView('technology')]"
						shortcut = "top_bar_10"
					}
					blockoverride "On_click_Sound" {
						clicksound = "event:/SFX/UI/Notifications/sfx_ui_notification_action_needed"
					}
					blockoverride "Details"
					{
						visible = "[Not(IsGameViewOpen('technology'))]"
						tooltip = "TECHNOLOGY_MENU"
					} 
					
					blockoverride "Details_toggled"
					{
						visible = "[IsGameViewOpen('technology')]"
					}
					
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/menu_buttons/menu_technology.dds"
					}
				}

				topbar_left_button = {
					blockoverride "Text" { text = "CHARACTERS" }
					blockoverride "On_click" {
						onclick = "[ToggleGameView('characters')]"
						shortcut = "top_bar_11"
					}
					blockoverride "On_click_Sound" {
						
					}
					blockoverride "Details"
					{
						visible = "[Not(IsGameViewOpen('characters'))]"
						tooltip = "CHARACTERS_MENU"
					} 
					
					blockoverride "Details_toggled"
					{
						visible = "[IsGameViewOpen('characters')]"
					}
					
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/menu_buttons/menu_character.dds"
					}
				}

				topbar_left_button = {
					blockoverride "Text" { text = "MISSIONS" }
					blockoverride "On_click" {
						onclick = "[ToggleGameView('mission')]"
						shortcut = "top_bar_12"
					}
					blockoverride "On_click_Sound" {
						
					}
					blockoverride "Details"
					{
						visible = "[Not(IsGameViewOpen('mission'))]"
						enabled = "[Not( InGameTopbar.IsTutorialActive )]"
						tooltip = "[SelectLocalization( InGameTopbar.IsTutorialActive, 'TUTORIAL_MISSION_MENU', 'MISSION_MENU' )]"
					} 
					
					blockoverride "Details_toggled"
					{
						visible = "[IsGameViewOpen('mission')]"
					}
					
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/menu_buttons/menu_mission.dds"
					}
				}

				widget = {
					size = { 43 10 }
					parentanchor = hcenter
					icon = {
						size = { 100% 2 }
						using = macro_divider
						parentanchor = center
					}
				}

				topbar_left_button = {
					#visible = "[InGameTopbar.GetPlayer.MakeScope.Var('member_of_federation').IsSet]"
					blockoverride "Text" { text = "SUPRANATIONAL" }
					blockoverride "On_click_additional_1" {
						onclick = "[GetVariableSystem.Set( 'supranational_window', 'open' )]"
						shortcut = "top_bar_13"
					}
					blockoverride "On_click_Sound" {
						
					}
					blockoverride "Details"
					{
						visible = "[Or(GetVariableSystem.HasValue( 'supranational_window', 'close' ), Not(GetVariableSystem.Exists('supranational_window')))]"
						tooltip = "SUPRANATIONAL_tooltip"
					} 
					blockoverride "On_click_additional_2" { onclick = "[GetVariableSystem.Set( 'supranational_window', 'close' )]" }
					blockoverride "Details_toggled" { visible = "[GetVariableSystem.HasValue( 'supranational_window', 'open' )]" }
					
					blockoverride "Icon"
					{
						texture = "gfx/interface/icons/icon_alpha/star.dds"
					}
				}
				widget = {
					size = { 70 60 }
				}
			}
		}
		# GUI REWORK
		widget = {
			name = "TopBar"
			size = { 800 55 }
			alwaystransparent = no
			background = {
				name = "Shadow"
				texture = "gfx/interface/base_parts/shadows/top_bar_shadow.dds"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				blend_mode = alphamultiply
				spriteType = Corneredtiled
				spriteborder = { 62 0 }
				alpha = 0.5
			}
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = black_background
				alpha = 0.95
				modify_texture = {
					texture = "gfx/interface/base_parts/top_bar_alpha.dds"
					blend_mode = alphamultiply
					spriteType = Corneredtiled
					spriteborder = { 62 0 }
				}
			}
			flowcontainer = {
				margin = { 0 5 }
				spacing = 14
				resizeparent = yes
				ignoreinvisible = yes
				widget = {
					name = "Flag"
					size = { 280 45 }
				}
				container = {
					name = "Treasury"
					margin_widget = {
						size = { 140 45 }
						tooltip = "[InGameTopbar.GetPlayer.GetTreasuryTooltip]"
						using = tooltip_se
						widget = {
							size = { 100% 100% }
							visible = "[InGameTopbar.GetPlayer.HasPositiveBalance]"
							background = {
								shaderfile = "gfx/FX/pdxgui_default.shader"
								using = green_color
								alpha = 0.95
								modify_texture = {
									texture = "gfx/interface/base_parts/horizontal_gradient_stretch.dds"
									blend_mode = alphamultiply
								}
								modify_texture = {
									texture = "gfx/interface/base_parts/gradient_black.dds"
									blend_mode = alphamultiply
								}
								modify_texture = {
									texture = "gfx/interface/base_parts/top_bar_alpha_x120bd.dds"
									blend_mode = alphamultiply
									spriteType = Corneredtiled
									spriteborder = { 60 0 }
								}
							}
						}
						widget = {
							size = { 100% 100% }
							visible = "[Not(InGameTopbar.GetPlayer.HasPositiveBalance)]"
							background = {
								shaderfile = "gfx/FX/pdxgui_default.shader"
								using = red_color
								alpha = 0.95
								modify_texture = {
									texture = "gfx/interface/base_parts/horizontal_gradient_stretch.dds"
									blend_mode = alphamultiply
								}
								modify_texture = {
									texture = "gfx/interface/base_parts/gradient_black.dds"
									blend_mode = alphamultiply
								}
								modify_texture = {
									texture = "gfx/interface/base_parts/top_bar_alpha_x120bd.dds"
									blend_mode = alphamultiply
									spriteType = Corneredtiled
									spriteborder = { 60 0 }
								}
							}
						}
						icon = {
							size = { 40 40 }
							position = { 0 0 }
							texture = "gfx/interface/icons/shared_icons/treasury.dds"
							icon = {
								name = "plus"
								position = { 0 3 }
								size = { 36 36 }
								using = icon_plus
								visible = "[InGameTopbar.GetPlayer.HasPositiveBalance]"
							}
							
							icon = {
								name = "minus"
								position = { 0 3 }
								size = { 36 36 }
								using = icon_minus
								visible = "[Not(InGameTopbar.GetPlayer.HasPositiveBalance)]"
							}
						}
						widget = {
							size = { 100 40 }
							position = { -5 0 }
							parentanchor = right
							textbox = {
								size = { 100 30 }
								align = right
								fontsize = 20
								font = BaseFont
								using = White_FontColor
								text = "[InGameTopbar.GetPlayer.GetTreasury|2]"
							}
							textbox = {
								size = { 100 20 }
								parentanchor = bottom
								align = right|bottom
								using = BaseFontS
								text = "[InGameTopbar.GetPlayer.GetTreasuryChange|2+=]"
							}
						}
					}
				}
				
				container = {
					name = "Manpower"
					
					icon_and_text_with_change = {
						size = { 110 45 }
						tooltip = "[InGameTopbar.GetPlayer.GetManpowerTooltip]"
						using = tooltip_se
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/manpower.dds"
							
							#icon = {
							#	name = "plus"
							#	position = { -1 3 }
							#	size = { 36 36 }
							#	using = icon_plus
							#	visible = "[InGameTopbar.GetPlayer.HasPositiveManpower]"
							#}
							#
							#icon = {
							#	name = "minus"
							#	position = { -1 3 }
							#	size = { 36 36 }
							#	using = icon_minus
							#	visible = "[Not(InGameTopbar.GetPlayer.HasPositiveManpower)]"
							#}
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetManpower]"
						}		

						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetManpowerChange]"
						}
						
					}
				}

				container = {
					name = "Political_Influence"
					
					icon_and_text_with_change = {
						size = { 110 45 }
						tooltip = "[InGameTopbar.GetPlayer.GetPoliticalInfluenceDescription]"
						using = tooltip_se
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead.					
						
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/political_influence.dds"
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetPoliticalInfluence|0]"
						}	
						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetPoliticalInfluenceChange|2+=]"
						}
					}
				}

				container = {
					name = "Military_Experience"
					
					icon_and_text_with_change = {
						size = { 110 45 }
						tooltip = "[InGameTopbar.GetPlayer.GetMilitaryExperienceDescription]"
						
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead when relevant.
						using = tooltip_se
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/military_experience.dds"
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetMilitaryExperience|2]"
						}

						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetMilitaryExperienceChange|2+=]"
						}
						
					}
				}
				
				container = {
					name = "Stability"
					
					icon_and_text_with_change = {
						size = { 110 45 }
						tooltip = "[InGameTopbar.GetPlayer.GetStabilityTooltipPlayer]"
						using = tooltip_se
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead when relevant.
						
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/stability.dds"
							
							icon = {
								name = "plus"
								size = { 36 36 }
								using = icon_plus
								visible = "[GreaterThan_CFixedPoint(InGameTopbar.GetPlayer.GetMonthlyStabilityChange, '(CFixedPoint)0')]"
							}
							
							icon = {
								name = "minus"
								size = { 36 36 }
								using = icon_minus
								visible = "[LessThan_CFixedPoint(InGameTopbar.GetPlayer.GetMonthlyStabilityChange, '(CFixedPoint)0')]"
							}							
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetStability|2]"
						}	

						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetMonthlyStabilityChange|2+=]"
						}
						
					}
				}

				container = {
					name = "Aggressive_expansion"
					
					icon_and_text_with_change = {
						size = { 110 45 }
						tooltip = "[InGameTopbar.GetPlayer.GetCurrentAgressiveExpansionInfo]"
						using = tooltip_se
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead when relevant.
						
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/aggressive_expansion.dds"
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetCurrentAgressiveExpansion|2]"
						}	

						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetAggressiveExpansionChange|2-=]"
						}
						
					}
				}
				
				container = {
					name = "War_exhaustion"
					icon_and_text_with_change = {
						size = { 110 45 }
						using = tooltip_se
						tooltip = "[InGameTopbar.GetPlayer.GetWarExhaustionTooltipPlayer]"
						blockoverride "Text" { text = "[InGameTopbar.GetPlayer.GetWarExhaustion|2]" }
						blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/war_exhaustion.dds" }
						parentanchor = vcenter
						
						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetWarExhaustionChange|2-=]"
						}
						
					}
				}
				
				container = {
					name = "Tyranny"
					
					icon_and_text_with_change = {
						size = { 110 45 }
						tooltip = "[InGameTopbar.GetPlayer.GetTyrannyTooltip]"
						using = tooltip_se
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead when relevant.
						
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/tyranny.dds"
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetTyranny|2]"
						}	

						blockoverride "Change"
						{
							text = "[InGameTopbar.GetPlayer.GetTyrannyChange|2-=]"
						}
						
					}
				}	

				container = {
					name = "Senate_Approval"
					tooltip = "[InGameTopbar.GetPlayer.GetSenateApprovalTooltip]"
					visible = "[InGameTopbar.GetPlayer.GetGovernment.IsRepublic]"
					using = tooltip_se
					icon_and_text = { 
						visible = "[GreaterThanOrEqualTo_CFixedPoint( InGameTopbar.GetPlayer.GetSenateApproval, '(CFixedPoint)50' )]"
						size = { 110 0 }
						position = { 0 12 }
						blockoverride "Icon" 
						{ 
							texture = "gfx/interface/diplomacy/icon_senate_approval.dds" 
							framesize = { 42 42 }
							frame = 1
						}
						blockoverride "Text" 
						{
							text = "[InGameTopbar.GetPlayer.GetSenateApproval|2]" 
						}
					}
					
					icon_and_text = { 
						visible = "[LessThan_CFixedPoint( InGameTopbar.GetPlayer.GetSenateApproval, '(CFixedPoint)50' )]"
						size = { 110 0 }
						position = { 0 12 }
						blockoverride "Icon" 
						{ 
							texture = "gfx/interface/diplomacy/icon_senate_approval.dds" 
							framesize = { 42 42 }
							frame = 2
						}
						blockoverride "Text" 
						{
							text = "[InGameTopbar.GetPlayer.GetSenateApproval|2]" 
						}
					}
				}
				
				container = {
					name = "Legitimacy"
					visible = "[InGameTopbar.GetPlayer.GetGovernment.IsMonarchy]"
					
					icon_and_text = {
						size = { 110 45 }
						tooltip = "[InGameTopbar.GetPlayer.GetLegitimacyTooltip]"
						using = tooltip_se
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead when relevant.
						
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/legitimacy.dds"
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetLegitimacy|2]"
						}
					}
				}
				
				container = {
					name = "Centralization"
					visible = "[InGameTopbar.GetPlayer.GetGovernment.IsTribal]"
					
					icon_and_text = {
						size = { 110 45 }
						tooltip = "[InGameTopbar.GetPlayer.GetCentralizationTooltip]"
						using = tooltip_se
						# DO NOT set an alpha value to this. Even when the value is irelevant. 
						# If you want to deemphasize it, add "using = Disabled_FontColor" to the Text blockoverride instead when relevant.
						
						blockoverride "Icon" 
						{
							texture = "gfx/interface/icons/shared_icons/centralization.dds"
						}
						
						blockoverride "Text"
						{
							text = "[InGameTopbar.GetPlayer.GetCentralization|2]%"
						}
					}
				}
				
				overlappingitembox = {
					size = { 180 45 }
					parentanchor = vcenter
					
					visible = "[Not(IsDataModelEmpty( InGameTopbar.GetPlayer.MakeScope.GetList('captured_eagles') ))]" 
					
					datamodel = "[InGameTopbar.GetPlayer.MakeScope.GetList('captured_eagles')]"
					
					item = {
						button = {
							texture = "gfx/interface/icons/shared_icons/roman_eagle.dds"
							size = { 40 40 }
							datacontext = "[Scope.Province]"
							parentanchor = top|left
							tooltip = "eagle_capture_banner_tooltip"
							using = tooltip_se
							onclick = "[OnClickOnProvince( Scope.Province )]" 
						}
					}
				}				
				
				widget = {
					size = { 260 45 }
					widget = { 
						name = "speed_control_and_date"
						size = { 200 52 }
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								minimumsize = { 0 26 }
								spacing = 2
								button_minus = {
									blockoverride "On_click"
									{
										onclick = "[OnDecreaseGameSpeed]"
										shortcut = "decrease_speed"
									}
									tooltip = "DECREASE_GAME_SPEED"
									using = tooltip_se
									enabled = "[CanChangeGameSpeed]" 
								}
								
								### TODO Art needs unique button
								button = {
									minimumsize = { 140 28 }
									maximumsize = { 140 28 }
									using = red_background
									onclick = "[OnPause]"
									tooltip = "CURRENT_DATE_TOOLTIP"
									using = tooltip_se
									margin_widget = {
										margin = { 2 2 }
										size = { 100% 100% }
										margin_widget = {
											size = { 100% 100% }
											background = {
												shaderfile = "gfx/FX/pdxgui_default.shader"
												using = black_background
												using = portrait_x32y32bd_alpha
											}
											progressbar = {
												size = { 17 16 }
												parentanchor = bottom
												gfxtype = framedprogressbargfx
												texture = "gfx/interface/base_parts/gear.dds"
												framesize = { 17 16 }
												loopinterval = 0.5
												max=0
												modify_texture = {
													spriteborder = { 16 16 }
													spriteType = Corneredtiled
													texture = "gfx/interface/base_parts/button_s.dds"
													blend_mode = add
												}
											}
											progressbar = {
												size = { 17 16 }
												parentanchor = right
												gfxtype = framedprogressbargfx
												texture = "gfx/interface/base_parts/gear_top.dds"
												framesize = { 17 16 }
												loopinterval = 0.5
												max=0
												modify_texture = {
													spriteborder = { 16 16 }
													spriteType = Corneredtiled
													texture = "gfx/interface/base_parts/button_s.dds"
													blend_mode = add
												}
											}
											textbox = {
												name = "Text"
												position = { 0 -2}
												widgetanchor = center
												parentanchor = center				
												using = BaseFontS
												autoresize = yes
												align = center
												elide = right
												fontsize_min = 12
												text = "CURRENT_DATE"
												using = Teal_FontColor
											}
										}
									}
									visible = "[Not(IsGamePaused)]"
								}

								### TODO Art needs unique button

								text_button_square_highlighted = {
									name = "filled"
									layoutpolicy_horizontal = expanding
									blockoverride "MinimumSize" 
									{
										minimumsize = { 140 28 }
										maximumsize = { 140 28 }
									}
									tooltip = "CURRENT_DATE_TOOLTIP"
									using = tooltip_se
									blockoverride "Center_text"
									{
										text = "CURRENT_DATE"
									}
									
									blockoverride "On_click"
									{
										onclick = "[OnPause]"
									}
									
									visible = "[IsGamePaused]"
									
								}
								
								button_plus = { 
									
									blockoverride "On_click"
									{
										onclick = "[OnIncreaseGameSpeed]"
										shortcut = "increase_speed"
									} 
									tooltip = "INCREASE_GAME_SPEED"
									enabled = "[CanChangeGameSpeed]" 
									using = tooltip_se
								}
							}
						}
					}
					widget = {
						size = { 200 46 }
						icon_time_indicator = {
							position = { 0 3 }
							parentanchor = hcenter
							frame = "[GetCurrentGameSpeed]"
							modify_texture = {
								spriteborder = { 16 16 }
								spriteType = Corneredtiled
								texture = "gfx/interface/base_parts/button_s.dds"
								blend_mode = add
							}
						} 
					}
				}
			}
		}
		flowcontainer = {
			margin_left = 1
			background = {
				name = "Shadow"
				texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				spriteType = corneredtiled
				spriteborder = { 8 8 }
				margin = { 3 3 }
				alpha = 0.5
			}
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = black_background
			}
			#cpt_button = {
			#	size = { 68 96 }
			#	parentanchor = vcenter
			#	datacontext = "[InGameTopbar.GetPlayer.GetRuler]"
			#	blockoverride "ShowHeadOfFamily" { visible = no }
			#	blockoverride "ShowIcons" { visible = no }
			#}
			flowcontainer = {
				ignoreinvisible = yes
				parentanchor = vcenter
				topbar_flag = {
					visible = yes
					size = { 150 100 }
					using = europe_flag
				}
				topbar_flag = {
					visible = no
					size = { 100 100 }
					using = europe_square_flag
				}
				topbar_flag = {
					visible = no
					size = { 150 100 }
					using = asia_flag
				}
				topbar_flag = {
					visible = no
					size = { 150 100 }
					using = india_flag
				}
				topbar_flag = {
					visible = no
					size = { 75 100 }
					using = nepal_flag
				}
				topbar_flag = {
					visible = no
					size = { 150 75 }
					using = islamic_special_a_flag
				}
				topbar_flag = {
					visible = no
					size = { 150 100 }
					using = islamic_special_b_flag
				}
			}
			widget = {
				size = { 143 103 }
				flowcontainer = {
					direction = vertical
					spacing = 2
					list_button = {
						size = { 140 32 }
						tooltip = "GDP"
						blockoverride "Content" {
							textbox = {
								text = "£[GuiScope.SetRoot(Player.MakeScope).ScriptValue('WEALTH_total_private_moveable_wealth')|3]"
								using = BaseFontM
								using = Black_FontColor
								parentanchor = vcenter
								align = left|nobaseline
								position = { 10 2 }
								autoresize = yes
							}
						}
					}
					list_button = {
						size = { 140 32 }
						tooltip = "SHIPPING_CONTROLLED_TT_topbar"
						blockoverride "Content" {
							textbox = {
								text = "[GuiScope.SetRoot(Player.MakeScope).ScriptValue('TRADE_percentage_of_global_shipping')|%]"
								using = BaseFontM
								using = Black_FontColor
								parentanchor = vcenter
								align = left|nobaseline
								position = { 10 2 }
								autoresize = yes
							}
						}
					}
					list_button = {
						size = { 140 32 }
						tooltip = "TRADE_ACTIVITY_VALUE_TT_topbar"
						blockoverride "Content" {
							textbox = {
								text = "£[GuiScope.SetRoot(Player.MakeScope).ScriptValue('TRADE_activity_value')|3]"
								using = BaseFontM
								using = Black_FontColor
								parentanchor = vcenter
								align = left|nobaseline
								position = { 10 2 }
								autoresize = yes
							}
						}
					}
				}
			}
		}
		flowcontainer = {
			margin = { 5 5 }
			spacing = 4
			parentanchor = right
			ignoreinvisible = yes
			icon_button_square = {
				size = { 32 32 }
				visible = "[Not(GetVariableSystem.HasValue( 'wiki_ui', 'open' ))]"
				blockoverride "On_click" 
				{ 
					onclick = "[GetVariableSystem.Set( 'wiki_ui', 'open' )]"
					tooltip = "open_wiki"
					using = tooltip_se
				}
				blockoverride "Icon"
				{
					size = { 28 28 }
					using = white_background
					modify_texture = {
						texture = "gfx/interface/base_parts/topbar_icons/wiki.dds"
						blend_mode = alphamultiply   
					}
				}
			}
			icon_button_square = {
				size = { 32 32 }
				visible = "[GetVariableSystem.HasValue( 'wiki_ui', 'open' )]"
				blockoverride "On_click" 
				{ 
					onclick = "[GetVariableSystem.Set( 'wiki_ui', 'close' )]"
					tooltip = "close_wiki"
					using = tooltip_se
				}
				blockoverride "Icon"
				{
					size = { 28 28 }
					using = white_background
					modify_texture = {
						texture = "gfx/interface/base_parts/topbar_icons/wiki.dds"
						blend_mode = alphamultiply   
					}
				}
			}
			icon_button_square = {
				size = { 32 32 }
				blockoverride "On_click" 
				{ 
					onclick = "[InGameTopbar.OpenView('ledger')]"
					tooltip = "LEDGER"
					using = tooltip_se
				}
				blockoverride "Icon"
				{
					size = { 28 28 }
					using = white_background
					modify_texture = {
						texture = "gfx/interface/base_parts/topbar_icons/ledger.dds"
						blend_mode = alphamultiply   
					}
				}
			}
			icon_button_square = {
				size = { 32 32 }
				blockoverride "On_click" 
				{ 
					onclick = "[InGameTopbar.OpenView('view_score')]"
					tooltip = "TOPBAR_SCORE_TOOLTIP"
					using = tooltip_se
				}
				blockoverride "Icon"
				{
					size = { 28 28 }
					using = white_background
					modify_texture = {
						texture = "gfx/interface/base_parts/topbar_icons/score.dds"
						blend_mode = alphamultiply   
					}
				}
			}
			icon_button_square = {
				size = { 32 32 }
				blockoverride "On_click" 
				{ 
					onclick = "[ToggleMessageLog]"
					tooltip = "MESSAGE_LOG_TT"
					using = tooltip_se
				}
				blockoverride "Icon"
				{
					size = { 28 28 }
					using = white_background
					modify_texture = {
						texture = "gfx/interface/base_parts/topbar_icons/log.dds"
						blend_mode = alphamultiply   
					}
				}
			}
			icon_button_square = {
				size = { 40 50 }
				name = "ingame_menu_button"
				blockoverride "On_click" 
				{ 
					onclick = "[OnPauseMenu]"
					tooltip = "SHOW_MENU" 
					using = tooltip_se
					shortcut = "close_window"
				}
				blockoverride "Icon"
				{
					size = { 26 26 }
					using = white_background
					modify_texture = {
						texture = "gfx/interface/base_parts/topbar_icons/menu.dds"
						blend_mode = alphamultiply   
					}
				}
			}
		}
		window = {
			position = { 3 4 }
			name = "minimap_and_buttons"
			parentanchor = bottom|right
			widgetanchor = bottom|right
			size = { 374 292 }
			movable = no
			background = {
				name = "Shadow"
				texture = "gfx/interface/base_parts/button_square_dropshadow_x16y16bd.dds"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				spriteType = corneredtiled
				spriteborder = { 8 8 }
				margin = { 2 2 }
				alpha = 0.5
			}
			background = {
				shaderfile = "gfx/FX/pdxgui_default.shader"
				using = black_background
				using = border3
			}
			secondary_header = {
				size = { 376 38 }
				position = { 0 5 }
				
				blockoverride "Title_text" { text = "MAPMODES_HEADER" }
				blockoverride "White_buttons" 
				{   
					white_button_round = {
						size = { 22 22 }
						name = "find_province"
						blockoverride "Icon" { texture = "gfx/interface/base_parts/find.dds" }
						blockoverride "On_click" 
						{
							shortcut = "find_province"
							onclick = "[OnFindProvince]"
						}
						tooltip = "MAPACTION_FIND_PROVINCE"
					}
					white_button_round = {
						name = "go_to_capital"
						size = { 22 22 }
						blockoverride "Icon" { texture = "gfx/interface/base_parts/home.dds" }
						blockoverride "On_click"
						{ 
							onclick = "[GoToCapital]"
							shortcut = "go_to_capital"
						}
						tooltip = "MAPACTION_GO_TO_CAPITAL"
					}
					white_button_round = {
						name = "select map modes"
						blockoverride "Icon" { texture = "gfx/interface/base_parts/settings.dds" }
						size = { 22 22 }
						blockoverride "On_click" { onclick = "[OnSelectMapModes]" }
						tooltip = "CONFIGURE_MAP_MODES"
					}
					flowcontainer = {
						ignoreinvisible = yes
						white_button_round = {
							name = "hideminimap"
							size = { 22 22 }
							blockoverride "Icon" { texture = "gfx/interface/base_parts/down_arrow.dds" }
							blockoverride "On_click"
							{
								onclick = "[PdxGuiTriggerAllAnimations('hide_minimap_anim')]"
								onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('showminimap').Show]"
								onclick = "[PdxGuiWidget.AccessParent.AccessParent.Hide]"
								clicksound = "event:/SFX/UI/Generic/2.0/sfx_ui_button_secondary"
							}
						}
						white_button_round = {
							name = "showminimap"
							size = { 22 22 }
							visible = no
							blockoverride "Icon" { texture = "gfx/interface/base_parts/up_arrow.dds" }
							blockoverride "On_click"
							{
								onclick = "[PdxGuiTriggerAllAnimations('show_minimap_anim')]"
								onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('hideminimap').Show]"
								onclick = "[PdxGuiWidget.AccessParent.AccessParent.Hide]"
								clicksound = "event:/SFX/UI/Generic/2.0/sfx_ui_button_secondary"
							} 
						}
					}
				}
			}
			state = {
				name = hide_minimap_anim
				
				animation = {
					position = { 3 180 }
					bezier = { 0.1 0.25 0.4 1 }
				}
				
				duration = 0.2
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_queued_events_close"
				}
			}
			
			state = {
				name = show_minimap_anim
				
				animation = {
					position = { 3 4 }
					bezier = { 0.1 0.25 0.4 1 }
				}
				
				duration = 0.2 
				start_sound = {
					soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_queued_events_open"
				}
			}
			
			container = {
				name = "minimap_view"
				position = { 3 2 }
				parentanchor = bottom|right
				widgetanchor = bottom|right
				using = minimap_view
			}
			container = {
				position = { 8 42 }
				container = {
					name = "toolbar"
					position = { 0 0 }
					#parentanchor = bottom|right
					#widgetanchor = bottom|right
					using = toolbar
				}
				
				container = {
					name = "toolbar2"
					position = { 0 34 }
					#parentanchor = bottom|right
					#widgetanchor = bottom|right
					using = toolbar2
				}
			}
		}
		
		###
		textbox = { #TODO Rework
			position = { 0 400 }
			using = FontHeading1
			parentanchor = top|hcenter
			autoresize = yes
			text = "AUTOSAVE_IN_PROGRESS"
			align = center|nobaseline
			visible = "[IsAutoSaving]"
		}
		
		textbox = { #TODO Rework
			position = { 0 190 }
			using = FontHeading1
			parentanchor = top|hcenter
			autoresize = yes
			text = "SAVE_IN_PROGRESS"
			align = center|nobaseline
			visible = "[IsSaving]"
		}
		
		base_window_black = {
			name = "event_window"
			size = { 278 166 }
			position = { 3 632 }
			parentanchor = right
			movable = no
			allow_outside = yes

			button = { 
				position = { -50 3 }	
				size = { 58 48 }
				
				icon = {
					using = red_background
					size = { 96 204 }
					scale = 0.66
					position = { 0 -18 }
					
					modify_texture = {
						name = "Alpha"
						texture = "gfx/interface/header_decorations/outliner_ornament_test.dds"
						blend_mode = alphamultiply
					}				
				}
			}	

			secondary_header = {
				size = { 280 32 }
				position = { 0 3 }
				blockoverride "Title_text" { text = "event_queue_title" }
			}
			
			vbox = {	
				vbox = {
					layoutpolicy_vertical = expanding
					margin_top = 38
					fixedgridbox = {
						size = { 260 200 }
						addcolumn = 260
						addrow = 30
						maxhorizontalslots = 1
						maxverticalslots = 4
						datamodel = "[InGameTopbar.GetMinorEventItems]"
						
						item = {
							outliner_highlight_button = {
								size = { 100% 24 }
								datacontext = "[MinorEventItem]"
								blockoverride "Text" { text = "[MinorEventItem.GetTitle]" }
								blockoverride "On_click" 
								{ 
									onclick = "[MinorEventItem.OnClick]"
									onrightclick = "[MinorEventItem.OnRightClick]"
								}
								blockoverride "UpAlpha" { alpha = 0.4 }
								textbox = {
									parentanchor = right
									using = BaseFontS
									autoresize = yes
									position = { -4 -1 }
									text = "[MinorEventItem.GetDaysRemaining]"
								}
								tooltip = "interface_option_default_minor_event_window_why_is_this_key_so_long"
							}
						}
					}
					vbox = {
						layoutpolicy_vertical = expanding
					}
				}
				
			}
			
			
			button_slide_out = {
				name = "hide_event_queue_button"
				position = { -19 8 }
				alwaystransparent = no
				inherit_visual_state = yes
				onclick = "[PdxGuiTriggerAllAnimations('hide_event_queue')]"
				onclick = "[PdxGuiWidget.Hide]"
				onclick = "[PdxGuiWidget.AccessParent.FindChild('show_event_queue_button').Show]"
				### Audio ###
				state = {
					name = _show
					start_sound = {
						soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_queued_events_open"
					}
				}
			}
			
			button_slide_in = {
				name = "show_event_queue_button" 
				position = { -19 8 }
				visible = no
				alwaystransparent = no
				inherit_visual_state = yes
				onclick = "[PdxGuiTriggerAllAnimations('show_event_queue')]"
				onclick = "[PdxGuiWidget.Hide]"
				onclick = "[PdxGuiWidget.AccessParent.FindChild('hide_event_queue_button').Show]"
				### Audio ###
				state = {
					name = _show
					start_sound = {
						soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_queued_events_close"
					}
				}
			}
			
			state = {
				name = "hide_event_queue"
				
				animation = {
					position = { 270 632 }
				}
				
				duration = 0.15
				
				on_finish = "[PdxGuiWidget.FindChild('event_queue_hide').Hide]"
				on_finish = "[PdxGuiWidget.FindChild('event_queue_show').Show]"
			
			}
			
			state = {
				name = "show_event_queue"
				
				animation = {
					position = { 3 632 }
				}
				
				duration = 0.15
				
				on_finish = "[PdxGuiWidget.FindChild('event_queue_hide').Show]"
				on_finish = "[PdxGuiWidget.FindChild('event_queue_show').Hide]"
			
			}
		}
		### LAGGING PLAYER NOTIFICATION
		widget = {
			#using = ScrollMessageBackground
			using = white_background
			using = clickthrough_blocker
			size = { 274 70 }
			position = { -324 32 }
			layer = top
			parentanchor = top|right
			visible = "[GetPlayerIsLagging]"
			
			textbox = {
				size = { 274 70 }
				using = BaseFontM
				using = Black_FontColor
				#autoresize = yes
				multiline = yes
				resizeparent = yes
				elide = right
				text = "[GetLaggingPlayerString]"
				align = center|nobaseline
				parentanchor = center
			}
		}
		supranational = {
			visible = "[GetVariableSystem.HasValue( 'supranational_window', 'open' )]"
		}
		wiki_window = {
			
		}
		mp_start_screen_ingame = {

		}

		#new_element_test_window = { } #hide

		state = {
			name = "start"
			on_start = "[PdxGuiTriggerAllAnimations('base_animation')]"
			trigger_when = "[GetVariableSystem.HasValue('mp_start_screen', 'start')]"
		}
	}
}
	

