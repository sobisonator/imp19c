template select_character_list
{
	position = { 16 74 }
	size = { 660 520 }
	
	scrollarea = {
		position = { 0 0 }
		size = { 648 468 }
		using = VerticalScrollAreaCutOff
		scrollbar_vertical = {
			using = VerticalScrollBar
		}
		
		using = standard_list
		name = "envoys_scroll_area"
			
		
		blockoverride "ss_container"
		{
			fixedgridbox = {
				name = "characters_grid"
				position = { 0 0 }
				size = { 660 500 }
				addcolumn = 640
				addrow = 94
				
				item = {
					container = {
						datacontext = "[CharacterListItem.GetCharacter]"
						enabled = "[CharacterListItem.IsSelectable]"
						tooltip = "[CharacterListItem.GetText('tooltip')]"
						
						list_button = {
							name = "select"
							#spriteborder = { 40 10 }
							position = { 0 0 }
							size = { 634 90 }
							parentanchor = vcenter
							onclick = "[CharacterListItem.OnClick('character')]"
							clicksound = "event:/SFX/UI/Character/Unique/sfx_ui_character_grant_position"		
						}
						
						cpt_button = {
							size = { 60 90 }
							parentanchor = vcenter
						}
						
						flowcontainer = {
							position = { 68 8 }
							spacing = 10
							
							textbox = {
								name = "name"
								using = BaseFontM
								using = Black_FontColor
								parentanchor = top|left
								autoresize = yes
								align = left
								text = "[Character.GetNameWithNoTooltip]"
								#tooltipwidget = Character_tooltip	
								minimumsize = { 220 24 }
								elide = right
							}
						}
						
						flowcontainer = {
							position = { 440 6 }
							tooltip = "[Character.GetFamily.GetWageTooltip]" 
							textbox = {
								visible = "[And( Not(Character.GetFamily.IsMinor), EqualTo_int32( Character.GetCountry.GetId, Character.GetEmployer.GetId ))]" 
								text = "[Character.GetFamily.GetNumberOfJobs] / [Character.GetFamily.GetNumberOfExpectedJobs]"
								using = BaseFontM
								using = Black_FontColor
								parentanchor = right
								
								size = { 40 24 }
								align = left
								elide = right
							}

							container = {
								visible = "[And( Character.GetFamily.IsScorned, EqualTo_int32( Character.GetCountry.GetId, Character.GetEmployer.GetId ))]" 
								icon = {
									texture = "gfx/interface/icons/shared_icons/scorned_family.dds"
									size = { 29 29 }
									position = { 0 -3 }
								}
							}
						}
						
						flowcontainer = {
							ignoreinvisible = yes
							position = { 68 40 }
							spacing = 8
							widget = {
								size = { 42 42 }
								tooltip = "[CharacterListItem.GetSpecificSkill.GetAttributeBreakdownTooltip]" 
			
								icon = {
									size = { 48 48 }
									position = { 0 2 }
									texture = "gfx/interface/icons/icon_skills.dds"
									framesize = { 50 50 }
									frame = "[CharacterListItem.GetSpecificSkill.GetFrame]"
									parentanchor = center
								}
								
								icon = {
									framesize = { 60 32 }
									frame = "[CharacterListItem.GetSpecificSkill.GetValue]"
									texture = "gfx/interface/map/ranking_nonzero_characteristic.dds"
									parentanchor = center
									widgetanchor = center
								}
							}
							widget = {
								size = { 42 42 }
								tooltip = "[Character.GetMartialToolTip]" 
								block "ShowMartial" { visible = no }
								icon = {
									size = { 48 48 }
									texture = "gfx/interface/icons/shared_icons/military.dds"
									parentanchor = center
								}
								
								icon = {
									framesize = { 60 32 }
									frame = "[Character.GetMartial]"
									texture = "gfx/interface/map/ranking_nonzero_characteristic.dds"
									parentanchor = center
									widgetanchor = center
								}
							}
						}
						
						textbox = {
							name = "age"
							position = { -22 8 }
							multiline = no
							using = BaseFontM
							using = Black_FontColor
							autoresize = yes
							parentanchor = top|right
							widgetanchor = top|right
							align = right
							text = "[Character.GetAgeInfo]"
							tooltip = "[Character.GetAgeOnDeathOrBirthDate]"
						}

						flowcontainer = {
							position = { 232 52 }
							spacing = 8

							#Popularity
							icon_and_text_dark = {						
								size = { 90 0 }
								blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/popularity.dds" }
								blockoverride "Text" { text = "[Character.GetPopularity|0]" }
								tooltip = "[Character.GetPopularityToolTip]"
							}
							
							#Loyalty
							icon_and_text_dark = {						
								size = { 90 0 }
								tooltipwidget = { using = character_loyalty_tooltip }
								blockoverride "Icon" { using = icon_loyalty }
								blockoverride "Text" { text = "[Character.GetLoyalty|0]" }
							}
							
							#Corruption
							icon_and_text_dark = {						
								size = { 90 0 }
								blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/corruption.dds" }
								blockoverride "Text" { text = "[Character.GetCorruption|0]" }
								tooltip = "[Character.GetCorruptionToolTip]"
							}
							
							#Statesmanship
							icon_and_text_dark = {						
								size = { 90 0 }
								blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/statesmanship.dds" }
								blockoverride "Text" { text = "[Character.GetExperience|0]" }
								tooltip = "[Character.GetExperienceInformation]"
							}
						}
						
						dynamicgridbox = {
							datamodel = "[CharacterListItem.GetTraitItems]"
							#spacing = 4
							position = { -120 8 }
							size = { 100 60 }
							parentanchor = right
							flipdirection = yes
							item = {
								container = {
									visible = "[TraitItem.IsValid]"
									datacontext = "[TraitItem.GetTrait]"
									
									icon = {
										size = { 30 30 }
										alwaystransparent = yes
										texture = "[TraitItem.GetIcon]"
										tooltip = "[TraitItem.GetTooltip]"
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

template select_character_list_military
{
	position = { 16 80 }
	size = { 660 520 }
	
	scrollarea = {
		position = { 0 0 }
		size = { 648 468 }
		using = VerticalScrollAreaCutOff
		scrollbar_vertical = {
			using = VerticalScrollBar
		}
		
		using = standard_list
		name = "envoys_scroll_area"
			
		
		blockoverride "ss_container"
		{
			fixedgridbox = {
				name = "characters_grid"
				position = { 0 0 }
				size = { 660 500 }
				addcolumn = 640
				addrow = 100
				
				item = {
					container = {
						datacontext = "[CharacterListItem.GetCharacter]"
						enabled = "[CharacterListItem.IsSelectable]"
						tooltip = "[CharacterListItem.GetText('tooltip')]"
						
						list_button = {
							name = "select"
							spriteborder = { 40 10 }
							position = { 0 0 }
							size = { 634 94 }
							onclick = "[CharacterListItem.OnClick('character')]"
							clicksound = "event:/SFX/UI/Character/Unique/sfx_ui_character_grant_position"		
						}
						
						cpt_button = {
							size = { 60 90 }
							parentanchor = vcenter
						}
						
						flowcontainer = {
							position = { 66 6 }
							spacing = 10
							
							textbox = {
								name = "name"
								using = BaseFontM
								using = Black_FontColor
								parentanchor = top|left
								autoresize = yes
								align = left
								text = "[Character.GetNameWithNoTooltip]"
								#tooltipwidget = Character_tooltip
								minimumsize = { 220 24 }
								elide = right
							}
						}
						
						flowcontainer = {
							position = { -22 -6 }
							parentanchor = right|bottom
							spacing = 6
							container = {
								visible = "[And( Character.GetFamily.IsScorned, EqualTo_int32( Character.GetCountry.GetId, Character.GetEmployer.GetId ))]" 
								tooltip = "[Character.GetFamily.GetWageTooltip]"
								icon = {
									texture = "gfx/interface/icons/shared_icons/scorned_family.dds"
									size = { 29 29 }
									position = { 0 1 }
								}
							}
							tag_dark = {
								visible = "[And( Not(Character.GetFamily.IsMinor), EqualTo_int32( Character.GetCountry.GetId, Character.GetEmployer.GetId ))]" 
								text = "[Character.GetFamily.GetNumberOfJobs] / [Character.GetFamily.GetNumberOfExpectedJobs]"
								using = BaseFontM
								using = Black_FontColor
								tooltip = "[Character.GetFamily.GetWageTooltip]" 
								autoresize = yes
								align = left
								elide = right
							}
						}
						
						widget = {
							position = { 68 40 }
							size = { 42 42 }
							tooltip = "[CharacterListItem.GetSpecificSkill.GetAttributeBreakdownTooltip]" 
		
							icon = {
								size = { 48 48 }
								position = { 0 2 }
								texture = "gfx/interface/icons/icon_skills.dds"
								framesize = { 50 50 }
								frame = "[CharacterListItem.GetSpecificSkill.GetFrame]"
								parentanchor = center
							}
							
							icon = {
								framesize = { 60 32 }
								frame = "[CharacterListItem.GetSpecificSkill.GetValue]"
								texture = "gfx/interface/map/ranking_nonzero_characteristic.dds"
								parentanchor = center
								widgetanchor = center
							}
						}
						
						textbox = {
							name = "age"
							position = { -12 6 }
							multiline = no
							using = BaseFontM
							using = Black_FontColor
							autoresize = yes
							parentanchor = top|right
							widgetanchor = top|right
							align = right
							text = "[Character.GetAgeInfo]"
							tooltip = "[Character.GetAgeOnDeathOrBirthDate]"
						}

						flowcontainer = {
							position = { 209 54 }
							spacing = 8

							#Popularity
							icon_and_text_dark = {						
								size = { 90 0 }
								blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/popularity.dds" }
								blockoverride "Text" { text = "[Character.GetPopularity|0]" }
								tooltip = "[Character.GetPopularityToolTip]"
							}
							
							#Loyalty
							icon_and_text_dark = {						
								size = { 90 0 }
								blockoverride "Icon" { using = icon_loyalty }
								blockoverride "Text" { text = "[Character.GetLoyalty|0]" }
								tooltipwidget = { using = character_loyalty_tooltip }
							}
							
							#Corruption
							icon_and_text_dark = {						
								size = { 90 0 }
								blockoverride "Icon" { texture = "gfx/interface/icons/shared_icons/corruption.dds" }
								blockoverride "Text" { text = "[Character.GetCorruption|0]" }
								tooltip = "[Character.GetCorruptionToolTip]"
							}
							
							#icon_and_text_dark = {						
							#	size = { 90 0 }
							#	blockoverride "Icon" { using = icon_military }
							#	blockoverride "Text" { text = "[Character.GetMartial|0]" }
							#	tooltip = "[Character.GetMartialToolTip]"
							#}
						}
						
						dynamicgridbox = {
							datamodel = "[CharacterListItem.GetTraitItems]"
							#spacing = 4
							position = { -120 8 }
							size = { 100 60 }
							parentanchor = right
							flipdirection = yes
							item = {
								container = {
									visible = "[TraitItem.IsValid]"
									datacontext = "[TraitItem.GetTrait]"
									
									icon = {
										size = { 30 30 }
										alwaystransparent = yes
										texture = "[TraitItem.GetIcon]"
										tooltip = "[TraitItem.GetTooltip]"
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

template select_character_list_deity
{
	position = { 16 50 }
	size = { 660 500 }
	
	scrollarea = {
		
		scrollbar_vertical = {
			using = VerticalScrollBar
		}
		using = VerticalScrollAreaCutOff
		using = standard_list
		name = "envoys_scroll_area"
		
		blockoverride "ss_scrollarea"
		{
			position = { 0 0 }
			size = { 648 400 }
		}
		
		blockoverride "ss_container"
		{
			fixedgridbox = {
				name = "characters_grid"
				position = { 0 0 }
				size = { 660 510 }
				addcolumn = 640
				addrow = 94
				
				item = {
					container = {
						datacontext = "[CharacterListItem.GetCharacter]"
						enabled = "[CharacterListItem.IsSelectable]"
						tooltip = "[CharacterListItem.GetText('tooltip')]"
						
						list_button = {
							name = "select"
							position = { 0 4 }
							size = { 634 90 }
							parentanchor = vcenter
							onclick = "[CharacterListItem.OnClick('character')]"
							clicksound = "event:/SFX/UI/Character/Unique/sfx_ui_character_grant_position"		
							
						}
						
						cpt_button = {
							position = { 9 4 }
							parentanchor = vcenter
							size = { 62 90 }
						}						

						tag_dark = {
							name = "name"
							using = BaseFontM
							using = Black_FontColor
							autoresize = yes
							align = left
							text = "[Character.GetNameWithNoTooltip]"
							tooltipwidget = Character_tooltip
							size = { 220 24 }
							position = { 78 8 }
							elide = right
						}
						
						textbox = {
							name = "age"
							position = { -12 26 }
							#	size = { 80 25 }
							multiline = no
							using = BaseFontM
							using = Black_FontColor
							parentanchor = top|right
							align = right
							text = "[Character.GetAgeInfo]"
							tooltip = "[Character.GetAgeOnDeathOrBirthDate]"
						}	

						textbox = {
							name = "death_reason_box"
							visible = "[Character.IsDead]"
							align = left
							multiline = no
							using = BaseFontS
							using = Black_FontColor
							autoresize = yes
							parentanchor = right|bottom
							elide = left
							position = { -12 -20 }
							maximumsize = { 580 40 }
							text = "[Character.GetDeathReason]"
						}				
						
						overlappingitembox = {
							datamodel = "[CharacterListItem.GetTraitItems]"
							spacing = 2
							position = { 78 46 }
							size = { 234 36 }
							
							item = {
								container = {
									visible = "[TraitItem.IsValid]"
									datacontext = "[TraitItem.GetTrait]"
									
									icon = {
										size = { 34 34 }
										alwaystransparent = yes
										texture = "[TraitItem.GetIcon]"
										tooltip = "[TraitItem.GetTooltip]"
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


