### AUDIOGUIDE for Generic UI Buttons

### Default click
# event:/SFX/UI/Generic/sfx_ui_generic_click

### Default Back, Close or Cancel action (like X buttons)
# event:/SFX/UI/Generic/sfx_ui_generic_close

### Default Confirm or Advance Clicks (anything that confirms an action and has a forward effect)
# event:/SFX/UI/Generic/sfx_ui_generic_confirm

### Default click sounds for plus and minus buttons
# event:/SFX/UI/Generic/sfx_ui_generic_increment
# event:/SFX/UI/Generic/sfx_ui_generic_decrement

### Default click sound for something that is not allowed
# event:/SFX/UI/Generic/sfx_ui_generic_error
# Default click sounds for any cog icon that triggers an options menu
# event:/SFX/UI/Generic/sfx_ui_generic_game_options

### Default click sound for stopping or allowing time to play
# event:/SFX/UI/Generic/sfx_ui_generic_game_pause
# event:/SFX/UI/Generic/sfx_ui_generic_game_play

### Default click sounds for plus and minus buttons regarding time
# event:/SFX/UI/Generic/sfx_ui_generic_game_speed_down
# event:/SFX/UI/Generic/sfx_ui_generic_game_speed_up

### Default click sounds for starting a new game after selecting the initial nation
# event:/SFX/UI/Generic/sfx_ui_generic_game_start

### Default click sounds for changing map modes
# event:/SFX/UI/Generic/sfx_ui_generic_map_mode

### Default click sounds for mouse over action (required only when a button is highlighted)
# event:/SFX/UI/Generic/sfx_ui_generic_mouse_over

### Default click sounds for checkboxes or selection of items
# event:/SFX/UI/Generic/sfx_ui_generic_select

### Default click sounds for Tabs and subtabs where Tab is the first row and subtabs are all that follow below in the tree
# event:/SFX/UI/Generic/sfx_ui_generic_tab
# event:/SFX/UI/Generic/sfx_ui_generic_sub_tab


### TEMPLATES

## Fonts

# Dark Font
template MarbleButtonFontS
{
	fontsize = 16
	font = BaseFont
	using = MarbleFontColor
}

template MarbleButtonFont
{
	fontsize = 18
	font = BaseFont
	using = MarbleFontColor	
}

template MarbleButtonFontM
{
	fontsize = 20
	font = BaseFont
	using = MarbleFontColor
}

template MarbleButtonFontL
{
	fontsize = 24
	font = BaseFont
	using = MarbleFontColor
}

# Yellow Font
template BlackMarbleFont
{
	fontsize = 20
	font = BaseFont
	using = BlackMarbleFontColor
}

# Gold Font
template BlacklSilkFont
{
	fontsize = 16
	font = BaseFont
	using = BlackMarbleFontColor
}

# White Font
template WhiteFont
{
	fontsize = 18
	font = BaseFont
	using = WhiteFontColor
}

# Red Font
template RedFont
{
	fontsize = 22
	font = BaseFont
	using = RedFontColor
}

# For Unit Banners And Highlighted Text
template GoldenFontL
{
	fontsize = 18
	font = BaseFont
	using = LightGold
}

template GoldenFontS
{
	fontsize = 17
	font = BaseFont
	using = LightGold
}

template GoldenFontMB
{
	fontsize = 16
	font = BaseFont
	using = LightGold
}

template GoldenFontSB
{
	fontsize = 14
	font = BaseFont
	using = LightGold
}

# For Pop Ups
template ScrollFont
{
	fontsize = 20
	font = BaseFont
	using = ScrollFontColor1
}

template ScrollFontL
{
	fontsize = 25
	font = BaseFont
	using = ScrollFontColor1
}

template ScrollFontS
{
	fontsize = 16
	font = BaseFont
	using = ScrollFontColor1
}

## Font Colors

template MarbleFontColor
{
	fontcolor = { 0 0 0 1 }
}

template WhiteFontColor
{
	fontcolor = { 1 1 1 1 }
}

template RedFontColor
{
	fontcolor = { 0.95 0.2 0.2 1 }
}

template BlackMarbleFontColor
{
	fontcolor = { 1 0.839216 0.615686 1 }
}

template BlackSilkFontColor
{
	fontcolor = { 0.909804 0.768627 0.364706 1 }
}

template HighlightFontColor
{
	fontcolor = { 0 0 0 1 }
}

template ScrollFontColor1
{
	fontcolor = { 0.270588 0.2 0.152941 1 }
}

template LightGold
{
	#fontcolor = { 0.980392 0.85098 0.588235 1 }
	fontcolor = { 0.95 0.75 0.4 1 }
}

template TEMPFONT
{
	fontcolor = { 1 1 1 1 }
}









## Shared icons used in many different locations

template icon_PLACEHOLDER
{
	texture = "gfx/interface/icons/_default.dds"
	size = { 36 36 }
}

template icon_minus
{
	texture = "gfx/interface/icons/shared_icons/minus.dds"
	size = { 45 45 }
}

template icon_plus
{
	texture = "gfx/interface/icons/shared_icons/plus.dds"
	size = { 45 45 }
}

template icon_military_experience
{
	texture = "gfx/interface/icons/shared_icons/military_experience.dds"
}

template icon_political_influence
{
	texture = "gfx/interface/icons/shared_icons/political_influence.dds"
	size = { 50 50 }
}

template icon_locked
{
	texture = "gfx/interface/icons/shared_icons/locked.dds"
	size = { 50 50 }
}

template icon_unlocked
{
	texture = "gfx/interface/icons/shared_icons/unlocked.dds"
	size = { 50 50 }
}

template icon_ironman
{
	texture = "gfx/interface/icons/shared_icons/ironman.dds"
	Framesize = { 50 50 }
	size = { 50 50 }
}

template icon_different_version
{
	texture = "gfx/interface/icons/shared_icons/wrong_version.dds"
	Framesize = { 50 50 }
	size = { 50 50 }
}


template icon_age
{
	texture = "gfx/interface/icons/shared_icons/age.dds"
}

template icon_achieve
{
	texture = "gfx/interface/icons/shared_icons/achieve.dds"
	Framesize = { 50 50 }
	size = { 50 50 }
}

template icon_state_capital
{
	texture = "gfx/interface/map/capital.dds"
}

template icon_country_capital
{
	texture = "gfx/interface/icons/icon_alpha/star_filled_white.dds" #TODO 
	#icon = {
	#	size = { 100% 100% }
	#	texture = "gfx/interface/map/capital.dds"
	#	parentanchor = center
	#	position = { -1 0 }
	#}
}

template icon_legitimacy
{
	texture = "gfx/interface/icons/shared_icons/legitimacy.dds"
}

template icon_settlement
{
	texture = "gfx/interface/icons/shared_icons/settlement.dds"
	size = { 50 50 }
}

template icon_city
{
	texture = "gfx/interface/icons/shared_icons/city.dds"
}

template icon_metropolis
{
	texture = "gfx/interface/icons/shared_icons/metropolis.dds"
	size = { 50 50 }
}

template icon_food
{
	texture = "gfx/interface/icons/shared_icons/food.dds"
	size = { 50 50 }
}

template icon_food_capacity
{
	texture = "gfx/interface/icons/shared_icons/food_capacity.dds"
	size = { 50 50 }
}

template icon_local
{
	texture = "gfx/interface/icons/shared_icons/local.dds"
	size = { 50 50 }
}

template icon_centralization
{
	texture = "gfx/interface/icons/shared_icons/centralization.dds"
}

template icon_clan_chiefs
{
	texture = "gfx/interface/icons/shared_icons/clan_chiefs.dds"
}

template icon_population
{
	texture = "gfx/interface/icons/shared_icons/population.dds"
}

template icon_chance
{
	texture = "gfx/interface/icons/shared_icons/chance.dds"
	size = { 50 50 }
}

template icon_crossing
{
	texture = "gfx/interface/icons/_default.dds"
	size = { 50 50 }
}

template icon_terrain
{
	texture = "gfx/interface/icons/_default.dds"
	size = { 50 50 }
}

template icon_leader
{
	texture = "gfx/interface/icons/shared_icons/leader.dds"
	size = { 50 50 }
}

template icon_land_combat
{
	texture = "gfx/interface/icons/shared_icons/land_combat.dds"
	size = { 50 50 }
}

template icon_cost
{
	texture = "gfx/interface/icons/shared_icons/cost.dds"
	size = { 50 50 }
}

template icon_defence
{
	texture = "gfx/interface/icons/shared_icons/defence.dds"
	size = { 50 50 }
}

template icon_diplomacy
{
	texture = "gfx/interface/icons/shared_icons/diplomacy.dds"
	size = { 50 50 }
}

template icon_corruption
{
	texture = "gfx/interface/icons/shared_icons/corruption.dds"
}

template icon_morale
{
	texture = "gfx/interface/icons/shared_icons/morale.dds"
}

template icon_naval_combat
{
	texture = "gfx/interface/icons/shared_icons/naval_combat.dds"
	size = { 50 50 }
}

template icon_omen
{
	texture = "gfx/interface/icons/shared_icons/omen.dds"
	size = { 50 50 }
}

template icon_decision
{
	texture = "gfx/interface/icons/shared_icons/decision.dds"
	size = { 50 50 }
}

template icon_naval_range
{
	texture = "gfx/interface/icons/shared_icons/naval_range.dds"
	size = { 50 50 }
}

template icon_power_base
{
	texture = "gfx/interface/icons/shared_icons/power_base.dds"
}

template icon_coordinate_urban_development
{
	texture = "gfx/interface/icons/shared_icons/coordinate_urban_development.dds"
	size = { 50 50 }
}

template icon_civic
{
	texture = "gfx/interface/icons/shared_icons/civic.dds"
}

template icon_manpower
{
	texture = "gfx/interface/icons/shared_icons/manpower.dds"
	size = { 50 50 }
}

template icon_military
{
	texture = "gfx/interface/icons/shared_icons/military.dds"
}

template icon_oratory
{
	texture = "gfx/interface/icons/shared_icons/oratory.dds"
}

template icon_religious
{
	texture = "gfx/interface/icons/shared_icons/faith.dds"
}

template icon_culture
{
	texture = "gfx/interface/icons/governor_policies/cultural_assimilation.dds"
}

template icon_poptype
{
	texture = "gfx/interface/icons/shared_icons/pop_type.dds" 
}

template icon_roman_eagle
{
	texture = "gfx/interface/icons/shared_icons/roman_eagle.dds"
	size = { 50 50 }
}

template icon_research
{
	texture = "gfx/interface/icons/shared_icons/research.dds"
}

template icon_stability
{
	texture = "gfx/interface/icons/shared_icons/stability.dds"
}

template icon_statesmanship
{
	texture = "gfx/interface/icons/shared_icons/statesmanship.dds"
}

template icon_treasury
{
	texture = "gfx/interface/icons/shared_icons/treasury.dds"
}

template icon_tyranny
{
	texture = "gfx/interface/icons/shared_icons/tyranny.dds"
	size = { 50 50 }
}

template icon_health
{
	texture = "gfx/interface/icons/modifiers/health.dds"
}

template icon_unrest
{
	texture = "gfx/interface/icons/shared_icons/unrest.dds"
	size = { 50 50 }
}

template icon_garrison
{
	texture = "gfx/interface/icons/shared_icons/garrison.dds"
}

template icon_fortification
{
	texture = "gfx/interface/icons/shared_icons/fortification.dds"
}

template icon_loyalty
{
	texture = "gfx/interface/icons/shared_icons/loyalty.dds"
}

template icon_food_deficiency
{
	texture = "gfx/interface/icons/shared_icons/food_deficiency.dds"
	size = { 50 50 }
}

template icon_disloyal_powerbase
{
	texture = "gfx/interface/icons/shared_icons/disloyal_power_base.dds"
	size = { 50 50 }
}

template icon_civilization
{
	texture = "gfx/interface/icons/shared_icons/civilization.dds"
}

template icon_barbarian_power
{
	texture = "gfx/interface/icons/shared_icons/barbarian_power.dds"
	size = { 50 50 }
}

template icon_time
{
	texture = "gfx/interface/icons/shared_icons/time.dds"
}

template icon_pop_type
{
	texture = "gfx/interface/icons/shared_icons/pop_type.dds"
	size = { 50 50 }
}

template icon_attrition
{
	texture = "gfx/interface/icons/shared_icons/attrition.dds"
}

template icon_aggressive_expansion
{
	texture = "gfx/interface/icons/shared_icons/aggressive_expansion.dds"
	size = { 50 50 }
}

template icon_siege
{
	texture = "gfx/interface/icons/shared_icons/siege.dds"
	size = { 50 50 }
}

template icon_exiles
{
	texture = "gfx/interface/icons/shared_icons/exiles.dds"
	size = { 50 50 }
}

template icon_retreating
{
	texture = "gfx/interface/icons/shared_icons/retreating.dds"
	size = { 50 50 }
}

template icon_popularity
{
	texture = "gfx/interface/icons/shared_icons/popularity.dds"
}

template icon_prominence
{
	texture = "gfx/interface/icons/shared_icons/prominence.dds"
	size = { 50 50 }
}

template icon_bankruptcy
{
	texture = "gfx/interface/icons/shared_icons/bankruptcy.dds"
}

template icon_arrow_right
{
	texture = "gfx/interface/icons/shared_icons/arrow_right.dds"
	size = { 50 50 }
}

template icon_arrow_left
{
	texture = "gfx/interface/icons/shared_icons/arrow_left.dds"
	size = { 50 50 }
}

template icon_arrow_up
{
	texture = "gfx/interface/icons/shared_icons/arrow_up.dds"
	size = { 50 50 }
}

template icon_arrow_down
{
	texture = "gfx/interface/icons/shared_icons/arrow_down.dds"
	size = { 50 50 }
}

template icon_missing_dlc
{
	texture = "gfx/interface/icons/shared_icons/missing_dlc.dds"
	size = { 50 50 }
}

template icon_pop_nobles
{
	texture = "gfx/interface/icons/pop_types/nobles.dds"
}

template icon_pop_citizens
{
	texture = "gfx/interface/icons/pop_types/citizen.dds"
}

template icon_pop_freemen
{
	texture = "gfx/interface/icons/pop_types/freemen.dds"
}

template icon_pop_tribal
{
	texture = "gfx/interface/icons/pop_types/tribesmen.dds"
}

template icon_pop_slaves
{
	texture = "gfx/interface/icons/pop_types/slaves.dds"
}

template icon_character_sex
{
	texture = "gfx/interface/icons/shared_icons/character_sex.dds"
	framesize = { 34 34 }
}

template icon_pop_upper_strata
{
	texture = "gfx/interface/icons/pop_types/upper_strata.dds"
}

template icon_pop_middle_strata
{
	texture = "gfx/interface/icons/pop_types/middle_strata.dds"
}

template icon_pop_proletariat
{
	texture = "gfx/interface/icons/pop_types/proletariat.dds"
}

template icon_pop_lower_strata
{
	texture = "gfx/interface/icons/pop_types/lower_strata.dds"
}

template icon_pop_indentured
{
	texture = "gfx/interface/icons/pop_types/indentured.dds"
}







## Top Bar Button Spacing (Change X value)

template top_bar_button_spacing
{
	position = { 0 -8 }
}

template top_bar_button_shade_spacing
{
	position = { -3 -12 }
	texture = "gfx/interface/topbar/top_bar_button_frame_big.dds"
}


## Click Through Blocker

template clickthrough_blocker
{
	alwaystransparent = no
	filter_mouse = left
}



## Progress Bars


template progressbar_green_vertical
{
	progresstexture = "gfx/interface/tiles/progressbar_green_tile_v.dds"
	spriteType = Corneredtiled
	spriteborder = { 0 0 }
	direction = vertical
	
	icon = {
		name = "overlay"
		texture = "gfx/interface/tiles/progressbar_overlay_v.dds"
		spriteType = Corneredtiled
		spriteborder = { 7 0 }
		parentanchor = center
		size = { 100% 100% }
		position = { 0 0 }
	}
}

template progressbar_yellow_vertical
{
	progresstexture = "gfx/interface/tiles/progressbar_yellow_tile_v.dds"
	spriteType = Corneredtiled
	spriteborder = { 0 0 }
	direction = vertical
	
	icon = {
		name = "overlay"
		texture = "gfx/interface/tiles/progressbar_overlay_v.dds"
		spriteType = Corneredtiled
		spriteborder = { 7 0 }
		parentanchor = center
		size = { 100% 100% }
		position = { 0 0 }
	}
}

template progressbar_red_vertical
{
	progresstexture = "gfx/interface/tiles/progressbar_red_tile_v.dds"
	spriteType = Corneredtiled
	spriteborder = { 0 0 }
	direction = vertical
	
	icon = {
		name = "overlay"
		texture = "gfx/interface/tiles/progressbar_overlay_v.dds"
		spriteType = Corneredtiled
		spriteborder = { 7 0 }
		parentanchor = center
		size = { 100% 100% }
		position = { 0 0 }
	}
}

template progressbar_green_horizontal
{
	progresstexture = "gfx/interface/tiles/progressbar_green_tile.dds"
#	noprogresstexture = "gfx/interface/tiles/tile_progress_empty.dds"

	block "L_bar"
	{
		spriteType = Corneredtiled
		spriteborder = { 0 0 }
	}
	
	icon = {
		name = "overlay"
		texture = "gfx/interface/tiles/progressbar_overlay.dds"
		spriteType = Corneredstretched
		spriteborder = { 7 0 }
		parentanchor = center
		size = { 100% 100% }
		position = { 0 0 }
	}
}

template progressbar_green_horizontal_rb
{
	progresstexture = "gfx/interface/tiles/progressbar_green_tile.dds"
	noprogresstexture = "gfx/interface/tiles/progressbar_red_tile.dds"

	block "L_bar"
	{
		spriteType = Corneredtiled
		spriteborder = { 0 0 }
	}
	spriteborder = { 22 -2 }
	icon = {
		name = "overlay"
		texture = "gfx/interface/tiles/progressbar_overlay.dds"
		spriteType = Corneredstretched
		spriteborder = { 7 0 }
		parentanchor = center
		size = { 100% 100% }
		position = { 0 0 }
		
	}
}

template progressbar_green_horizontal_opaque
{
	progresstexture = "gfx/interface/tiles/progressbar_green_tile.dds"
#	noprogresstexture = "gfx/interface/tiles/tile_progress_empty.dds"

	block "L_bar" 
	{
		spriteType = Corneredtiled
		spriteborder = { 0 0 }
	}
	
	#icon = {
	#	name = "overlay"
	#	texture = "gfx/interface/tiles/progressbar_overlay_opaque.dds"
	#	spriteType = Corneredstretched
	#	spriteborder = { 7 0 }
	#	parentanchor = center
	#	size = { 100% 100% }
	#	position = { 0 0 }
	#	#alpha = 0
	#}
}

template progressbar_green_horizontal_fat
{
	progresstexture = "gfx/interface/tiles/progressbar_green_tile_fat.dds"  
#	noprogresstexture = "gfx/interface/tiles/tile_progress_empty.dds"

	block "L_bar"
	{
		spriteType = Corneredtiled
		spriteborder = { 0 0 }
	}
	
	icon = {
		name = "overlay"
		texture = "gfx/interface/tiles/progressbar_overlay.dds"
		spriteType = Corneredstretched
		#spriteborder = { 7 0 }
		parentanchor = center
		size = { 100% 100% }
		position = { 0 0 }
	}
}

template morale_progressbar_bar
{
	progresstexture = "gfx/interface/tiles/morale_progress_bar_l_green.dds"  
#	noprogresstexture = "gfx/interface/tiles/tile_progress_empty.dds"

	spriteType = Corneredtiled
	spriteborder = { 0 0 }
	
	icon = {
		name = "overlay"
		texture = "gfx/interface/tiles/progressbar_overlay.dds"
		spriteType = Corneredstretched
		#spriteborder = { 7 0 }
		parentanchor = center
		size = { 100% 100% }
		position = { 0 0 }
	}
}

template state_loyalty_progressbar_bar
{
	progresstexture = "gfx/interface/tiles/morale_progress_bar_l_green.dds"  
#	noprogresstexture = "gfx/interface/tiles/tile_progress_empty.dds"

	spriteType = Corneredtiled
	spriteborder = { 0 0 }
	
	icon = {
		name = "overlay"
		texture = "gfx/interface/tiles/progressbar_overlay.dds"
		spriteType = Corneredstretched
		#spriteborder = { 7 0 }
		parentanchor = center
		size = { 100% 100% }
		position = { 0 0 }
	}
}

template state_loyalty_progressbar_bar_red
{
	progresstexture = "gfx/interface/tiles/morale_progress_bar_l_red.dds"  
#	noprogresstexture = "gfx/interface/tiles/tile_progress_empty.dds"

	spriteType = Corneredtiled
	spriteborder = { 0 0 }
	
	icon = {
		name = "overlay"
		texture = "gfx/interface/tiles/progressbar_overlay.dds"
		spriteType = Corneredstretched
		#spriteborder = { 7 0 }
		parentanchor = center
		size = { 100% 100% }
		position = { 0 0 }
	}
}


template progressbar_yellow_horizontal
{
	progresstexture = "gfx/interface/tiles/progressbar_yellow_tile.dds"
#	noprogresstexture = "gfx/interface/tiles/tile_progress_empty.dds"
	spriteType = Corneredtiled
	spriteborder = { 0 0 }
	
	icon = {
		name = "overlay"
		texture = "gfx/interface/tiles/progressbar_overlay.dds"
		spriteType = Corneredstretched
		spriteborder = { 7 0 }
		parentanchor = center
		size = { 100% 100% }
		position = { 0 0 }
	}
}

template progressbar_red_horizontal
{
	progresstexture = "gfx/interface/tiles/progressbar_red_tile.dds"
#	noprogresstexture = "gfx/interface/tiles/tile_progress_empty.dds"
	spriteType = Corneredtiled
	spriteborder = { 0 0 }
	
	icon = {
		name = "overlay"
		texture = "gfx/interface/tiles/progressbar_overlay.dds"
		spriteType = Corneredstretched
		spriteborder = { 7 0 }
		parentanchor = center
		size = { 100% 100% }
		position = { 0 0 }
	}
}


template unit_view_moral_bar_green
{
	progresstexture = "gfx/interface/unit_view/moral_bar_green.dds"
	noprogresstexture = "gfx/interface/unit_view/moral_bar_transparent.dds"
	spriteType = Corneredtiled
	size = { 10 114 }
	direction = vertical
}

template unit_view_moral_bar_red
{
	progresstexture = "gfx/interface/unit_view/moral_bar_red.dds"
	noprogresstexture = "gfx/interface/unit_view/moral_bar_transparent.dds"
	spriteType = Corneredtiled
	size = { 10 114 }
	direction = vertical
}

template unit_view_moral_bar_yellow
{
	progresstexture = "gfx/interface/unit_view/moral_bar_yellow.dds"
	noprogresstexture = "gfx/interface/unit_view/moral_bar_transparent.dds"
	spriteType = Corneredtiled
	size = { 10 114 }
	direction = vertical
}

template progress_bar_yellow_buildings
{
	progresstexture = "gfx/interface/tiles/yellow_bar.dds"
	size = { 190 30 }
}

template unit_view_experience_bar
{
	progresstexture = "gfx/interface/unit_view/experience_bar_green.dds"
	noprogresstexture = "gfx/interface/unit_view/moral_bar_transparent.dds"
	spriteType = Corneredtiled
	size = { 5 40 }
	direction = vertical
}

template unit_view_morale_bar
{
	progresstexture = "gfx/interface/unit_view/experience_bar_green.dds"
	noprogresstexture = "gfx/interface/unit_view/moral_bar_transparent.dds"
	spriteType = Corneredtiled
	size = { 5 40 }
	direction = vertical
}

template building_bar
{
	progresstexture = "gfx/interface/map/small_bar_green_h.dds"
	noprogresstexture = "gfx/interface/unit_view/moral_bar_transparent.dds"
	spriteType = Corneredtiled
	size = { 40 5 }
	direction = horizontal
}



template progress_bar_yellow_pops
{
	progresstexture = "gfx/interface/tiles/yellow_bar_s.dds"
	size = { 62 30 }
}

template progress_bar_unit_onmap
{
	progresstexture = "gfx/interface/tiles/yellow_bar_s_square.dds"
	size = { 62 30 }
}



## Backgrounds

# Message Background

template ScrollMessageBackground
{
	background = {
		name = "bg"
		texture = "gfx/interface/tiles/scroll_bg_tile.dds"
		spriteType = Corneredtiled
		position = { 0 0 }
		spriteborder = { 128 128 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
		
		block "margins_1"
		{
			margin_left = -4
			margin_top = -10
			margin_bottom = -10
		}
	}
	
	background = {
		name = "frame"
		position = { 0 0 }
		texture = "gfx/interface/tiles/scroll_corner_tile2.dds"
		spriteType = Corneredtiled
		shaderfile = "gfx/FX/pdxgui_default.shader"
		spriteborder = { 60 60 }
		
		block "margins_2"
		{
			margin_left = 20
			margin_right = 20
			margin_top = 26
			margin_bottom = 28
		}
	}
}

# For Event Window

template ScrollMessageBackground_2
{
	background = {
		name = "bg"
		texture = "gfx/interface/tiles/scroll_bg_tile.dds"
		spriteType = Corneredtiled
		position = { 0 0 }
		spriteborder = { 128 128 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
		margin_left = -4
		margin_top = 5
		margin_bottom = 5
	}
	background = {
		name = "frame"
		position = { 0 0 }
		texture = "gfx/interface/tiles/scroll_corner_tile2.dds"
		spriteType = Corneredtiled
		shaderfile = "gfx/FX/pdxgui_default.shader"
		spriteborder = { 60 60 }
		margin_left = 20
		margin_right = 20
		margin_top = 41
		margin_bottom = 43
	}
}

template ScrollMessageBackground_2_small
{
	background = {
		name = "bg"
		texture = "gfx/interface/tiles/scroll_bg_tile.dds"
		spriteType = Corneredtiled
		position = { 0 0 }
		spriteborder = { 128 128 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
		margin_left = -4
		margin_top = 3
		margin_bottom = 2
	}
	background = {
		name = "frame"
		position = { 0 0 }
		texture = "gfx/interface/tiles/scroll_corner_tile2_small.dds"
		spriteType = Corneredtiled
		shaderfile = "gfx/FX/pdxgui_default.shader"
		spriteborder = { 42 42 }
		margin_left = 20
		margin_right = 20
		margin_top = 26
		margin_bottom = 24
	}
}

# Large Window Frame

template Large_window_type
{
	
	background = {
		texture = "gfx/interface/tiles/marble_tile_l.dds"
		spriteType = Corneredtiled
		spriteborder = { 0 0 }
		margin = { -31 -18 }
		margin_top = -59
		shaderfile = "gfx/FX/pdxgui_default.shader"
	}
	
	background = {
		texture = "gfx/interface/tiles/main_bg_corner_tiles.dds"
		spriteType = Corneredtiled
		margin_top = -41
		spriteborder = { 80 90 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
	}
	
	icon = {
		name = "left_decore"
		position = { 1 0 }
		texture = "gfx/interface/tiles/top_decore_left.dds"
	}
	
	icon = {
		name = "left_extension"
		position = { 80 0 }
		texture = "gfx/interface/tiles/top_decore_center.dds"
		spriteType = Corneredtiled
		
		block "width_L"
		{
			size = { 320 64 }
		}
	}
	
	icon = {
		name = "right_decore"
		position = { -2 0 }
		texture = "gfx/interface/tiles/top_decore_right.dds"
		widgetanchor = top|right
		parentanchor = top|right
	}
	
	icon = {
		name = "right_extension"
		position = { -80 0 }
		texture = "gfx/interface/tiles/top_decore_center.dds"
		spriteType = Corneredtiled
		widgetanchor = top|right
		parentanchor = top|right
		
		block "width_R"
		{
			size = { 320 64 }
		}		
	}
	
	icon = {
		name = "header_bg"
		position = { 0 5 }
		
		block "header_width"
		{
			size = { 440 54 }
		}			
		
		texture = "gfx/interface/tiles/header_bg_tile.dds"
		spriteType = Corneredtiled
		spriteborder = { 36 0 }
		parentanchor = hcenter
		
		heading_text = {
			name = "title"
			position = { 0 10 }
			parentanchor = top|hcenter
			widgetanchor = top|hcenter
			align = center
			
			block "header_text_width"
			{
				size = { 400 26 }
			}
			
			block "header"
			{
				text = "gov_name"
			}
		}
	}
	
	icon = {
		name = "header_close_base"
		position = { -7 5 }
		texture = "gfx/interface/tiles/top_decore_close_base.dds"
		parentanchor = top|right
		widgetanchor = top|right
	}

}




# Small Window Frame

template small_window_type
{
	
	background = {
		block "Background_tint"
		{
			texture = "gfx/interface/tiles/marble_tile_l.dds"
			spriteType = Corneredtiled
			spriteborder = { 0 0 }
			margin = { -6 -6 }
			shaderfile = "gfx/FX/pdxgui_default.shader"
		}
	}
	
	icon = {
		texture = "gfx/interface/tiles/small_window_frame_corners.dds"
		spriteType = Corneredtiled
		position = { 0 0 }
		size = { 100% 100% }
		spriteborder = { 32 24 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
	}
}



# Small Window Frame with Pillars (No Background)

template small_window_p_type
{
	icon = {
		texture = "gfx/interface/tiles/small_window_frame_p_corners.dds"
		spriteType = Corneredtiled
		position = { 0 38 }
		size = { 100% 100% }
		spriteborder = { 32 24 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
	}
	
	icon = {
		texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
		spriteType = Corneredtiled
		position = { 0 0 }
		size = { 100% 51 }
		spriteborder = { 16 0 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
	}
	
		icon = {
		texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
		spriteType = Corneredtiled
		position = { 0 -40 }
		size = { 100% 51 }
		spriteborder = { 16 0 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
	}

}

template small_window_columns_type
{
	icon = {
		texture = "gfx/interface/tiles/small_window_frame_p_corners.dds"
		spriteType = Corneredtiled
		position = { 0 38 }
		size = { 100% 100% }
		spriteborder = { 32 24 }
		shaderfile = "gfx/FX/pdxgui_default.shader"
	}

}




# Checkbox Button

template check_button
{
    gfxtype = checkbuttongfx
    shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
    texture = "gfx/interface/buttons/checkbox.dds"
    framesize = { 36 36 }
}


template BackgroundMapModeText
{
	icon = {
		name = "bg"
		texture = "gfx/interface/tiles/black_marble_texture_tile.dds"
		spriteType = Corneredtiled
		spriteborder = { 0 0 }
		size = { 100% 100% }
	}
}

template BackgroundMapModeTextSelected
{
	icon = {
		name = "bg"
		texture = "gfx/interface/tiles/black_marble_texture_tile.dds"
		spriteType = Corneredtiled
		spriteborder = { 0 0 }
		size = { 100% 100% }
		
		modify_texture = {
			name = "mask"
			texture = "gfx/interface/tiles/black_marble_bg2_tile_mask.dds"
			spriteType = Corneredtiled
			spriteborder = { 15 15 }
			blend_mode = alphamultiply
		}
	}
	icon = {
		name = "frame"
		texture = "gfx/interface/tiles/black_marble_bg2_corners.dds"
		spriteType = Corneredtiled
		spriteborder = { 92 92 }
		size = { 100% 100% }
	}
}

## Scroll Bar

template MarbleScrollBar
{
	scrollbar = {
		size = { 10 10 }
		wheelstep = 30
		direction = vertical
		
		track = {
			button = {
				gfxtype = framedbuttongfx
				spriteborder = { 0 10 }
				spriteType = Corneredtiled
				effectname = "NoHighlight"
				framesize = { 10 30 }
				upframe = 1
				overframe = 1
				downframe = 2
				disableframe = 1
				texture = "gfx/interface/marble_scrollbar_track.dds"
			}
		}
		
		slider = {
			button = {
				gfxtype = framedbuttongfx
				framesize = { 10 50 }
				effectname = "NoHighlight"
				upframe = 1
				overframe = 2
				downframe = 3
				disableframe = 4
				texture = "gfx/interface/marble_scrollbar_slider.dds"
			}
		}
		
		dec_button = {
			button = {
				block "ScrollBar_offset"
				{				
					size = { 0 0 }
				}
			}
		}
		
		inc_button = {
			button = {
				block "ScrollBar_offset"
				{
					size = { 0 0 }
				}
			}
		}
	}
}

template MarbleScrollBarHorizontal
{
	scrollbar = {
		size = { 10 10 }
		wheelstep = 30
		direction = horizontal
		
		track = {
			button = {
				gfxtype = framedbuttongfx
				spriteborder = { 10 0 }
				spriteType = Corneredtiled
				effectname = "NoHighlight"
				framesize = { 30 10 }
				upframe = 2
				overframe = 2
				downframe = 1
				disableframe = 2
				texture = "gfx/interface/marble_scrollbar_track_horizontal.dds"
			}
		}
		
		slider = {
			button = {
				gfxtype = framedbuttongfx
				framesize = { 50 10 }
				effectname = "NoHighlight"
				upframe = 4
				overframe = 3
				downframe = 2
				disableframe = 1
				texture = "gfx/interface/marble_scrollbar_slider_horizontal.dds"
			}
		}
		
		dec_button = {
			button = {
				block "ScrollBar_offset"
				{				
					size = { 0 0 }
				}
			}
		}
		
		inc_button = {
			button = {
				block "ScrollBar_offset"
				{
					size = { 0 0 }
				}
			}
		}
	}
}

template RopeScrollBar
{
	scrollbar = {
		size = { 10 10 }
		wheelstep = 30
		direction = vertical
		
		track = {
			button = {
				gfxtype = framedbuttongfx
				spriteborder = { 0 10 }
				spriteType = Corneredtiled
				effectname = "NoHighlight"
				framesize = { 10 30 }
				upframe = 1
				overframe = 1
				downframe = 2
				disableframe = 1
			}
		}
		
		slider = {
			button = {
				gfxtype = framedbuttongfx
				framesize = { 9 50 }
				effectname = "NoHighlight"
				upframe = 1
				overframe = 2
				downframe = 3
				disableframe = 4
				texture = "gfx/interface/rope_scrollbar_slider.dds"
			}
		}
		
		dec_button = {
			button = {
				size = { 0 0 }
			}
		}
		
		inc_button = {
			button = {
				size = { 0 0 }
			}
		}
	}
}




# Event Button

# Increase width by incriments of 40 px
template eventbutton
{
	# For Standard Event Options
	text_button_square = {
		size = { 550 28 } 
		visible = "[Not(EventOption.IsHighlighted)]"
		blockoverride "On_click"
		{
			onclick = "[EventOption.Select]"
		}
		blockoverride "ClickSound"
		{
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		}
		blockoverride "Center_text" { 
			text = "[EventOption.GetText]" 
			elide = right
			fontsize_min = 12
			max_width = 500
		}
		tooltip = "[EventOption.GetTooltip]"
	}
	
	# For Highlighted Event Options
	
	text_button_square_highlighted = {
		size = { 550 28 }
		visible = "[EventOption.IsHighlighted]"
		blockoverride "On_click"
		{
			onclick = "[EventOption.Select]"
		}
		blockoverride "Highlight" { alpha = 0.4 }
		blockoverride "ClickSound"
		{
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		}
		blockoverride "Center_text" { text = "[EventOption.GetText]" }
		tooltip = "[EventOption.GetTooltip]"
	}
	
	
	
	fixedgridbox = {
		name = "effects_grid"
		position = { -25 -2 }
		size = { 33 200 }
		addcolumn = 33
		addrow = 33
		maxhorizontalslots = 10
		maxverticalslots = 10
		datamodel = "[EventOption.Effects]"
		flipdirection = yes
		parentanchor = top|right
		widgetanchor = top|right

		item = {
			container = {
				container = {
					alwaystransparent = yes
					visible = "[OptionEffectItem.IsTrait]"
					icon = {
						size = { 32 32 }
						texture = "[OptionEffectItem.GetTraitItem.GetIcon]"
						tooltip = "[OptionEffectItem.GetTraitItem.GetTooltip]"
					}
					icon = {
						visible = "[OptionEffectItem.IsGain]"
						using = icon_plus
						position = { -12 16 }
					}
					icon = {
						visible = "[OptionEffectItem.IsLoss]"
						using = icon_minus
						position = { -12 16  }
					}
				}
				
				icon = {
					name = "death"
					visible = [OptionEffectItem.IsDeath]
					size = { 32 32 }
					using = icon_attrition
				}
			}
		}
	}

	
	
	
}

template minoreventbutton
{
	# For Standard Event Options
	button_standard_white_marble_s = {
		visible = "[Not(EventOption.IsHighlighted)]"
		text = "[EventOption.GetText]"
		tooltip = "[EventOption.GetTooltip]"
		gfxtype = buttongfx
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"

		onclick = "[EventOption.Select]"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		texture = "gfx/interface/tiles/marble_button_s.dds"
		spriteType = Corneredtiled
		size = { 340 38 }
		
		buttonText = {
			textbox = {
				parentanchor = bottom|hcenter
				using = MarbleButtonFontS
				autoresize = yes
				position = { 0 -13 }
			}
		}
		
		
		
	}
	
	# For Highlighted Event Options
	button_standard_white_marble_g_s = {
		visible = "[EventOption.IsHighlighted]"
		text = "[EventOption.GetText]"
		tooltip = "[EventOption.GetTooltip]"
		gfxtype = buttongfx
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		
		onclick = "[EventOption.Select]"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"

		spriteType = Corneredtiled
		spriteborder = { 40 0 }
		size = { 340 38 }
		
		buttonText = {
			textbox = {
				parentanchor = bottom|hcenter
				autoresize = yes
				position = { 0 -13 }
				using = GoldenFontS
				default_format = "#glow_color:{0.0,0.0,0.0,0.3};glow_offset:{0.0,0.0}"
			}
		}
	}
}

template inset_frame
{
	texture = "gfx/interface/tiles/list_slot_corner_tiles.dds"
	spriteType = Corneredtiled
	spriteborder = { 10 10 }
}

template internal_country_flag
{
	icon = {
		name = "shadow"
		texture = "gfx/interface/map/flag_shadow.dds"
		
		block "size"
		{
			size = { 120 120 }
		}
	}

	icon = {
		block "show_as_icon"
		{
			visible = no
		}
		block "flag_contents"
		{
		}
	}
	button = {
		inherit_visual_state = no
		distribute_visual_state = no
		
		block "click"
		{
		
		}
		
		block "show_as_button"
		{
			visible = yes
		}
		block "flag_contents"
		{
		}
	}
}

### TYPES

types Standard_Types
{
	type progresspie = progressbar {
		gfxtype = progresspiegfx
		shaderfile = "gfx/FX/gui_progresspie.shader"
		using = tooltip_es
	}

	type pieslice = pieslice {
		gfxtype = pieslicegfx
		shaderfile = "gfx/FX/pdxgui_piechart.shader"
		mask = "gfx/interface/default_piechart_mask.dds"
		using = tooltip_es
	}
	
	
	
	## Buttons
	
	# Standard Button
	
	# Increase width by incriments of 40 px
	type button_standard_white_marble = button {
		text = "Words.."
		# 	gfxtype = framedbuttongfx
		gfxtype = buttongfx
		#	effectname = "NoHighlight"
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
		#	upframe = 1
		#	overframe = 2
		#	downframe = 3
		#	disableframe = 4
		texture = "gfx/interface/tiles/text_button_tiles.dds"
		#	framesize = { 120 42 }
		spriteType = Corneredtiled
		spriteborder = { 80 0 }
		size = { 200 46 }
		
		buttonText = {
			textbox = {
				parentanchor = bottom|hcenter
				using = MarbleButtonFont
				autoresize = yes
				position = { 0 -13 }
			}
		}
	
	#	icon = {
	#		name = "overlay"
	#		texture = "gfx/interface/buttons/button_standard_overlay.dds"
	#		spriteType = Corneredstretched
	#		spriteborder = { 40 0 }
	#		parentanchor = center
	#		size = { 100% 100% }
	#	}
	}
	
	type button_standard_white_marble_s = button {
		text = "Words.."
		gfxtype = buttongfx
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
		#	upframe = 1
		#	overframe = 2
		#	downframe = 3
		#	disableframe = 4
		texture = "gfx/interface/tiles/marble_button_s.dds"
		spriteType = Corneredtiled
		spriteborder = { 60 0 }
		size = { 174 38 }
		
		buttonText = {
			textbox = {
				parentanchor = bottom|hcenter
				using = MarbleButtonFont
				autoresize = yes
				position = { 0 -12 }
			}
		}
	}
	
	# Category Buttons
	
	type button_category_white_marble_a_s = button {
		text = "Words..."
		gfxtype = buttongfx
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
		texture = "gfx/interface/buttons/category_button_a.dds"
		spriteType = Corneredtiled
		spriteborder = { 50 0 }
		size = { 174 38 }
		
		buttonText = {
			textbox = {
				parentanchor = bottom|hcenter
				using = MarbleButtonFont
				autoresize = yes
				position = { 0 -12 }
			}
		}
	}	
	
	type button_category_white_marble_b_s = button {
		text = "Words..."
		gfxtype = buttongfx
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
		texture = "gfx/interface/buttons/category_button_b.dds"
		spriteType = Corneredtiled
		spriteborder = { 50 0 }
		size = { 174 38 }
		
		buttonText = {
			textbox = {
				parentanchor = bottom|hcenter
				using = MarbleButtonFont
				autoresize = yes
				position = { 0 -12 }
			}
		}
	}	
	
	
	# Green Button
	
	type button_standard_white_marble_g_s = button {
		gfxtype = buttongfx
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
		#	upframe = 1
		#	overframe = 2
		#	downframe = 3
		#	disableframe = 4
		texture = "gfx/interface/tiles/marble_button_g_s.dds"
		spriteType = Corneredtiled
		spriteborder = { 52 0 }
		size = { 174 38 }
		using = LightGold
		
		buttonText = {
			textbox = {
				parentanchor = bottom|hcenter
				using = MarbleButtonFont
				autoresize = yes
				text = "Words.."
				position = { 0 -12 }
			}
		}
	}	
	
	# Entry Button
	
	# Increase width by incriments of 40 px
	type entry_button = button {
		gfxtype = buttongfx
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		
		clicksound = "event:/SFX/UI/Generic/2.0/sfx_ui_button_secondary"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		texture = "gfx/interface/tiles/entry_button_tiles.dds"
		spriteType = Corneredtiled
		spriteborder = { 70 8 }
		size = { 200 45 }
		
		buttonText = {
			textbox = {
				parentanchor = bottom|hcenter
				using = MarbleButtonFont
				autoresize = yes
				position = { 0 -14 }
			}
		}
	}
	
	
	# Sort Button
	
	# Increase width by incriments of 40 px
	type sort_button = button {
		
		gfxtype = togglepushbuttongfx
		effectname = "NoHighlight"
        upframe = 1
        uphoverframe = 2
        uppressedframe = 3
        downframe = 4
        downhoverframe = 5
        downpressedframe = 6
        texture = "gfx/interface/buttons/sort_button.dds"
        spriteType = Corneredtiled
        spriteborder = { 16 16 }
        framesize  = { 56 40 }		
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		size = { 40 40 }
		
		
		buttonText = {
			textbox = {
				parentanchor = bottom|hcenter
				using = MarbleButtonFont
				autoresize = yes
				block "text_position"
				{
					position = { 0 -10 }
				}
			}
		}	
	}	
	
	
	# Economy Policy Buttons
	type sort_button_policy = button {
		
		gfxtype = togglepushbuttongfx
		effectname = "NoHighlight"
        upframe = 1
        uphoverframe = 2
        uppressedframe = 3
        downframe = 4
        downhoverframe = 5
        downpressedframe = 6
        texture = "gfx/interface/buttons/sort_policy_button.dds"
        spriteType = Corneredtiled
        spriteborder = { 12 12 }
        framesize  = { 44 38 }	
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		size = { 44 38 }
		
		
		buttonText = {
			textbox = {
				parentanchor = bottom|hcenter
				using = MarbleButtonFont
				autoresize = yes
				block "text_position"
				{
					position = { 0 -10 }
				}
			}
		}	
	}	
	
	# Time Controls Button
	type icon_time_indicator = icon {
		texture = "gfx/interface/base_parts/icon_time_indicator.dds"
		framesize = { 140 6 }
	}
	
	# Standard Menu Button
    type menu_button = button {
        gfxtype = buttongfx
        texture = "gfx/interface/buttons/button_menu.dds"
        clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_game_options"
        oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
    }
	
	# Standard Minus Button
	type minus_button = button {
		gfxtype = buttongfx
		texture = "gfx/interface/buttons/button_minus.dds"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
	} 
	
	# Standard Plus Button
	type plus_button = button {
		gfxtype = buttongfx
		texture = "gfx/interface/buttons/button_plus.dds"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_increment"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
	}
	
	# Standard Play Button
	type play_button = button {
		gfxtype = buttongfx
		texture = "gfx/interface/buttons/button_play.dds"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_game_play"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
	}
	
	# Standard Cancel/Close Button
	type cancel_button = button {
		gfxtype = buttongfx
		texture = "gfx/interface/buttons/button_close.dds"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
	}
	
	# Standard Settings Button
	type settings_button = button {
		gfxtype = buttongfx
		texture = "gfx/interface/buttons/button_settings.dds"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_game_options"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
	}
	
	# Standard Pause Button
	type pause_button = button {
		gfxtype = buttongfx
		texture = "gfx/interface/buttons/button_pause.dds"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_game_pause"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
	}

	# Standard Right Arrow Button
	type right_arrow_button = button {
		gfxtype = buttongfx
		texture = "gfx/interface/buttons/button_right_arrow.dds"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
	}

	# Standard Left Arrow Button
	type left_arrow_button = button {
		gfxtype = buttongfx
		texture = "gfx/interface/buttons/button_left_arrow.dds"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
	}

	# Expand List Items
	type expand_list_button = button {
		gfxtype = buttongfx
		texture = "gfx/interface/buttons/expand_arrow_button_square.dds"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
	}	

	# Collapse List Items
	type collapse_list_button = button {
		gfxtype = buttongfx
		texture = "gfx/interface/buttons/collapse_button_square.dds"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
	}
	
	
	
	# Square Close Button
	
	# Increase width by incriments of 40 px
	type square_close_button = button {
		gfxtype = buttongfx
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		texture = "gfx/interface/buttons/button_square_close.dds"
	}
	
	type go_to_button = button {
		gfxtype = buttongfx
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		texture = "gfx/interface/buttons/button_go_to.dds"
	}
	
	
	
	
	# Country Flag
	
	type country_flag = widget {
		block "size"
		{
			size = { 120 120 }
		}
		
		using = internal_country_flag
		blockoverride "flag_contents" {
			block "size"
			{
				size = { 120 120 }
			}
			
			framesize = { 120 120 }
			
			block "flag"
			{
				texture = "gfx/interface/debug/placeholder_flag.dds"# Added to avoid error for missing texture "flag"
				framesize = { 120 120 }
			}
			
			modify_texture = {
				name = "area"
				texture = "gfx/interface/map/flag_area.dds"
				blend_mode = alphamultiply
			}
			
			modify_texture = {
				name = "Darker"
				texture = "gfx/interface/map/flag_overlay.dds"
				alpha = 0.8
				blend_mode = multiply
			}
			
			modify_texture = {
				name = "Brighter"
				texture = "gfx/interface/map/flag_highlight.dds"
				blend_mode = overlay
			}
		}
		
		block "hover"
		{
			onmousehierarchyenter = "[SetHighlightCountry( Country.Self )]"
			block "hover_leave"
			{
				onmousehierarchyleave = "[ClearHighlightColors]"
			}
		}
	}

	type country_banner = widget {
		size = { 73 112 }
		
		icon = {
			name = "shadow"
			block "background_texture"
			{
				texture = "gfx/interface/diplomacy/great_power_background.dds"
			}
			size = { 72 112 }
			position = { 1 0 }
		}

		button = {
			position = { 13 16 }
			
			texture = "[Country.AccessCoatOfArms.GetTexture('(int32)120','(int32)120')]"
			frame = "[Country.AccessCoatOfArms.GetFrame('(int32)120','(int32)120'))]"
			framesize = { 120 120 }
			size = { 50 50 }

			modify_texture = {
				name = "area"
				block "flag_texture"
				{
					texture = "gfx/interface/diplomacy/great_power_flag_area.dds"
				}
				blend_mode = alphamultiply				
			}
			block "BannerClick" { onclick = "[OpenDiplomacy( Country.Self )]" }
			modify_texture = {
				name = "Darker"
				texture = "gfx/interface/diplomacy/power_shadow.dds"
				alpha = 1
				blend_mode = multiply
			}

			modify_texture = {
				name = "Brighter"
				texture = "gfx/interface/diplomacy/power_highlight.dds"
				blend_mode = overlay
				alpha = 0.6
			}
		}
		
		block "color_area"
		{
			icon = {
				position = { 20 76 }
				
				texture = "gfx/interface/diplomacy/major_power_clr_area.dds"
				color = "[Country.GetMapColor]"
				size = { 35 22 }

				modify_texture = {
					name = "area"
					
					texture = "gfx/interface/diplomacy/major_power_clr_area.dds"
					blend_mode = alphamultiply				
				}

				modify_texture = {
					name = "Darker"
					texture = "gfx/interface/diplomacy/clr_shadow.dds"
					alpha = 0.8
					blend_mode = multiply
				}

				modify_texture = {
					name = "Brighter"
					texture = "gfx/interface/diplomacy/clr_highlight.dds"
					blend_mode = overlay
				}
			}
		}
	}
	
	type banner_migrant_horde = country_banner {
		blockoverride "background_texture"
		{
			texture = "gfx/interface/diplomacy/migrant_horde_background.dds"
		}

		blockoverride "flag_texture"
		{
			texture = "gfx/interface/diplomacy/migrant_horde_area.dds"
		}

		blockoverride "color_area" {}
	}	
	
	type banner_city_state = country_banner {
		blockoverride "background_texture"
		{
			texture = "gfx/interface/diplomacy/city_state_background.dds"
		}

		blockoverride "flag_texture"
		{
			texture = "gfx/interface/diplomacy/city_state_area.dds"
		}

		blockoverride "color_area" {}
	}
	
	type banner_local_power = country_banner {
		blockoverride "background_texture"
		{
			texture = "gfx/interface/diplomacy/local_power_background.dds"
		}

		blockoverride "flag_texture"
		{
			texture = "gfx/interface/diplomacy/local_power_area.dds"
		}

		blockoverride "color_area" {}
	}
	
	type banner_regional_power = country_banner {
		blockoverride "background_texture"
		{
			texture = "gfx/interface/diplomacy/regional_power_background.dds"
		}
			
		blockoverride "flag_texture"
		{
			texture = "gfx/interface/diplomacy/major_power_flag_area.dds"
		}
		
		blockoverride "color_area" {}
	}
	
	type banner_major_power = country_banner {
		blockoverride "background_texture"
		{
			texture = "gfx/interface/diplomacy/major_power_background.dds"
		}
			
		blockoverride "flag_texture"
		{
			texture = "gfx/interface/diplomacy/major_power_flag_area.dds"
		}
	}
	
	type banner_great_power = country_banner {
		blockoverride "background_texture"
		{
			texture = "gfx/interface/diplomacy/great_power_background.dds"
		}

		blockoverride "flag_texture"
		{
			texture = "gfx/interface/diplomacy/great_power_flag_area.dds"		
		}
		
		blockoverride "color_area"
		{
			icon = {
				position = { 22 76 }
				
				texture = "gfx/interface/diplomacy/great_power_clr_area.dds"
				color = "[Country.GetMapColor]"
				size = { 32 20 }

				modify_texture = {
					name = "area"
					
					texture = "gfx/interface/diplomacy/great_power_clr_area.dds"
					blend_mode = alphamultiply				
				}

				modify_texture = {
					name = "Darker"
					texture = "gfx/interface/diplomacy/clr_shadow.dds"
					alpha = 0.8
					blend_mode = multiply
				}

				modify_texture = {
					name = "Brighter"
					texture = "gfx/interface/diplomacy/clr_highlight.dds"
					blend_mode = overlay
				}
			}
		}
	}

	# Header Background
	
	# Black marble background and text for Headers
	type DefaultHeaderBackground = widget {
		background = {
			name = "bg"
			texture = "gfx/interface/tiles/black_marble_texture_tile.dds"
			spriteType = Corneredtiled
			spriteborder = { 0 0 }
			shaderfile = "gfx/FX/pdxgui_default.shader"
			margin = { -5 -5 }
		}
		
		icon = {
			block "family_tile"
			{
				
			}
		}
		
		icon = {
			name = "frame"
			texture = "gfx/interface/tiles/black_marble_bg1_corners.dds"
			spriteType = Corneredtiled
			spriteborder = { 20 20 }
			size = { 100% 100% }
		}
		
		

		textbox = {
			block "position"
			{
				position = { 12 8 }
			}
			autoresize = yes
			using = BlackMarbleFont
			
			block "text"
			{
				text = "REPLACE_THIS_TEXT"
			}
		}
	}


	type temp_icon = icon {
		shaderfile = "gfx/FX/pdxgui_default.shader"
		texture = "gfx/interface/icons/temp_icon.dds"
	}
}
