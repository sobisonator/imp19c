types Imp19c_Types
{

type TradeGoodOverviewItem = flowcontainer {
	spacing = 103
	margin_bottom = 15
	size = { 870 85 }
	background = {
		texture = "gfx/interface/base_parts/background_noninteractable_texture.dds"
		spritetype = corneredtiled
		block "ListAlpha" { alpha = 0.6 }
		size = { 100% 100% }
		shaderfile = "gfx/FX/pdxgui_default.shader"
		margin = { 3 3 }
		modify_texture = {
			spriteType = Corneredtiled
			spriteborder = { 40 26 }
			block "texture" {#1
				texture = "gfx/interface/base_parts/entry_background_x80y52bd_alpha.dds"
			}
			blend_mode = alphamultiply
		}
		using = border_medium_torn_alpha
		modify_texture = {
			name = "Alpha"
			block "ListAlphaTexture" { texture = "gfx/interface/tooltip/tooltip_section_alpha_gradient_stretch.dds" }
			blend_mode = alphamultiply
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			alpha = 0.8
		}
	}
	icon = {
		size = { 55 55 }
		icon = {
			position = { 10 15 }
			block "image_and_tooltip" {
				tooltip = "Tin"
				texture = "gfx/interface/icons/tradegoods/tin.dds"
			}
		}
	}
	textbox = {
		size = { 35 30 }
		parentanchor = vcenter
		using = BaseFontL
		using = Black_FontColor
		tooltip = "Produced"
		block "produced_text" {
			text = "[GuiScope.SetRoot(TradeView.GetPlayer.MakeScope).ScriptValue('GOODS_national_production_tin')|0]"
		}
	}
	textbox = {
		size = { 10 30 }
		parentanchor = vcenter
		using = BaseFontL
		using = Black_FontColor
		tooltip = "Demand"
		block "demand_text" {
			text = "[GuiScope.SetRoot(TradeView.GetPlayer.MakeScope).ScriptValue('DEMAND_country_tin')|0]"
		}
	}
	textbox = {
		size = { 45 30 }
		parentanchor = vcenter
		using = BaseFontL
		using = Black_FontColor
		block "balance_text_and_tooltip" {
			tooltip = "Balance"
			text = "[GuiScope.SetRoot(TradeView.GetPlayer.MakeScope).ScriptValue('DEMAND_shortage_country_tin')|%]"
		}
	}
	textbox = {
		size = { 20 30 }
		parentanchor = left|center
		using = BaseFontL
		using = Black_FontColor
		tooltip = "Market Price"
		block "global_price_text" {
			text = "Â£[GuiScope.SetRoot(TradeView.GetPlayer.MakeScope).ScriptValue('PRICE_global_mean_tin')|3]"
		}
	}

	textbox = {
		size = { 200 70 }
		parentanchor = left|top
		using = BaseFontL
		using = Black_FontColor
        overlappingitembox = {
            size = { 850 78 }
            position = { 0 10 }
			block "top_producers_datamodel" {
				datamodel = "[Player.MakeScope.GetList('top_producers_grain')]"
			}
            
			item = {
			    country_flag = {
			    	block "top_producers_tooltip" {
			        	tooltip = "[Scope.GetCountry.GetName], producing [GuiScope.SetRoot(Scope.GetCountry.MakeScope).ScriptValue('GOODS_national_production_grain')|0] units"
			    	}
			        datacontext = "[Scope.GetCountry]"

			        blockoverride "flag"
					{
					texture = "[Scope.GetCountry.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
					frame = "[Scope.GetCountry.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
						framesize = { 56 56 }
					}
			        
			        blockoverride "size"
			        {
			            size = { 27 27 }
			        }
					blockoverride "show_as_button"
					{
						visible = yes
					}
			    }
			}
        }
        overlappingitembox = {
            size = { 850 160 }
            position = { 0 50 }
			block "top_consumers_datamodel" {
				datamodel = "[Player.MakeScope.GetList('top_consumers_grain')]"
			}
            
			item = {
				position = { -200 30 }
			    country_flag = {
			    	block "top_consumers_tooltip" {
			        	tooltip = "[Scope.GetCountry.GetName], demanding [GuiScope.SetRoot(Scope.GetCountry.MakeScope).ScriptValue('GOODS_national_production_grain')|0] units"
			    	}
			        datacontext = "[Scope.GetCountry]"

			        blockoverride "flag"
					{
					texture = "[Scope.GetCountry.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
					frame = "[Scope.GetCountry.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
						framesize = { 56 56 }
					}
			        
			        blockoverride "size"
			        {
			            size = { 27 27 }
			        }
					blockoverride "show_as_button"
					{
						visible = yes
					}
			    }
			}
        }
	}
	widget = { size = { 0 0 }}
}

type CustomPieChart = widget {
	block "widget_size_and_pos" {
		size = { 100 100 }
		parentanchor = right|vcenter
		position = { 0 0 }
	}
	piechart = {
		block "piechart_size_and_pos" {
			size = { 60 60 }
			position = { 0 0 }
			parentanchor = vcenter
		}
		block "datamodel" {
			# MUST BE A LIST OF SCOPES THAT CAN CONTAIN VARIABLES
		}
		#alwaystransparent = no
		icon = {
			size = { 100% 100% }
			texture = "gfx/interface/pie_charts/pie_chart_alpha_80_shadow.dds"
			alpha = 0.85
		}
		item = {
			pieslice = {
				#texture = "gfx/interface/piechart.dds"
				texture = "gfx/interface/pie_charts/pie_chart_alpha_80.dds"
				block "slice_tooltip" {
					# tooltip = custom_piechart_loc
				}
				block "slice_size" {
					 # value = "[FixedPointToFloat( Scope.GetProvince.MakeScope.GetVariable('your_value').GetValue )]"
				}
				block "slice_color" { # Not recommended to change if you are using the province object method for custom values, unless you have a variable in that province that you can derive a colour from
					color = "[Scope.GetProvince.MakeScope.GetVariable('derived_colour').CultureGroup.GetColor]"
				}
				block "alpha" {
					alpha = 0.8
				}
			}
		}
	}
	tag = {
		block "tag_size_and_pos" {
			size = { 106 20 }
			max_width = 106
			position = { 0 80 }
			fontsize_min = 14
			align = center
		}
		# parentanchor = 
		using = BaseFontS
		using = Black_FontColor
		block "tag_text" {
			text = "Custom piechart"
		}
		block "tag_tooltip" {

		}

	}			
}

type PeaceNegotiationBlock = margin_widget {
	size = { 100% 40% }
	block "position" {
		position  = { -175 180 }
	}
	textbox = {
		parentanchor = top
		position = { 300 -10 }
		using = BaseFontM
		using = Black_FontColor
		fontsize = 20

		block = "title_text" {
			text = "Defenders' concessions"
		}
	}
	text_button_square = {
		position = { 410 40 }
		size = { 150 24 }
		name = "select_defender_provinces_button"
		#datacontext = "[GetScriptedGui('send_final_offer_button')]"
		blockoverride "Center_text" { text = "Provinces" }
		#blockoverride "On_click" { 
		#	onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( WarOverview.GetWar.MakeScope ).AddScope('player', Player.MakeScope).End )]"
		#	onclick = "[WarOverview.OnClose]"
		#	enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( WarOverview.GetWar.MakeScope ).AddScope('player', Player.MakeScope).End )]"
		#}
		tooltip = "Add provinces to the deal"
		blockoverride "ClickSound" { clicksound = "event:/SFX/UI/Diplomacy/sfx_ui_diplomacy_peace_minor" }
		widgetanchor = bottom|right
	}
	text_button_square = {
		position = { 560 40 }
		size = { 150 24 }
		name = "select_other_deals_button"
		#datacontext = "[GetScriptedGui('send_final_offer_button')]"
		blockoverride "Center_text" { text = "Other deals" }
		#blockoverride "On_click" { 
		#	onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( WarOverview.GetWar.MakeScope ).AddScope('player', Player.MakeScope).End )]"
		#	onclick = "[WarOverview.OnClose]"
		#	enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot( WarOverview.GetWar.MakeScope ).AddScope('player', Player.MakeScope).End )]"
		#}
		tooltip = "Add other stipulations to the deal"
		blockoverride "ClickSound" { clicksound = "event:/SFX/UI/Diplomacy/sfx_ui_diplomacy_peace_minor" }
		widgetanchor = bottom|right
	}
	vbox = {
		margin_top = 45
		margin_bottom = 15
		scrollarea = {
			size = { 300 250 }
			layoutpolicy_vertical = expanding

			scrollbarpolicy_horizontal = always_off

			scrollbar_vertical = {
				using = VerticalScrollBar
			}
			using = VerticalScrollAreaCutOff
			scrollwidget = {
				dynamicgridbox = {
					block "country_list" {
						datamodel = "[Player.MakeScope.GetList('war_defender_list')]"
					}
					item = {
						flowcontainer = {
							spacing = 4
							margin_bottom = 4
							direction = vertical
							flowcontainer = {
								name = "country_buttons"
								direction = horizontal
								ignoreinvisible = yes

								diplomacy_action_button = {
									size = { 290 30 }
									#position = { -50 5 }
									name = "country_button_open_states"
									block "country_item_buttoncontext" {
										datacontext = "[GetScriptedGui('select_defender_country')]"
									}
									blockoverride "Left_text" {
										text = "@[Scope.GetCountry.GetFlag]! [Scope.GetCountry.GetName]"
									}
									blockoverride "Right_text"
									{
										parentanchor = vcenter
										text = "00"
										#using = Negative_FontColor  # Make conditional
										#tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
									}
									blockoverride "Icon" 
									{
										framesize = { 46 46 }
										#visible = "[DiplomaticActionItem.RequireAcceptance]"
										texture = "gfx/interface/diplomacy/ai_accept_decline_icon.dds"
										#frame = "[Select_int32(ScriptedGui.IsValid(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End),'(int32)2','(int32)1')]"
										#tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
									}	
									onmousehierarchyenter = "[SetHighlightCountry(Scope.GetCountry)]"
	                				onmousehierarchyleave = "[ClearHighlightColors]"
	                				tooltip = "@[Scope.GetCountry.GetFlag]! [Scope.GetCountry.GetName]"
	                				# parentanchor
	                				# Onlick needs to use scripted GUI to toggle the script variable for states visible. GUI variable no good for this.
	                				blockoverride "On_click" { 
	                					onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.AccessParent.FindChild('state_buttons').Show]"
	                					onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('country_button_open_states').Hide]"
	                					onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('country_button_close_states').Show]"
	                				}

	                				 
								}
								diplomacy_action_button = {
									size = { 290 30 }
									visible = no
									#position = { -50 5 }
									name = "country_button_close_states"
									block "country_list_datamodel" {
										datamodel = "[Player.MakeScope.GetList('war_defender_list')]"
									}
									block "select_country_context" {
										datacontext = "[GetScriptedGui('select_defender_country')]"
									}
									blockoverride "Left_text" {
										text = "@[Scope.GetCountry.GetFlag]! [Scope.GetCountry.GetName]"
									}
									blockoverride "Right_text"
									{
										parentanchor = vcenter
										text = "00"
										#using = Negative_FontColor  # Make conditional
										#tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
									}
									blockoverride "Icon" 
									{
										framesize = { 46 46 }
										#visible = "[DiplomaticActionItem.RequireAcceptance]"
										texture = "gfx/interface/diplomacy/ai_accept_decline_icon.dds"
										#frame = "[Select_int32(ScriptedGui.IsValid(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End),'(int32)2','(int32)1')]"
										#tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
									}	
									onmousehierarchyenter = "[SetHighlightCountry(Scope.GetCountry)]"
	                				onmousehierarchyleave = "[ClearHighlightColors]"
	                				tooltip = "@[Scope.GetCountry.GetFlag]! [Scope.GetCountry.GetName]"
	                				# parentanchor
	                				# Onlick needs to use scripted GUI to toggle the script variable for states visible. GUI variable no good for this.
	                				blockoverride "On_click" { 
	                					onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.AccessParent.FindChild('state_buttons').Hide]"
	                					onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('country_button_close_states').Hide]"
	                					onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('country_button_open_states').Show]"
	                				}

	                				 
								}
							}
							flowcontainer = {
								ignoreinvisible = yes
								dynamicgridbox = {
									name = "state_buttons"
									block "state_list" {
										datamodel = "[Scope.Country.MakeScope.GetList('states_available_from_defender')]"
									}
									# visible = parent governorship has the visibility script variable = 1
									visible = no
									item = {
										flowcontainer = {
											margin_left = 20
											ignoreinvisible = yes
											visible = no
											diplomacy_action_button = {
												size = { 270 30 }
												name = "state_button_show_provinces"
												block "state_item_buttoncontext" {
													datacontext = "[GetScriptedGui('select_state_from_defender')]"
												}
												blockoverride "Left_text" {
													text = "[Scope.State.GetShortName]"
												}
												blockoverride "Right_text"
												{
													parentanchor = vcenter
													text = "00"
													#using = Negative_FontColor  # Make conditional
													#tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
												}
												blockoverride "Icon" 
												{
													framesize = { 46 46 }
													#visible = "[DiplomaticActionItem.RequireAcceptance]"
													texture = "gfx/interface/diplomacy/ai_accept_decline_icon.dds"
													#frame = "[Select_int32(ScriptedGui.IsValid(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End),'(int32)2','(int32)1')]"
													#tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
												}	
												onmousehierarchyenter = "[SetHighlightArea(Scope.State.GetArea)]"
				                				onmousehierarchyleave = "[ClearHighlightColors]"
				                				tooltip = "@[Scope.Governorship.GetOwner.GetFlag]! [Scope.Governorship.GetOwner.GetAdjective] region of [Scope.Governorship.GetName] "
				                				# parentanchor
				                				blockoverride "On_click" { 
				                					onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('province_buttons').Show]"
				                					onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('state_button_show_provinces').Hide]"
				                					onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('state_button_hide_provinces').Show]"
				                					block "state_item_rightclick_script" {
				                						onrightclick = "[GetScriptedGui('select_state_from_defender_rightclick').Execute( GuiScope.SetRoot( Scope.State.MakeScope ).AddScope('war', WarOverview.GetWar.MakeScope ).End )]"
				                					}
				                				} 
											}

											diplomacy_action_button = {
												size = { 270 30 }
												name = "state_button_hide_provinces"
												visible = no
												block "state_item_buttoncontext" {
													datacontext = "[GetScriptedGui('select_state_from_defender')]"
												}
												blockoverride "Left_text" {
													text = "[Scope.State.GetShortName]"
												}
												blockoverride "Right_text"
												{
													parentanchor = vcenter
													text = "00"
													#using = Negative_FontColor  # Make conditional
													#tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
												}
												blockoverride "Icon" 
												{
													framesize = { 46 46 }
													#visible = "[DiplomaticActionItem.RequireAcceptance]"
													texture = "gfx/interface/diplomacy/ai_accept_decline_icon.dds"
													#frame = "[Select_int32(ScriptedGui.IsValid(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End),'(int32)2','(int32)1')]"
													#tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
												}	
												onmousehierarchyenter = "[SetHighlightArea(Scope.State.GetArea)]"
				                				onmousehierarchyleave = "[ClearHighlightColors]"
				                				tooltip = "@[Scope.Governorship.GetOwner.GetFlag]! [Scope.Governorship.GetOwner.GetAdjective] region of [Scope.Governorship.GetName] "
				                				# parentanchor
				                				blockoverride "On_click" { 
				                					onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('province_buttons').Hide]"
				                					onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('state_button_show_provinces').Show]"
				                					onclick = "[PdxGuiWidget.AccessParent.AccessParent.AccessParent.FindChild('state_button_hide_provinces').Hide]"
				                					block "state_item_rightclick_script" {
				                						onrightclick = "[GetScriptedGui('select_state_from_defender_rightclick').Execute( GuiScope.SetRoot( Scope.State.MakeScope ).AddScope('war', WarOverview.GetWar.MakeScope ).End )]"
				                					}
				                				} 
											}
											flowcontainer = {
												margin_top = 32
												margin_left = -255
												ignoreinvisible = yes
												allow_outside = yes
												dynamicgridbox = {
													block "province_list" {
														datamodel = "[Scope.GetState.MakeScope.GetList('provinces_available_from_defender')]"
													}
													name = "province_buttons"
													visible = no
													item = {
														flowcontainer = {
															ignoreinvisible = yes
															country_flag = {
																position = { 3 50 }
																parentanchor = top|left
																tooltip = "[Scope.GetProvince.MakeScope.GetVariable('PEACE_requested_by').GetCountry.GetName]"
																blockoverride "flag"
																{
																	texture = "[Scope.GetProvince.MakeScope.GetVariable('PEACE_requested_by').GetCountry.AccessCoatOfArms.GetTexture('(int32)32','(int32)32')]"
																	frame = "[Scope.GetProvince.MakeScope.GetVariable('PEACE_requested_by').GetCountry.AccessCoatOfArms.GetFrame('(int32)32','(int32)32')]"
																	framesize = { 32 32 }
																}

																
																blockoverride "size"
																{
																	size = { 28 28 }
																}
																
																blockoverride "show_as_button"
																{
																	visible = no
																}
																blockoverride "show_as_icon"
																{
																	visible = yes
																}
															}
															diplomacy_action_button = {
																size = { 227 30 }
																name = "province_button_unselected"
																block "province_item_buttoncontext" {
																	datacontext = "[GetScriptedGui('select_province_from_defender')]"
																}
																blockoverride "Left_text" {
																	text = "[Scope.GetProvince.Custom('peace_province_selection_loc')]"
																}
																blockoverride "Right_text"
																{
																	parentanchor = vcenter
																	text = "[GuiScope.SetRoot( Scope.Province.MakeScope ).ScriptValue('WARSCORE_province_value')|1]"
																	#using = Negative_FontColor  # Make conditional
																	#tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
																}
																blockoverride "Icon" 
																{
																	framesize = { 46 46 }
																	#visible = "[DiplomaticActionItem.RequireAcceptance]"
																	texture = "gfx/interface/diplomacy/ai_accept_decline_icon.dds"
																	#frame = "[Select_int32(ScriptedGui.IsValid(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End),'(int32)2','(int32)1')]"
																	#tooltip = "[ScriptedGui.BuildTooltip(GuiScope.SetRoot( Player.MakeScope ).AddScope('target', DiplomaticView.GetTargetCountry.MakeScope ).End)]"
																}	
																onmousehierarchyenter = "[SetHighlightProvince(Scope.GetProvince.GetId)]"
								                				onmousehierarchyleave = "[ClearHighlightColors]"
								                				tooltip = "@[Scope.GetProvince.GetOwner.GetFlag]! [Scope.GetProvince.GetOwner.GetAdjective] province of [Scope.GetProvince.GetName] "
								                				# parentanchor

								                				# Left click to reserve for occupier

								                				# Right click to select a recipient for reservation
								                				blockoverride "On_click" { 
								                					onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Scope.GetProvince.GetState.MakeScope ).AddScope('province', Scope.GetProvince.MakeScope ).AddScope('war', WarOverview.GetWar.MakeScope ).End )]"
								                				}
															}
														}
													}
												}										
											}
										}
									}
								}										
							}
						}
					}
				}
			}
		}
	}
}

}