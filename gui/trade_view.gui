base_window = {
	gfxtype = windowgfx
	name = "trade_view"
	size = { 800 900 }
	
	using = main_window_template

	### Audio ###
	state = {
		name = _show
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_tab_close"
		}
	}
	state = {
		name = _hide
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_tab_close"
		}
	}	

	vbox = {
		using = MainWindowHeaderBox
		
		blockoverride "Title_text" { text = "TRADE_MENU_HEADER" }
		
		blockoverride "White_buttons"
		{
			button_back = {
				shortcut = "previous_window"
				onclick = "[TradeView.OnPrevious]"
				tooltip = "PREVIOUS_TRADE_VIEW"
			}
		
			button_close = {
				onclick = "[TradeView.OnClose]"
				tooltip = "CLOSE"
				shortcut = "close_window"
			}
		}

		blockoverride "FlagOrIcon"
		{
			icon = {
				texture = "gfx/interface/base_parts/yellow_button_color_200fs.dds"
				framesize = { 100 100 }
				frame = 6
				position = { -2 -2 }
				size = { 32 32 }
				modify_texture = {
					texture = "gfx/interface/icons/menu_buttons/menu_trade.dds"
					blend_mode = alphamultiply
				}
			}
		}
		
		vbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			margin = { 14 10 } 
			
			margin_widget = {
				size = { 0 80 }
				layoutpolicy_horizontal = expanding
				
				hbox = {
					spacing = 16
					vbox = {
						layoutpolicy_vertical = expanding
						icon_and_text = {
							size = { 124 0 }
							blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/global_import_commerce_modifier.dds" }
							blockoverride "Text" { text = "[TradeView.GetPlayer.GetModifierValue('global_import_commerce_modifier')]" }
							tooltip = "[TradeView.GetPlayer.GetModifierTooltip('global_import_commerce_modifier')]" 
						}
						icon_and_text = {
							size = { 124 0 }
							blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/global_export_commerce_modifier.dds" }
							blockoverride "Text" { text = "[TradeView.GetPlayer.GetModifierValue('global_export_commerce_modifier')]" }
							tooltip = "[TradeView.GetPlayer.GetModifierTooltip('global_export_commerce_modifier')]"
						}
					}
					vbox = {
						layoutpolicy_vertical = expanding
						icon_and_text = {
							size = { 124 0 }
							blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/global_capital_trade_routes.dds" }
							blockoverride "Text" { text = "[TradeView.GetPlayer.GetCapitalState.GetMaxNumTradeRoutes]" }
							tooltip = "[TradeView.GetPlayer.GetCapitalState.GetTradeRoutesMaximumTooltip('CAPITAL_IMPORT_ROUTES_HEADER')]"
						}
						icon_and_text = {
							size = { 124 0 }
							blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/global_commerce_modifier.dds" }
							blockoverride "Text" { text = "[TradeView.GetPlayer.GetModifierValue('global_commerce_modifier')]" }
							tooltip = "[TradeView.GetPlayer.GetModifierTooltip('global_commerce_modifier')]"
						}
						#icon_and_text = {
						#	size = { 124 0 }
						#	blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/global_state_trade_routes.dds" }
						#	blockoverride "Text" { text = "[TradeView.GetPlayer.GetModifierValue('global_state_trade_routes')]" }
						#	tooltip = "[TradeView.GetPlayer.GetModifierTooltip('global_state_trade_routes')]"
						#}
					}
					vbox = {
						layoutpolicy_horizontal = expanding
					}
					vbox = {
						layoutpolicy_vertical = expanding
						checkbox_entry = {
							size = { 200 0 }
							tooltip = "[SelectLocalization(TradeView.GetPlayer.AutoAcceptTrade,'AUTO_TRADE_ACCEPTED','AUTO_TRADE_DECLINED')]"
							blockoverride "Frame" { frame = "[TradeView.GetAutoFrame]" }
							blockoverride "On_click" { onclick = "[TradeView.ToggleAutoAcceptTrade]" }
							blockoverride "Text" { text = "ACCEPT_ALL_TRADES" }
						}
						
						checkbox_entry = {
							size = { 200 0 }
							tooltip = "[SelectLocalization(TradeView.GetPlayer.NeverGiveUpTradeSurplus,'BLOCK_TRADE_SURPLUS','ALLOW_TRADE_SURPLUS')]"
							blockoverride "Frame" { frame = "[TradeView.GetSurplusFrame]" }
							blockoverride "On_click" { onclick = "[TradeView.ToggleCapitalSurplus]" }
							blockoverride "Text" { text = "BLOCKED_SURPLUS" }
						}
					}
				}
			}
			
			margin_widget = {
				size = { 0 94 }
				layoutpolicy_horizontal = expanding
				hbox = {
					layoutpolicy_vertical = expanding
					margin_widget = {
						size = { 0 84 }
						
						layoutpolicy_horizontal = expanding
						sub_header = {
							size = { 100% 0 }
							blockoverride "Title_text" { text = "TRADE_VIEW_CAPITAL" }
						}
						overlappingitembox = {
							position = { 4 37 }
							name = "capital_surplus_grid"
							size = { 94% 60 }
							
							datamodel = "[TradeView.GetCapitalSurplus]"
							
							item = {
								widget = {
									size = { 48 48 }
									icon_card = {
										tooltip = "[CapitalSurplus.GetTooltip]"
										alwaystransparent = no
										filter_mouse = all
										blockoverride "Icon" { texture = "[GetTradeGoodsIcon(CapitalSurplus.GetTradeGoods)]" }
									}
								}
							}
						}
						
					}
				}
			}
			margin_widget = {
				size = { 0 422 }
				layoutpolicy_horizontal = expanding
				
				sub_header = {
					size = { 100% 0 }
					blockoverride "Title_text" { text = "NATIONAL_TRADEROUTES" }
				}
				
				flowcontainer = {
					spacing = 12
					position = { 4 42 }
					check_cross_filter = {
						blockoverride "On_click" { onclick = "[TradeView.Filter('export')]"}
						blockoverride "FilterYes" { visible = "[TradeView.IsFilterYes('export')]" }
						blockoverride "FilterNo" { visible = "[TradeView.IsFilterNo('export')]" }
						blockoverride "TagText" 
						{ 
							text = "TRADE_VIEW_FILTER_BY_EXPORTS" 
							max_width = 100
						}
					}
					
					check_cross_filter = {
						blockoverride "On_click" { onclick = "[TradeView.Filter('import')]"}
						blockoverride "FilterYes" { visible = "[TradeView.IsFilterYes('import')]" }
						blockoverride "FilterNo" { visible = "[TradeView.IsFilterNo('import')]" }
						blockoverride "TagText" 
						{ 
							text = "TRADE_VIEW_FILTER_BY_IMPORTS" 
							max_width = 100
						}
					}
					
					check_cross_filter = {
						blockoverride "On_click" { onclick = "[TradeView.Filter('domestic')]"}
						blockoverride "FilterYes" { visible = "[TradeView.IsFilterYes('domestic')]" }
						blockoverride "FilterNo" { visible = "[TradeView.IsFilterNo('domestic')]" }
						blockoverride "TagText" 
						{ 
							text = "TRADE_VIEW_FILTER_BY_DOMESTIC" 
							max_width = 100
						}
					}
					
				}
				
				flowcontainer = {
					position = { 350 44 }
					spacing = 4
					text_button_sort = {
						size = { 140 32 }
						blockoverride "Button_text" { text = "TR_GOODS" }
						blockoverride "Icon" { visible = no }
						blockoverride "On_click" { onclick = "[TradeView.SortRoutes('goods')]" }
						blockoverride "DownState" { down = "[TradeView.IsRoutesSorted('goods')]" }
					}					
					text_button_sort = {
						size = { 68 32 }
						blockoverride "Button_text" { text = "INCOME" }
						blockoverride "Icon" { visible = no }
						blockoverride "On_click" { onclick = "[TradeView.SortRoutes('income')]" }
						blockoverride "DownState" { down = "[TradeView.IsRoutesSorted('income')]" }
					}		
				}
				
				scrollarea = {
					position = { 2 82 }
					size = { 608 334 }
					scrollbarpolicy_horizontal = always_off
					
					using = VerticalScrollAreaCutOff
					
					scrollbar_vertical = {
						using = VerticalScrollBar
					}
					
					scrollwidget = {
						fixedgridbox = {
							name = "routes_grid"
							addrow = 38
							addcolumn = 608
							datamodel = "[TradeView.GetCurrentTradeRoutes]"
							item = {
								
								widget = {
									size = { 608 38 }
									list_entry = {
										size = { 100% 100% }
									}
									flowcontainer = {
										spacing = 5
										
										widget = {
											size = { 34 34 }	
											
											country_flag = {
												datacontext = "[ActiveTradeRoute.GetFrom.GetCountry]"
												tooltip = "COUNTRY_SHORTHAND_INFO"
												parentanchor = vcenter
												
												blockoverride "flag"
												{
													texture = "[ActiveTradeRoute.GetFrom.GetCountry.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
													frame = "[ActiveTradeRoute.GetFrom.GetCountry.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
													framesize = { 56 56 }
												}
												blockoverride "size"
												{
													size = { 34 34 }
												}
												
												blockoverride "click"
												{
													onclick = "[OpenDiplomacy(ActiveTradeRoute.GetFrom.GetCountry)]"
												}
												
												blockoverride "hover_leave"
												{
													onmousehierarchyleave = "[ClearHighlightColors]"
												}

												blockoverride "show_as_button"
												{
													visible = no
												}
												blockoverride "show_as_icon"
												{
													visible = yes
												}
											}
										}
										
										widget = {
											size = { 150 100% }
											onmousehierarchyenter = "[SetHighlightArea( ActiveTradeRoute.GetFrom.GetArea )]"
											textbox = {
												using = BaseFontS
												using = Black_FontColor
												text = "[ActiveTradeRoute.GetFrom.GetShortName]"
												size = { 130 28 }
												align = left
												alwaystransparent = no
												parentanchor = vcenter
												elide = right
												fontsize_min = 12
												max_width = 130
											}
											
											goto_button = { #TODO
												name = "zoom_to_FROM_button"
												position = { 2 0 }
												parentanchor = right|vcenter
												datacontext = [ActiveTradeRoute.GetFrom]
												tooltip = "zoom_to_getfrom" 
												blockoverride "On_click" { onclick = "[OnClickOnState(ActiveTradeRoute.GetFrom)]" }
											}
										}
										#widget = {}
										widget = {
											size = { 150 100% }
											onmousehierarchyenter = "[SetHighlightArea( ActiveTradeRoute.GetTo.GetArea )]"
											textbox = {
												using = BaseFontS
												using = Black_FontColor
												text = "[ActiveTradeRoute.GetTo.GetShortName]"
												size = { 130 28 }
												align = left
												alwaystransparent = no
												parentanchor = vcenter
												elide = right
												fontsize_min = 12
												max_width = 130
											}
											
											goto_button = { #TODO
												name = "zoom_to_TO_button"
												position = { 2 0 }
												parentanchor = right|vcenter
												datacontext = [ActiveTradeRoute.GetFrom]
												tooltip = "zoom_to_getto" 
												blockoverride "On_click" { onclick = "[OnClickOnState(ActiveTradeRoute.GetTo)]"  }
											}
										}
										
										widget = {
											size = { 130 100% }
											
											container = {
												parentanchor = vcenter
												position = { 0 0 }
												icon = {
													position = { 0 0 }
													size = { 30 30 }
													texture = "[GetTradeGoodsIcon(ActiveTradeRoute.GetGoods)]"
												}
												textbox = {
													position = { 34 0 }
													using = BaseFontS
													using = Black_FontColor
													text =  "[ActiveTradeRoute.GetGoods.GetName]"
													size = { 100% 28 }
													autoresize = yes
													fontsize_min = 12
													elide = right
													parentanchor = vcenter
													max_width = 88
												}
											}
											
										}										
										
										container = {
											parentanchor = vcenter
											textbox = {
												tooltip = "[ActiveTradeRoute.GetIncomeTooltip]"
												using = BaseFontM
												using = Black_FontColor
												text = "[ActiveTradeRoute.GetIncome|2]@gold!"
												autoresize = yes
												minimumsize = { 80 0 }
												max_width = 70
												fontsize_min = 12
												align = right
												elide = right
												parentanchor = vcenter
											}
										}

										widget = {
											size = { 32 32 }
											parentanchor = vcenter
											button_delete_item = {
												parentanchor = center
												size = { 32 32 }
												onmousehierarchyenter = "[SetHighlightArea( ActiveTradeRoute.GetTo.GetArea )]"
												blockoverride "On_click"
												{
													onclick = "[ActiveTradeRoute.OnClick]"
												}
												tooltip = "[ActiveTradeRoute.GetTooltip]"
											}
										}
									}
								}
							}
						}
					}
				}
				
			}
			margin_widget = {
				size = { 0 226 }
				layoutpolicy_horizontal = expanding
				sub_header_v = {
					blockoverride "Title_text" { text = "TRADE_VIEW_REQUEST_DENY" }
					size = { 49% 100% }
					
					dynamicgridbox = {
						name = "capital_surplus_grid"
						position = { 0 36 }
						size = { 100% 100% }
						maxhorizontalslots = 12
						datamodel_wrap = 5
						
						datamodel = "[TradeView.GetAvailableTradeGoods]"
						
						item = {
							trade_good_entry = {
								blockoverride "Icon" { 
									texture = "[GetTradeGoodsIcon(TradeGoodsGlue.GetTradeGood)]" 
									size = { 33 33 }
								}
								blockoverride "Text" { visible = no }
								blockoverride "On_click" { onclick = "[TradeGoodsGlue.ToggleDenyTradeGood]" }
								tooltip = "TRADEGOOD_DENY_INFO"
								size = { 40 40 }
								margin_bottom = 3
							}
						}
					}
					
				}
				
				sub_header_v = {
					blockoverride "Title_text" { text = "TRADE_VIEW_REQUEST_DENIED" }
					size = { 49% 100% }
					position = { 400 0 }
					
					dynamicgridbox = {
						name = "capital_surplus_grid"
						position = { 0 40 }
						size = { 100% 100% }
						maxhorizontalslots = 12
						datamodel_wrap = 5
						
						datamodel = "[TradeView.GetDeniedTradeGoods]"
						
						item = {
							trade_good_entry = {
								blockoverride "Icon" { 
									texture = "[GetTradeGoodsIcon(TradeGoodsGlue.GetTradeGood)]" 
									size = { 36 36 }
								}
								blockoverride "Text" { visible = no }
								blockoverride "On_click" { onclick = "[TradeGoodsGlue.ToggleDenyTradeGood]" }
								tooltip = "TRADEGOOD_DENY_INFO"
								size = { 42 40 }
								margin_bottom = 3
							}
						}
					}
					
				}	
			}
			vbox = {
				layoutpolicy_vertical = expanding
			}
		}
		
	}
}

