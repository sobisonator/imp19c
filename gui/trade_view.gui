@mincategorybuttonwidth = 190
@maxcategorybuttonwidth = 190
@mincategorybuttonheight = 28 
@maxcategorybuttonheight = 30
@window_width = 800
@window_height = 950

types TradeViewTypes {
	type goods_button_round = widget { 
		size = { 48 48 }
		
		icon = {
			texture = "gfx/interface/base_parts/roung_shadow_69.dds"
			size = { 100% 100% }
			position = { 0 0 }
			parentanchor = center
			alpha = 0.65
		}
		margin_widget = {
			size = { 100% 100% }
			margin = { 2 2 }
			icon = {
				name = "Base"
				texture = "gfx/interface/base_parts/background_noninteractable_texture_dark.dds"
				framesize = { 200 200 }
				spriteType = Corneredtiled
				spriteborder = { 200 200 }
				size = { 100% 100% }
				parentanchor = center
				modify_texture = {
					name = "Alpha"
					texture = "gfx/interface/base_parts/circle_60.dds"
					blend_mode = alphamultiply
				}
				
			}
			
			margin_widget = {
				#margin = { 2 2 }
				size = { 100% 100% }
				button = {
					#texture = "gfx/interface/base_parts/white_background.dds"
					spriteType = Corneredtiled
					alpha = 0.95
					spriteborder = { 200 200 }
					gfxtype = framedbuttongfx
					size = { 100% 100% }
					framesize = { 200 200 }
					upframe = 1
					overframe = 2
					downframe = 3
					disableframe = 4
					parentanchor = center
					
					modify_texture = {
						name = "Alpha"
						texture = "gfx/interface/base_parts/circle_60.dds"
						blend_mode = alphamultiply
						#spriteType = corneredtiled
						#spriteborder = { 6 6 }
					}
					
					margin_widget = {
						margin = { 2 2 }
						size = { 100% 100% }
						button = {
							block "IconButtonSize" { size = { 100% 100% } }
							position = { 0 0 }
							spriteType = Corneredtiled
							spriteborder = { 200 200 }
							gfxtype = framedbuttongfx
							widgetanchor = center
							parentanchor = center
							framesize = { 200 200 }
							upframe = 1
							overframe = 2
							downframe = 3
							disableframe = 4				
							block "On_click" { }
							icon = {
								alwaystransparent = yes
								size = { 100% 100% }
								block "StandardIcon" { visible = no }
							}
						}
					}
				}
			}
		}
	}
}
base_window = {
	gfxtype = windowgfx
	name = "trade_view"
	size = { @window_width @window_height }
	
	using = main_window_template

	### Audio ###
	state = {
		name = _show
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_tab_close"
		}
		on_start = "[GetVariableSystem.Clear('trade_zone_view_open')]"
		on_start = "[GetVariableSystem.Clear('goods_tab_open')]"
		on_start = "[GetVariableSystem.Clear('industry_tab_open')]"
		on_start = "[GetVariableSystem.Toggle('trade_tab_open')]"
	}
	state = {
		name = _hide
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_window_tab_close"
		}
		on_start = "[GetVariableSystem.Clear('trade_tab_open')]"
	}
	vbox = {
		using = MainWindowHeaderBox
		blockoverride "Title_text" { text = "TRADE_MENU_HEADER" }
		
		blockoverride "White_buttons"
		{
			button_back = {
				shortcut = "previous_window"
				onclick = "[TradeView.OnPrevious]"
				tooltip = "PREVIOUS_TRADE_VIEW"
			}
		
			button_close = {
				onclick = "[TradeView.OnClose]"
				tooltip = "CLOSE"
				shortcut = "close_window"
			}
		}

		blockoverride "FlagOrIcon"
		{
			icon = {
				texture = "gfx/interface/base_parts/yellow_button_color_200fs.dds"
				framesize = { 100 100 }
				frame = 6
				position = { -2 -2 }
				size = { 32 32 }
				modify_texture = {
					texture = "gfx/interface/icons/menu_buttons/menu_trade.dds"
					blend_mode = alphamultiply
				}
			}
		}

		vbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			margin = { 14 10 }
			# Tabs hbox
			hbox = { 
				layoutpolicy_vertical = fixed
				layoutpolicy_horizontal = expanding
				spacing = 2

				category_tab = {
					blockoverride "MinSize" { size = { @mincategorybuttonwidth @mincategorybuttonheight } }
					blockoverride "MaxSize" { size = { @maxcategorybuttonwidth @maxcategorybuttonheight } }
					blockoverride "MinVisible" { visible = "[Not(GetVariableSystem.Exists('trade_tab_open'))]" }
					blockoverride "MaxVisible" { visible = "[GetVariableSystem.Exists('trade_tab_open')]" }
					######## Shared Overrides
					blockoverride "Center_text" { text = "Trade" }
					blockoverride "Icon" { visible = no }
					######## Small Button Overrides
					blockoverride "ClickFunction"
					{
						onclick = "[GetVariableSystem.Toggle('trade_tab_open')]"
						onclick = "[GetVariableSystem.Clear('goods_tab_open')]"
						onclick = "[GetVariableSystem.Clear('industry_tab_open')]"
						onclick = "[GetVariableSystem.Clear('trade_zone_view_open')]"
					}
				}
				category_tab = {
					blockoverride "MinSize" { size = { @mincategorybuttonwidth @mincategorybuttonheight } }
					blockoverride "MaxSize" { size = { @maxcategorybuttonwidth @maxcategorybuttonheight } }
					blockoverride "MinVisible" { visible = "[Not(GetVariableSystem.Exists('goods_tab_open'))]" }
					blockoverride "MaxVisible" { visible = "[GetVariableSystem.Exists('goods_tab_open')]" }
					######## Shared Overrides
					blockoverride "Center_text" { text = "Trade Goods" }
					blockoverride "Icon" { visible = no }
					######## Small Button Overrides
					blockoverride "ClickFunction"
					{
						onclick = "[GetVariableSystem.Toggle('goods_tab_open')]"
						onclick = "[GetVariableSystem.Clear('trade_tab_open')]"
						onclick = "[GetVariableSystem.Clear('industry_tab_open')]"
						onclick = "[GetVariableSystem.Clear('trade_zone_view_open')]"
					}
				}
				category_tab = {
					blockoverride "MinSize" { size = { @mincategorybuttonwidth @mincategorybuttonheight } }
					blockoverride "MaxSize" { size = { @maxcategorybuttonwidth @maxcategorybuttonheight } }
					blockoverride "MinVisible" { visible = "[Not(GetVariableSystem.Exists('trade_zone_view_open'))]" }
					blockoverride "MaxVisible" { visible = "[GetVariableSystem.Exists('trade_zone_view_open')]" }
					######## Shared Overrides
					blockoverride "Center_text" { text = "Trade Zones" }
					blockoverride "Icon" { visible = no }
					######## Small Button Overrides
					datacontext = "[GetScriptedGui('show_trade_zones_button')]"
					blockoverride "ClickFunction"
					{
						onclick = "[GetVariableSystem.Toggle('trade_zone_view_open')]"
						onclick = "[GetVariableSystem.Clear('industry_tab_open')]"
						onclick = "[GetVariableSystem.Clear('trade_tab_open')]"
						onclick = "[GetVariableSystem.Clear('goods_tab_open')]"
						onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Player.MakeScope ).End )]"
					}
				}
				category_tab = {
					blockoverride "MinSize" { size = { @mincategorybuttonwidth @mincategorybuttonheight } }
					blockoverride "MaxSize" { size = { @maxcategorybuttonwidth @maxcategorybuttonheight } }
					blockoverride "MinVisible" { visible = "[Not(GetVariableSystem.Exists('industry_tab_open'))]" }
					blockoverride "MaxVisible" { visible = "[GetVariableSystem.Exists('industry_tab_open')]" }
					######## Shared Overrides
					blockoverride "Center_text" { text = "Industry" }
					blockoverride "Icon" { visible = no }
					######## Small Button Overrides
					blockoverride "ClickFunction"
					{
						onclick = "[GetVariableSystem.Toggle('industry_tab_open')]"
						onclick = "[GetVariableSystem.Clear('trade_tab_open')]"
						onclick = "[GetVariableSystem.Clear('goods_tab_open')]"
						onclick = "[GetVariableSystem.Clear('trade_zone_view_open')]"
					}
				}
			}
			# Vanilla Trade View tab
			vbox = {
				visible = "[GetVariableSystem.Exists('trade_tab_open')]"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				margin_widget = {
					size = { 0 80 }
					layoutpolicy_horizontal = expanding
					hbox = {
						spacing = 16
						vbox = {
							layoutpolicy_vertical = expanding
							icon_and_text = {
								size = { 124 0 }
								blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/global_import_commerce_modifier.dds" }
								blockoverride "Text" { text = "[TradeView.GetPlayer.GetModifierValue('global_import_commerce_modifier')]" }
								tooltip = "[TradeView.GetPlayer.GetModifierTooltip('global_import_commerce_modifier')]" 
							}
							icon_and_text = {
								size = { 124 0 }
								blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/global_export_commerce_modifier.dds" }
								blockoverride "Text" { text = "[TradeView.GetPlayer.GetModifierValue('global_export_commerce_modifier')]" }
								tooltip = "[TradeView.GetPlayer.GetModifierTooltip('global_export_commerce_modifier')]"
							}
						}
						vbox = {
							layoutpolicy_vertical = expanding
							icon_and_text = {
								size = { 124 0 }
								blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/global_capital_trade_routes.dds" }
								blockoverride "Text" { text = "[TradeView.GetPlayer.GetCapitalState.GetMaxNumTradeRoutes]" }
								tooltip = "[TradeView.GetPlayer.GetCapitalState.GetTradeRoutesMaximumTooltip('CAPITAL_IMPORT_ROUTES_HEADER')]"
							}
							icon_and_text = {
								size = { 124 0 }
								blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/global_commerce_modifier.dds" }
								blockoverride "Text" { text = "[TradeView.GetPlayer.GetModifierValue('global_commerce_modifier')]" }
								tooltip = "[TradeView.GetPlayer.GetModifierTooltip('global_commerce_modifier')]"
							}
							#icon_and_text = {
							#	size = { 124 0 }
							#	blockoverride "Icon" { texture = "gfx/interface/icons/modifiers/global_state_trade_routes.dds" }
							#	blockoverride "Text" { text = "[TradeView.GetPlayer.GetModifierValue('global_state_trade_routes')]" }
							#	tooltip = "[TradeView.GetPlayer.GetModifierTooltip('global_state_trade_routes')]"
							#}
						}
						vbox = {
							layoutpolicy_horizontal = expanding
						}
						vbox = {
							layoutpolicy_vertical = expanding
							checkbox_entry = {
								size = { 200 0 }
								tooltip = "[SelectLocalization(TradeView.GetPlayer.AutoAcceptTrade,'AUTO_TRADE_ACCEPTED','AUTO_TRADE_DECLINED')]"
								blockoverride "Frame" { frame = "[TradeView.GetAutoFrame]" }
								blockoverride "On_click" { onclick = "[TradeView.ToggleAutoAcceptTrade]" }
								blockoverride "Text" { text = "ACCEPT_ALL_TRADES" }
							}
							
							checkbox_entry = {
								size = { 200 0 }
								tooltip = "[SelectLocalization(TradeView.GetPlayer.NeverGiveUpTradeSurplus,'BLOCK_TRADE_SURPLUS','ALLOW_TRADE_SURPLUS')]"
								blockoverride "Frame" { frame = "[TradeView.GetSurplusFrame]" }
								blockoverride "On_click" { onclick = "[TradeView.ToggleCapitalSurplus]" }
								blockoverride "Text" { text = "BLOCKED_SURPLUS" }
							}
						}
					}
				}
				
				margin_widget = {
					size = { 0 94 }
					layoutpolicy_horizontal = expanding
					hbox = {
						layoutpolicy_vertical = expanding
						margin_widget = {
							size = { 0 84 }
							
							layoutpolicy_horizontal = expanding
							sub_header = {
								size = { 100% 0 }
								blockoverride "Title_text" { text = "TRADE_VIEW_CAPITAL" }
							}
							overlappingitembox = {
								position = { 4 37 }
								name = "capital_surplus_grid"
								size = { 94% 60 }
								
								datamodel = "[TradeView.GetCapitalSurplus]"
								
								item = {
									widget = {
										size = { 48 48 }
										icon_card = {
											tooltip = "[CapitalSurplus.GetTooltip]"
											alwaystransparent = no
											filter_mouse = all
											blockoverride "Icon" { texture = "[GetTradeGoodsIcon(CapitalSurplus.GetTradeGoods)]" }
										}
									}
								}
							}
							
						}
					}
				}
				margin_widget = {
					size = { 0 422 }
					layoutpolicy_horizontal = expanding
					
					sub_header = {
						size = { 100% 0 }
						blockoverride "Title_text" { text = "NATIONAL_TRADEROUTES" }
					}
					
					flowcontainer = {
						spacing = 12
						position = { 4 42 }
						check_cross_filter = {
							blockoverride "On_click" { onclick = "[TradeView.Filter('export')]"}
							blockoverride "FilterYes" { visible = "[TradeView.IsFilterYes('export')]" }
							blockoverride "FilterNo" { visible = "[TradeView.IsFilterNo('export')]" }
							blockoverride "TagText" 
							{ 
								text = "TRADE_VIEW_FILTER_BY_EXPORTS" 
								max_width = 100
							}
						}
						
						check_cross_filter = {
							blockoverride "On_click" { onclick = "[TradeView.Filter('import')]"}
							blockoverride "FilterYes" { visible = "[TradeView.IsFilterYes('import')]" }
							blockoverride "FilterNo" { visible = "[TradeView.IsFilterNo('import')]" }
							blockoverride "TagText" 
							{ 
								text = "TRADE_VIEW_FILTER_BY_IMPORTS" 
								max_width = 100
							}
						}
						
						check_cross_filter = {
							blockoverride "On_click" { onclick = "[TradeView.Filter('domestic')]"}
							blockoverride "FilterYes" { visible = "[TradeView.IsFilterYes('domestic')]" }
							blockoverride "FilterNo" { visible = "[TradeView.IsFilterNo('domestic')]" }
							blockoverride "TagText" 
							{ 
								text = "TRADE_VIEW_FILTER_BY_DOMESTIC" 
								max_width = 100
							}
						}
						
					}
					
					flowcontainer = {
						position = { 350 44 }
						spacing = 4
						text_button_sort = {
							size = { 140 32 }
							blockoverride "Button_text" { text = "TR_GOODS" }
							blockoverride "Icon" { visible = no }
							blockoverride "On_click" { onclick = "[TradeView.SortRoutes('goods')]" }
							blockoverride "DownState" { down = "[TradeView.IsRoutesSorted('goods')]" }
						}					
						text_button_sort = {
							size = { 68 32 }
							blockoverride "Button_text" { text = "INCOME" }
							blockoverride "Icon" { visible = no }
							blockoverride "On_click" { onclick = "[TradeView.SortRoutes('income')]" }
							blockoverride "DownState" { down = "[TradeView.IsRoutesSorted('income')]" }
						}		
					}
					
					scrollarea = {
						position = { 2 82 }
						size = { 608 334 }
						scrollbarpolicy_horizontal = always_off
						
						using = VerticalScrollAreaCutOff
						
						scrollbar_vertical = {
							using = VerticalScrollBar
						}
						
						scrollwidget = {
							fixedgridbox = {
								name = "routes_grid"
								addrow = 38
								addcolumn = 608
								datamodel = "[TradeView.GetCurrentTradeRoutes]"
								item = {
									
									widget = {
										size = { 608 38 }
										list_entry = {
											size = { 100% 100% }
										}
										flowcontainer = {
											spacing = 5
											
											widget = {
												size = { 34 34 }	
												
												country_flag = {
													datacontext = "[ActiveTradeRoute.GetFrom.GetCountry]"
													tooltip = "COUNTRY_SHORTHAND_INFO"
													parentanchor = vcenter
													
													blockoverride "flag"
													{
														texture = "[ActiveTradeRoute.GetFrom.GetCountry.AccessCoatOfArms.GetTexture('(int32)56','(int32)56')]"
														frame = "[ActiveTradeRoute.GetFrom.GetCountry.AccessCoatOfArms.GetFrame('(int32)56','(int32)56')]"
														framesize = { 56 56 }
													}
													blockoverride "size"
													{
														size = { 34 34 }
													}
													
													blockoverride "click"
													{
														onclick = "[OpenDiplomacy(ActiveTradeRoute.GetFrom.GetCountry)]"
													}
													
													blockoverride "hover_leave"
													{
														onmousehierarchyleave = "[ClearHighlightColors]"
													}

													blockoverride "show_as_button"
													{
														visible = no
													}
													blockoverride "show_as_icon"
													{
														visible = yes
													}
												}
											}
											
											widget = {
												size = { 150 100% }
												onmousehierarchyenter = "[SetHighlightArea( ActiveTradeRoute.GetFrom.GetArea )]"
												textbox = {
													using = BaseFontS
													using = Black_FontColor
													text = "[ActiveTradeRoute.GetFrom.GetShortName]"
													size = { 130 28 }
													align = left
													alwaystransparent = no
													parentanchor = vcenter
													elide = right
													fontsize_min = 12
													max_width = 130
												}
												
												goto_button = { #TODO
													name = "zoom_to_FROM_button"
													position = { 2 0 }
													parentanchor = right|vcenter
													datacontext = [ActiveTradeRoute.GetFrom]
													tooltip = "zoom_to_getfrom" 
													blockoverride "On_click" { onclick = "[OnClickOnState(ActiveTradeRoute.GetFrom)]" }
												}
											}
											#widget = {}
											widget = {
												size = { 150 100% }
												onmousehierarchyenter = "[SetHighlightArea( ActiveTradeRoute.GetTo.GetArea )]"
												textbox = {
													using = BaseFontS
													using = Black_FontColor
													text = "[ActiveTradeRoute.GetTo.GetShortName]"
													size = { 130 28 }
													align = left
													alwaystransparent = no
													parentanchor = vcenter
													elide = right
													fontsize_min = 12
													max_width = 130
												}
												
												goto_button = { #TODO
													name = "zoom_to_TO_button"
													position = { 2 0 }
													parentanchor = right|vcenter
													datacontext = [ActiveTradeRoute.GetFrom]
													tooltip = "zoom_to_getto" 
													blockoverride "On_click" { onclick = "[OnClickOnState(ActiveTradeRoute.GetTo)]"  }
												}
											}
											
											widget = {
												size = { 130 100% }
												
												container = {
													parentanchor = vcenter
													position = { 0 0 }
													icon = {
														position = { 0 0 }
														size = { 30 30 }
														texture = "[GetTradeGoodsIcon(ActiveTradeRoute.GetGoods)]"
													}
													textbox = {
														position = { 34 0 }
														using = BaseFontS
														using = Black_FontColor
														text =  "[ActiveTradeRoute.GetGoods.GetName]"
														size = { 100% 28 }
														autoresize = yes
														fontsize_min = 12
														elide = right
														parentanchor = vcenter
														max_width = 88
													}
												}
												
											}										
											
											container = {
												parentanchor = vcenter
												textbox = {
													tooltip = "[ActiveTradeRoute.GetIncomeTooltip]"
													using = BaseFontM
													using = Black_FontColor
													text = "[ActiveTradeRoute.GetIncome|2]@gold!"
													autoresize = yes
													minimumsize = { 80 0 }
													max_width = 70
													fontsize_min = 12
													align = right
													elide = right
													parentanchor = vcenter
												}
											}

											widget = {
												size = { 32 32 }
												parentanchor = vcenter
												button_delete_item = {
													parentanchor = center
													size = { 32 32 }
													onmousehierarchyenter = "[SetHighlightArea( ActiveTradeRoute.GetTo.GetArea )]"
													blockoverride "On_click"
													{
														onclick = "[ActiveTradeRoute.OnClick]"
													}
													tooltip = "[ActiveTradeRoute.GetTooltip]"
												}
											}
										}
									}
								}
							}
						}
					}
					
				}
				margin_widget = {
					size = { 0 226 }
					layoutpolicy_horizontal = expanding
					sub_header_v = {
						blockoverride "Title_text" { text = "TRADE_VIEW_REQUEST_DENY" }
						size = { 49% 100% }
						
						dynamicgridbox = {
							name = "capital_surplus_grid"
							position = { 26 36 }
							size = { 100% 100% }
							maxhorizontalslots = 12
							datamodel_wrap = 6
							
							datamodel = "[TradeView.GetAvailableTradeGoods]"
							
							item = {
								trade_good_entry = {
									blockoverride "Icon" { 
										texture = "[GetTradeGoodsIcon(TradeGoodsGlue.GetTradeGood)]" 
										size = { 33 33 }
									}
									blockoverride "Text" { visible = no }
									blockoverride "On_click" { onclick = "[TradeGoodsGlue.ToggleDenyTradeGood]" }
									tooltip = "TRADEGOOD_DENY_INFO"
									size = { 40 40 }
									margin_bottom = 3
								}
							}
						}
						
					}
					
					sub_header_v = {
						blockoverride "Title_text" { text = "TRADE_VIEW_REQUEST_DENIED" }
						size = { 49% 100% }
						position = { 400 0 }
						
						dynamicgridbox = {
							name = "capital_surplus_grid"
							position = { 20 40 }
							size = { 100% 100% }
							maxhorizontalslots = 12
							datamodel_wrap = 6
							
							datamodel = "[TradeView.GetDeniedTradeGoods]"
							
							item = {
								trade_good_entry = {
									blockoverride "Icon" { 
										texture = "[GetTradeGoodsIcon(TradeGoodsGlue.GetTradeGood)]" 
										size = { 36 36 }
									}
									blockoverride "Text" { visible = no }
									blockoverride "On_click" { onclick = "[TradeGoodsGlue.ToggleDenyTradeGood]" }
									tooltip = "TRADEGOOD_DENY_INFO"
									size = { 42 40 }
									margin_bottom = 3
								}
							}
						}
						
					}	
				}
			}
			# Trade Goods tab
			vbox = {
				#layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				visible = "[GetVariableSystem.Exists('goods_tab_open')]"
				widget = {
					size = { 0 30 }
				}
				# Trade Goods Category Toggle buttons
				margin_widget = {
					size = { 0 100 }
					layoutpolicy_horizontal = expanding
					hbox = {
						spacing = 15
						widget = { size = { 165 0 } }
						goods_button_round = {
							size = { 90 90 }
							blockoverride "StandardIcon" { texture = "gfx/interface/icons/shared_icons/luxury_category.dds" }
							#blockoverride "On_click" { onclick = "[DiplomaticView.ViewCharacters]" }
							tooltip = "Luxury Goods"
						}
						goods_button_round = {
							size = { 90 90 }
							blockoverride "StandardIcon" { texture = "gfx/interface/icons/shared_icons/essential_category.dds" }
							#blockoverride "On_click" { onclick = "[DiplomaticView.ViewCharacters]" }
							tooltip = "Essential Goods"
						}
						goods_button_round = {
							size = { 90 90 }
							blockoverride "StandardIcon" { texture = "gfx/interface/icons/shared_icons/business_category.dds" }
							#blockoverride "On_click" { onclick = "[DiplomaticView.ViewCharacters]" }
							tooltip = "Business Goods"
						}
						goods_button_round = {
							size = { 90 90 }
							blockoverride "StandardIcon" { texture = "gfx/interface/icons/shared_icons/military_category.dds" }
							#blockoverride "On_click" { onclick = "[DiplomaticView.ViewCharacters]" }
							tooltip = "Military Goods"
						}
						vbox = {
							layoutpolicy_horizontal = expanding
						}
					}
				}
				@centered_position_x = 30
				@centered_position_y = 25
				# Category tags
				margin_widget = {
					size = { 0 50 }
					layoutpolicy_horizontal = expanding
					flowcontainer = {
						spacing = 6
						position = { @centered_position_x @centered_position_y }
						text_button_sort = {
							tooltip = "Trade Goods"
							
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_sub_tab"
							size = { 120 32 }
							
							blockoverride "Button_text"
							{
								text = "Goods"
							}
							blockoverride "Icon"
							{
								visible = no
							}
							blockoverride "Drop_shadow" 
							{
								visible = no
							}
						}
						text_button_sort = {
							tooltip = "Total produced nationally eacch quarter"
							
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_sub_tab"
							size = { 120 32 }
							
							blockoverride "Button_text"
							{
								text = "Produced"
							}
							blockoverride "Icon"
							{
								visible = no
							}
							blockoverride "Drop_shadow" 
							{
								visible = no
							}
						}
						text_button_sort = {
							tooltip = "Hover over values to see the average order value and average per-unit price of exports"
							
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_sub_tab"
							size = { 120 32 }
							
							blockoverride "Button_text"
							{
								text = "Exported"
							}
							blockoverride "Icon"
							{
								visible = no
							}
							blockoverride "Drop_shadow" 
							{
								visible = no
							}
						}
						text_button_sort = {
							tooltip = "Hover over values to see the average order value and average per-unit price of imports"
							
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_sub_tab"
							size = { 120 32 }
							
							blockoverride "Button_text"
							{
								text = "Imported"
							}
							blockoverride "Icon"
							{
								visible = no
							}
							blockoverride "Drop_shadow" 
							{
								visible = no
							}
						}
						text_button_sort = {
							tooltip = "Hover over values to see the average value of internal transfers and average per-unit price in internal transfers"
							
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_sub_tab"
							size = { 120 32 }
							
							blockoverride "Button_text"
							{
								text = "Traded internally"
							}
							blockoverride "Icon"
							{
								visible = no
							}
							blockoverride "Drop_shadow" 
							{
								visible = no
							}
						}
						text_button_sort = {
							tooltip = "Average price"
							
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_sub_tab"
							size = { 210 32 }
							
							blockoverride "Button_text"
							{
								text = "Average price"
							}
							blockoverride "Icon"
							{
								visible = no
							}
							blockoverride "Drop_shadow" 
							{
								visible = no
							}
						}
					}
				}
				margin_widget = {
					size = { 0 500 }
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					flowcontainer = {
						position = { @centered_position_x @centered_position_y }
						ignoreinvisible = yes
						direction = vertical
						spacing = 10
						flowcontainer = {
							spacing = 103
							background = {
								name = "Base"
								shaderfile = "gfx/FX/pdxgui_default.shader"
								using = flat_background_black
								spriteType = Corneredtiled
							}
							icon = {
								size = { 55 55 }
								position = { 0 -10 }
								texture = "gfx/interface/icons/tradegoods/grain.dds"
							}
							textbox = {
								size = { 35 30 }
								parentanchor = vcenter
								using = BaseFontL
								using = Black_FontColor
								tooltip = "Grain Sold!"
								text = "[TradeView.GetPlayer.MakeScope.GetVariable('country_internal_total_sold_grain').GetValue|0]"
							}
							textbox = {
								size = { 35 30 }
								parentanchor = vcenter
								using = BaseFontL
								using = Black_FontColor
								tooltip = "Grain Sold!"
								text = "[TradeView.GetPlayer.MakeScope.GetVariable('country_internal_total_sold_grain').GetValue|0]"
							}
							textbox = {
								size = { 35 30 }
								parentanchor = vcenter
								using = BaseFontL
								using = Black_FontColor
								tooltip = "Grain Bought!"
								text = "[TradeView.GetPlayer.MakeScope.GetVariable('country_internal_bought_total_grain').GetValue|0]"
							}
							textbox = {
								size = { 35 30 }
								parentanchor = vcenter
								using = BaseFontL
								using = Black_FontColor
								tooltip = "Grain Balance!"
								text = "[Subtract_CFixedPoint( TradeView.GetPlayer.MakeScope.GetVariable('country_internal_bought_total_grain').GetValue, TradeView.GetPlayer.MakeScope.GetVariable('country_internal_total_sold_grain').GetValue )|0]"
							}

							textbox = {
								size = { 40 30 }
								parentanchor = left|center
								using = BaseFontL
								using = Black_FontColor
								tooltip = "Market Price for Grain!"
								text = "[TradeView.GetPlayer.GetCapital.Custom('state_trade_zone_value_loc')]"
							}
							widget = { size = { 0 0 }}
						}
						flowcontainer = {
							spacing = 103
							background = {
								name = "Base"
								shaderfile = "gfx/FX/pdxgui_default.shader"
								using = flat_background_black
								spriteType = Corneredtiled
							}
							icon = {
								size = { 55 55 }
								position = { 0 -10 }
								texture = "gfx/interface/icons/tradegoods/coffee.dds"
							}
							textbox = {
								size = { 35 30 }
								parentanchor = vcenter
								using = BaseFontL
								using = Black_FontColor
								tooltip = "coffee!"
								text = "[TradeView.GetPlayer.MakeScope.GetVariable('country_internal_total_sold_coffee').GetValue|0]"
							}
							textbox = {
								size = { 35 30 }
								parentanchor = vcenter
								using = BaseFontL
								using = Black_FontColor
								tooltip = "Grain Sold!"
								text = "[TradeView.GetPlayer.MakeScope.GetVariable('country_internal_total_sold_grain').GetValue|0]"
							}
							textbox = {
								size = { 35 30 }
								parentanchor = vcenter
								using = BaseFontL
								using = Black_FontColor
								tooltip = "coffee!"
								text = "[TradeView.GetPlayer.MakeScope.GetVariable('country_internal_bought_total_coffee').GetValue|0]"
							}
							textbox = {
								size = { 35 30 }
								parentanchor = vcenter
								using = BaseFontL
								using = Black_FontColor
								tooltip = "Grain Balance!"
								text = "[Subtract_CFixedPoint( TradeView.GetPlayer.MakeScope.GetVariable('country_internal_bought_total_coffee').GetValue, TradeView.GetPlayer.MakeScope.GetVariable('country_internal_total_sold_coffee').GetValue )|0]"
							}

							textbox = {
								size = { 40 30 }
								parentanchor = left|center
								using = BaseFontL
								using = Black_FontColor
								tooltip = "Grain Bought!"
								text = "[TradeView.GetPlayer.MakeScope.GetVariable('global_price_coffee').GetValue|2]"
							}
							widget = { size = { 0 0 }}
						}
					}
				}
			}
			# Trade Zones Tab
			vbox = {
				visible = "[GetVariableSystem.Exists('trade_zone_view_open')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 10

				scrollarea = {
					size = { 770 @[window_height - 120]}
					layoutpolicy_vertical = expanding
					using = VerticalScrollAreaCutOff

					scrollbar_vertical = {
						using = VerticalScrollBar
					}

					scrollbarpolicy_horizontal = always_off
							
					scrollwidget = {
						vbox = {
							vbox = {
								layoutpolicy_horizontal = expanding 
								layoutpolicy_vertical = shrinking
								datamodel = "[Player.MakeScope.GetList('trade_zones_list')]"
								item = {
									hbox = {
										hbox = {
											layoutpolicy_vertical = expanding
											layoutpolicy_horizontal = shrinking
											datacontext = "[Scope.Province]"
											widget = {
												size = { 5 55 }
											}
											textbox = {
												margin_left = 10
												size = { 115 0 }
												using = BaseFontM
												using = Black_FontColor
												text = "[Province.Custom('state_trade_zone_loc')]" #TradeZone name
											}
											widget = {
												size = { 70 0 }
											}
											icon_and_text = {
												size = { 100 0 }
												tooltip = "TRADE_ZONE_PRODUCTION_TT"
												blockoverride "Icon"
													{
														texture = "gfx/interface/icons/modifiers/base_resources.dds"
													}
												blockoverride "Text"
												{
													text = "[Province.Custom('state_trade_zone_value_loc')]" #TradeZone goods produced
												}
											}
											widget = {
												size = { 25 0 }
											}
											icon_and_text = {
												size = { 100 0 }
												tooltip = "TRADE_ZONE_POPULATION_TT"
												blockoverride "Icon"
													{
														texture = "gfx/interface/icons/shared_icons/pop_type.dds"
													}
												blockoverride "Text"
												{
													text = "[Province.Custom('trade_zone_population_loc')]" #TradeZone pops
												}
											}
											textbox = {
												size = { 550 }
											}
										}
									}
								}
							}
						}
					}
				}
			}
			vbox = {
				layoutpolicy_vertical = expanding
			}
		}
	}
}